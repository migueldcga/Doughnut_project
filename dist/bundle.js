(()=>{"use strict";function t(){}function n(n){return null==n?t:function(){return this.querySelector(n)}}function e(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function r(){return[]}function i(t){return null==t?r:function(){return this.querySelectorAll(t)}}function a(t){return function(){return this.matches(t)}}function o(t){return function(n){return n.matches(t)}}var u=Array.prototype.find;function s(){return this.firstElementChild}var l=Array.prototype.filter;function c(){return this.children}function h(t){return new Array(t.length)}function f(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function p(t,n,e,r,i,a){for(var o,u=0,s=n.length,l=a.length;u<l;++u)(o=n[u])?(o.__data__=a[u],r[u]=o):e[u]=new f(t,a[u]);for(;u<s;++u)(o=n[u])&&(i[u]=o)}function d(t,n,e,r,i,a,o){var u,s,l,c=new Map,h=n.length,p=a.length,d=new Array(h);for(u=0;u<h;++u)(s=n[u])&&(d[u]=l=o.call(s,s.__data__,u,n)+"",c.has(l)?i[u]=s:c.set(l,s));for(u=0;u<p;++u)l=o.call(t,a[u],u,a)+"",(s=c.get(l))?(r[u]=s,s.__data__=a[u],c.delete(l)):e[u]=new f(t,a[u]);for(u=0;u<h;++u)(s=n[u])&&c.get(d[u])===s&&(i[u]=s)}function _(t){return t.__data__}function y(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}f.prototype={constructor:f,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var g="http://www.w3.org/1999/xhtml";const m={svg:"http://www.w3.org/2000/svg",xhtml:g,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function v(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),m.hasOwnProperty(n)?{space:m[n],local:t}:t}function w(t){return function(){this.removeAttribute(t)}}function x(t){return function(){this.removeAttributeNS(t.space,t.local)}}function b(t,n){return function(){this.setAttribute(t,n)}}function M(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function A(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function k(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function N(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function S(t){return function(){this.style.removeProperty(t)}}function E(t,n,e){return function(){this.style.setProperty(t,n,e)}}function P(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function T(t,n){return t.style.getPropertyValue(n)||N(t).getComputedStyle(t,null).getPropertyValue(n)}function R(t){return function(){delete this[t]}}function z(t,n){return function(){this[t]=n}}function C(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function I(t){return t.trim().split(/^|\s+/)}function X(t){return t.classList||new q(t)}function q(t){this._node=t,this._names=I(t.getAttribute("class")||"")}function L(t,n){for(var e=X(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function O(t,n){for(var e=X(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function j(t){return function(){L(this,t)}}function Y(t){return function(){O(this,t)}}function D(t,n){return function(){(n.apply(this,arguments)?L:O)(this,t)}}function B(){this.textContent=""}function F(t){return function(){this.textContent=t}}function H(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function V(){this.innerHTML=""}function U(t){return function(){this.innerHTML=t}}function G(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function Z(){this.nextSibling&&this.parentNode.appendChild(this)}function J(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function K(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===g&&n.documentElement.namespaceURI===g?n.createElement(t):n.createElementNS(e,t)}}function Q(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function W(t){var n=v(t);return(n.local?Q:K)(n)}function tt(){return null}function nt(){var t=this.parentNode;t&&t.removeChild(this)}function et(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function rt(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function it(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,a=n.length;r<a;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function at(t,n,e){return function(){var r,i=this.__on,a=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var o=0,u=i.length;o<u;++o)if((r=i[o]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=a,r.options=e),void(r.value=n);this.addEventListener(t.type,a,e),r={type:t.type,name:t.name,value:n,listener:a,options:e},i?i.push(r):this.__on=[r]}}function ot(t,n,e){var r=N(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function ut(t,n){return function(){return ot(this,t,n)}}function st(t,n){return function(){return ot(this,t,n.apply(this,arguments))}}q.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var lt=[null];function ct(t,n){this._groups=t,this._parents=n}function ht(){return new ct([[document.documentElement]],lt)}ct.prototype=ht.prototype={constructor:ct,select:function(t){"function"!=typeof t&&(t=n(t));for(var e=this._groups,r=e.length,i=new Array(r),a=0;a<r;++a)for(var o,u,s=e[a],l=s.length,c=i[a]=new Array(l),h=0;h<l;++h)(o=s[h])&&(u=t.call(o,o.__data__,h,s))&&("__data__"in o&&(u.__data__=o.__data__),c[h]=u);return new ct(i,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);return null==n?[]:e(n)}}(t):i(t);for(var n=this._groups,r=n.length,a=[],o=[],u=0;u<r;++u)for(var s,l=n[u],c=l.length,h=0;h<c;++h)(s=l[h])&&(a.push(t.call(s,s.__data__,h,l)),o.push(s));return new ct(a,o)},selectChild:function(t){return this.select(null==t?s:function(t){return function(){return u.call(this.children,t)}}("function"==typeof t?t:o(t)))},selectChildren:function(t){return this.selectAll(null==t?c:function(t){return function(){return l.call(this.children,t)}}("function"==typeof t?t:o(t)))},filter:function(t){"function"!=typeof t&&(t=a(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],s=u.length,l=r[i]=[],c=0;c<s;++c)(o=u[c])&&t.call(o,o.__data__,c,u)&&l.push(o);return new ct(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,_);var r,i=n?d:p,a=this._parents,o=this._groups;"function"!=typeof t&&(r=t,t=function(){return r});for(var u=o.length,s=new Array(u),l=new Array(u),c=new Array(u),h=0;h<u;++h){var f=a[h],y=o[h],g=y.length,m=e(t.call(f,f&&f.__data__,h,a)),v=m.length,w=l[h]=new Array(v),x=s[h]=new Array(v);i(f,y,w,x,c[h]=new Array(g),m,n);for(var b,M,A=0,k=0;A<v;++A)if(b=w[A]){for(A>=k&&(k=A+1);!(M=x[k])&&++k<v;);b._next=M||null}}return(s=new ct(s,a))._enter=l,s._exit=c,s},enter:function(){return new ct(this._enter||this._groups.map(h),this._parents)},exit:function(){return new ct(this._exit||this._groups.map(h),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,a=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?a.remove():e(a),r&&i?r.merge(i).order():i},merge:function(t){if(!(t instanceof ct))throw new Error("invalid merge");for(var n=this._groups,e=t._groups,r=n.length,i=e.length,a=Math.min(r,i),o=new Array(r),u=0;u<a;++u)for(var s,l=n[u],c=e[u],h=l.length,f=o[u]=new Array(h),p=0;p<h;++p)(s=l[p]||c[p])&&(f[p]=s);for(;u<r;++u)o[u]=n[u];return new ct(o,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],a=i.length-1,o=i[a];--a>=0;)(r=i[a])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=y);for(var e=this._groups,r=e.length,i=new Array(r),a=0;a<r;++a){for(var o,u=e[a],s=u.length,l=i[a]=new Array(s),c=0;c<s;++c)(o=u[c])&&(l[c]=o);l.sort(n)}return new ct(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,a=r.length;i<a;++i){var o=r[i];if(o)return o}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,a=n[e],o=0,u=a.length;o<u;++o)(i=a[o])&&t.call(i,i.__data__,o,a);return this},attr:function(t,n){var e=v(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?x:w:"function"==typeof n?e.local?k:A:e.local?M:b)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?S:"function"==typeof n?P:E)(t,n,null==e?"":e)):T(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?R:"function"==typeof n?C:z)(t,n)):this.node()[t]},classed:function(t,n){var e=I(t+"");if(arguments.length<2){for(var r=X(this.node()),i=-1,a=e.length;++i<a;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?D:n?j:Y)(e,n))},text:function(t){return arguments.length?this.each(null==t?B:("function"==typeof t?H:F)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?V:("function"==typeof t?G:U)(t)):this.node().innerHTML},raise:function(){return this.each(Z)},lower:function(){return this.each(J)},append:function(t){var n="function"==typeof t?t:W(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,e){var r="function"==typeof t?t:W(t),i=null==e?tt:"function"==typeof e?e:n(e);return this.select((function(){return this.insertBefore(r.apply(this,arguments),i.apply(this,arguments)||null)}))},remove:function(){return this.each(nt)},clone:function(t){return this.select(t?rt:et)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,a=function(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}(t+""),o=a.length;if(!(arguments.length<2)){for(u=n?at:it,r=0;r<o;++r)this.each(u(a[r],n,e));return this}var u=this.node().__on;if(u)for(var s,l=0,c=u.length;l<c;++l)for(r=0,s=u[l];r<o;++r)if((i=a[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?st:ut)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],a=0,o=i.length;a<o;++a)(r=i[a])&&(yield r)}};const ft=ht;var pt={value:()=>{}};function dt(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new _t(r)}function _t(t){this._=t}function yt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function gt(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=pt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}_t.prototype=dt.prototype={constructor:_t,on:function(t,n){var e,r,i=this._,a=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))),o=-1,u=a.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=a[o]).type)i[e]=gt(i[e],t.name,n);else if(null==n)for(e in i)i[e]=gt(i[e],t.name,null);return this}for(;++o<u;)if((e=(t=a[o]).type)&&(e=yt(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new _t(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),a=0;a<e;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,e=(r=this._[t]).length;a<e;++a)r[a].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(n,e)}};const mt=dt;var vt,wt,xt=0,bt=0,Mt=0,At=1e3,kt=0,Nt=0,St=0,Et="object"==typeof performance&&performance.now?performance:Date,$t="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Pt(){return Nt||($t(Tt),Nt=Et.now()+St)}function Tt(){Nt=0}function Rt(){this._call=this._time=this._next=null}function zt(t,n,e){var r=new Rt;return r.restart(t,n,e),r}function Ct(){Nt=(kt=Et.now())+St,xt=bt=0;try{!function(){Pt(),++xt;for(var t,n=vt;n;)(t=Nt-n._time)>=0&&n._call.call(null,t),n=n._next;--xt}()}finally{xt=0,function(){for(var t,n,e=vt,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:vt=n);wt=t,Xt(r)}(),Nt=0}}function It(){var t=Et.now(),n=t-kt;n>At&&(St-=n,kt=t)}function Xt(t){xt||(bt&&(bt=clearTimeout(bt)),t-Nt>24?(t<1/0&&(bt=setTimeout(Ct,t-Et.now()-St)),Mt&&(Mt=clearInterval(Mt))):(Mt||(kt=Et.now(),Mt=setInterval(It,At)),xt=1,$t(Ct)))}function qt(t,n,e){var r=new Rt;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}Rt.prototype=zt.prototype={constructor:Rt,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Pt():+e)+(null==n?0:+n),this._next||wt===this||(wt?wt._next=this:vt=this,wt=this),this._call=t,this._time=e,Xt()},stop:function(){this._call&&(this._call=null,this._time=1/0,Xt())}};var Lt=mt("start","end","cancel","interrupt"),Ot=[],jt=0,Yt=1,Dt=2,Bt=3,Ft=4,Ht=5,Vt=6;function Ut(t,n,e,r,i,a){var o=t.__transition;if(o){if(e in o)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function a(s){var l,c,h,f;if(e.state!==Yt)return u();for(l in i)if((f=i[l]).name===e.name){if(f.state===Bt)return qt(a);f.state===Ft?(f.state=Vt,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=Vt,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(qt((function(){e.state===Bt&&(e.state=Ft,e.timer.restart(o,e.delay,e.time),o(s))})),e.state=Dt,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Dt){for(e.state=Bt,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function o(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=Ht,1),a=-1,o=r.length;++a<o;)r[a].call(t,i);e.state===Ht&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=Vt,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=zt((function(t){e.state=Yt,e.timer.restart(a,e.delay,e.time),e.delay<=t&&a(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Lt,tween:Ot,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:jt})}function Gt(t,n){var e=Jt(t,n);if(e.state>jt)throw new Error("too late; already scheduled");return e}function Zt(t,n){var e=Jt(t,n);if(e.state>Bt)throw new Error("too late; already running");return e}function Jt(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Kt(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}var Qt,Wt=180/Math.PI,tn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function nn(t,n,e,r,i,a){var o,u,s;return(o=Math.sqrt(t*t+n*n))&&(t/=o,n/=o),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,o=-o),{translateX:i,translateY:a,rotate:Math.atan2(n,t)*Wt,skewX:Math.atan(s)*Wt,scaleX:o,scaleY:u}}function en(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(a,o){var u=[],s=[];return a=t(a),o=t(o),function(t,r,i,a,o,u){if(t!==i||r!==a){var s=o.push("translate(",null,n,null,e);u.push({i:s-4,x:Kt(t,i)},{i:s-2,x:Kt(r,a)})}else(i||a)&&o.push("translate("+i+n+a+e)}(a.translateX,a.translateY,o.translateX,o.translateY,u,s),function(t,n,e,a){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),a.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Kt(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(a.rotate,o.rotate,u,s),function(t,n,e,a){t!==n?a.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Kt(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(a.skewX,o.skewX,u,s),function(t,n,e,r,a,o){if(t!==e||n!==r){var u=a.push(i(a)+"scale(",null,",",null,")");o.push({i:u-4,x:Kt(t,e)},{i:u-2,x:Kt(n,r)})}else 1===e&&1===r||a.push(i(a)+"scale("+e+","+r+")")}(a.scaleX,a.scaleY,o.scaleX,o.scaleY,u,s),a=o=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var rn=en((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?tn:nn(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),an=en((function(t){return null==t?tn:(Qt||(Qt=document.createElementNS("http://www.w3.org/2000/svg","g")),Qt.setAttribute("transform",t),(t=Qt.transform.baseVal.consolidate())?nn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):tn)}),", ",")",")");function on(t,n){var e,r;return function(){var i=Zt(this,t),a=i.tween;if(a!==e)for(var o=0,u=(r=e=a).length;o<u;++o)if(r[o].name===n){(r=r.slice()).splice(o,1);break}i.tween=r}}function un(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var a=Zt(this,t),o=a.tween;if(o!==r){i=(r=o).slice();for(var u={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=u;break}s===l&&i.push(u)}a.tween=i}}function sn(t,n,e){var r=t._id;return t.each((function(){var t=Zt(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Jt(t,r).value[n]}}function ln(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function cn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function hn(){}var fn=.7,pn=1/fn,dn="\\s*([+-]?\\d+)\\s*",_n="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",yn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",gn=/^#([0-9a-f]{3,8})$/,mn=new RegExp("^rgb\\("+[dn,dn,dn]+"\\)$"),vn=new RegExp("^rgb\\("+[yn,yn,yn]+"\\)$"),wn=new RegExp("^rgba\\("+[dn,dn,dn,_n]+"\\)$"),xn=new RegExp("^rgba\\("+[yn,yn,yn,_n]+"\\)$"),bn=new RegExp("^hsl\\("+[_n,yn,yn]+"\\)$"),Mn=new RegExp("^hsla\\("+[_n,yn,yn,_n]+"\\)$"),An={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function kn(){return this.rgb().formatHex()}function Nn(){return this.rgb().formatRgb()}function Sn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=gn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?En(n):3===e?new Tn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?$n(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?$n(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=mn.exec(t))?new Tn(n[1],n[2],n[3],1):(n=vn.exec(t))?new Tn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=wn.exec(t))?$n(n[1],n[2],n[3],n[4]):(n=xn.exec(t))?$n(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=bn.exec(t))?In(n[1],n[2]/100,n[3]/100,1):(n=Mn.exec(t))?In(n[1],n[2]/100,n[3]/100,n[4]):An.hasOwnProperty(t)?En(An[t]):"transparent"===t?new Tn(NaN,NaN,NaN,0):null}function En(t){return new Tn(t>>16&255,t>>8&255,255&t,1)}function $n(t,n,e,r){return r<=0&&(t=n=e=NaN),new Tn(t,n,e,r)}function Pn(t,n,e,r){return 1===arguments.length?((i=t)instanceof hn||(i=Sn(i)),i?new Tn((i=i.rgb()).r,i.g,i.b,i.opacity):new Tn):new Tn(t,n,e,null==r?1:r);var i}function Tn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Rn(){return"#"+Cn(this.r)+Cn(this.g)+Cn(this.b)}function zn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Cn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function In(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new qn(t,n,e,r)}function Xn(t){if(t instanceof qn)return new qn(t.h,t.s,t.l,t.opacity);if(t instanceof hn||(t=Sn(t)),!t)return new qn;if(t instanceof qn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),a=Math.max(n,e,r),o=NaN,u=a-i,s=(a+i)/2;return u?(o=n===a?(e-r)/u+6*(e<r):e===a?(r-n)/u+2:(n-e)/u+4,u/=s<.5?a+i:2-a-i,o*=60):u=s>0&&s<1?0:o,new qn(o,u,s,t.opacity)}function qn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Ln(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function On(t,n,e,r,i){var a=t*t,o=a*t;return((1-3*t+3*a-o)*n+(4-6*a+3*o)*e+(1+3*t+3*a-3*o)*r+o*i)/6}ln(hn,Sn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:kn,formatHex:kn,formatHsl:function(){return Xn(this).formatHsl()},formatRgb:Nn,toString:Nn}),ln(Tn,Pn,cn(hn,{brighter:function(t){return t=null==t?pn:Math.pow(pn,t),new Tn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?fn:Math.pow(fn,t),new Tn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Rn,formatHex:Rn,formatRgb:zn,toString:zn})),ln(qn,(function(t,n,e,r){return 1===arguments.length?Xn(t):new qn(t,n,e,null==r?1:r)}),cn(hn,{brighter:function(t){return t=null==t?pn:Math.pow(pn,t),new qn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?fn:Math.pow(fn,t),new qn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Tn(Ln(t>=240?t-240:t+120,i,r),Ln(t,i,r),Ln(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const jn=t=>()=>t;function Yn(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):jn(isNaN(t)?n:t)}const Dn=function t(n){var e=function(t){return 1==(t=+t)?Yn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):jn(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=Pn(t)).r,(n=Pn(n)).r),i=e(t.g,n.g),a=e(t.b,n.b),o=Yn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=a(n),t.opacity=o(n),t+""}}return r.gamma=t,r}(1);function Bn(t){return function(n){var e,r,i=n.length,a=new Array(i),o=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=Pn(n[e]),a[e]=r.r||0,o[e]=r.g||0,u[e]=r.b||0;return a=t(a),o=t(o),u=t(u),r.opacity=1,function(t){return r.r=a(t),r.g=o(t),r.b=u(t),r+""}}}Bn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],a=t[r+1],o=r>0?t[r-1]:2*i-a,u=r<n-1?t[r+2]:2*a-i;return On((e-r/n)*n,o,i,a,u)}})),Bn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],a=t[r%n],o=t[(r+1)%n],u=t[(r+2)%n];return On((e-r/n)*n,i,a,o,u)}}));var Fn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Hn=new RegExp(Fn.source,"g");function Vn(t,n){var e,r,i,a=Fn.lastIndex=Hn.lastIndex=0,o=-1,u=[],s=[];for(t+="",n+="";(e=Fn.exec(t))&&(r=Hn.exec(n));)(i=r.index)>a&&(i=n.slice(a,i),u[o]?u[o]+=i:u[++o]=i),(e=e[0])===(r=r[0])?u[o]?u[o]+=r:u[++o]=r:(u[++o]=null,s.push({i:o,x:Kt(e,r)})),a=Hn.lastIndex;return a<n.length&&(i=n.slice(a),u[o]?u[o]+=i:u[++o]=i),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})}function Un(t,n){var e;return("number"==typeof n?Kt:n instanceof Sn?Dn:(e=Sn(n))?(n=e,Dn):Vn)(t,n)}function Gn(t){return function(){this.removeAttribute(t)}}function Zn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Jn(t,n,e){var r,i,a=e+"";return function(){var o=this.getAttribute(t);return o===a?null:o===r?i:i=n(r=o,e)}}function Kn(t,n,e){var r,i,a=e+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===a?null:o===r?i:i=n(r=o,e)}}function Qn(t,n,e){var r,i,a;return function(){var o,u,s=e(this);if(null!=s)return(o=this.getAttribute(t))===(u=s+"")?null:o===r&&u===i?a:(i=u,a=n(r=o,s));this.removeAttribute(t)}}function Wn(t,n,e){var r,i,a;return function(){var o,u,s=e(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:o===r&&u===i?a:(i=u,a=n(r=o,s));this.removeAttributeNS(t.space,t.local)}}function te(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}(t,i)),e}return i._value=n,i}function ne(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}(t,i)),e}return i._value=n,i}function ee(t,n){return function(){Gt(this,t).delay=+n.apply(this,arguments)}}function re(t,n){return n=+n,function(){Gt(this,t).delay=n}}function ie(t,n){return function(){Zt(this,t).duration=+n.apply(this,arguments)}}function ae(t,n){return n=+n,function(){Zt(this,t).duration=n}}var oe=ft.prototype.constructor;function ue(t){return function(){this.style.removeProperty(t)}}var se=0;function le(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function ce(t){return ft().transition(t)}function he(){return++se}var fe=ft.prototype;le.prototype=ce.prototype={constructor:le,select:function(t){var e=this._name,r=this._id;"function"!=typeof t&&(t=n(t));for(var i=this._groups,a=i.length,o=new Array(a),u=0;u<a;++u)for(var s,l,c=i[u],h=c.length,f=o[u]=new Array(h),p=0;p<h;++p)(s=c[p])&&(l=t.call(s,s.__data__,p,c))&&("__data__"in s&&(l.__data__=s.__data__),f[p]=l,Ut(f[p],e,r,p,f,Jt(s,r)));return new le(o,this._parents,e,r)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=i(t));for(var r=this._groups,a=r.length,o=[],u=[],s=0;s<a;++s)for(var l,c=r[s],h=c.length,f=0;f<h;++f)if(l=c[f]){for(var p,d=t.call(l,l.__data__,f,c),_=Jt(l,e),y=0,g=d.length;y<g;++y)(p=d[y])&&Ut(p,n,e,y,d,_);o.push(d),u.push(l)}return new le(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=a(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],s=u.length,l=r[i]=[],c=0;c<s;++c)(o=u[c])&&t.call(o,o.__data__,c,u)&&l.push(o);return new le(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,a=Math.min(r,i),o=new Array(r),u=0;u<a;++u)for(var s,l=n[u],c=e[u],h=l.length,f=o[u]=new Array(h),p=0;p<h;++p)(s=l[p]||c[p])&&(f[p]=s);for(;u<r;++u)o[u]=n[u];return new le(o,this._parents,this._name,this._id)},selection:function(){return new oe(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=he(),r=this._groups,i=r.length,a=0;a<i;++a)for(var o,u=r[a],s=u.length,l=0;l<s;++l)if(o=u[l]){var c=Jt(o,n);Ut(o,t,e,l,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new le(r,this._parents,t,e)},call:fe.call,nodes:fe.nodes,node:fe.node,size:fe.size,empty:fe.empty,each:fe.each,on:function(t,n){var e=this._id;return arguments.length<2?Jt(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Gt:Zt;return function(){var o=a(this,t),u=o.on;u!==r&&(i=(r=u).copy()).on(n,e),o.on=i}}(e,t,n))},attr:function(t,n){var e=v(t),r="transform"===e?an:Un;return this.attrTween(t,"function"==typeof n?(e.local?Wn:Qn)(e,r,sn(this,"attr."+t,n)):null==n?(e.local?Zn:Gn)(e):(e.local?Kn:Jn)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=v(t);return this.tween(e,(r.local?te:ne)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?rn:Un;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var a=T(this,t),o=(this.style.removeProperty(t),T(this,t));return a===o?null:a===e&&o===r?i:i=n(e=a,r=o)}}(t,r)).on("end.style."+t,ue(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,a;return function(){var o=T(this,t),u=e(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=T(this,t)),o===s?null:o===r&&s===i?a:(i=s,a=n(r=o,u))}}(t,r,sn(this,"style."+t,n))).each(function(t,n){var e,r,i,a,o="style."+n,u="end."+o;return function(){var s=Zt(this,t),l=s.on,c=null==s.value[o]?a||(a=ue(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(u,i=c),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,a=e+"";return function(){var o=T(this,t);return o===a?null:o===r?i:i=n(r=o,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function a(){var a=n.apply(this,arguments);return a!==i&&(r=(i=a)&&function(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}(t,a,e)),r}return a._value=n,a}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(sn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,function(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&function(t){return function(n){this.textContent=t.call(this,n)}}(r)),n}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Jt(this.node(),e).tween,a=0,o=i.length;a<o;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==n?on:un)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ee:re)(n,t)):Jt(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ie:ae)(n,t)):Jt(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){Zt(this,t).ease=n}}(n,t)):Jt(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;Zt(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(a,o){var u={value:o},s={value:function(){0==--i&&a()}};e.each((function(){var e=Zt(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n})),0===i&&a()}))},[Symbol.iterator]:fe[Symbol.iterator]};var pe={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function de(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}ft.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,i,a=t.__transition,o=!0;if(a){for(i in n=null==n?null:n+"",a)(e=a[i]).name===n?(r=e.state>Dt&&e.state<Ht,e.state=Vt,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete a[i]):o=!1;o&&delete t.__transition}}(this,t)}))},ft.prototype.transition=function(t){var n,e;t instanceof le?(n=t._id,t=t._name):(n=he(),(e=pe).time=Pt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var o,u=r[a],s=u.length,l=0;l<s;++l)(o=u[l])&&Ut(o,t,n,l,u,e||de(o,n));return new le(r,this._parents,t,n)};const{abs:_e,max:ye,min:ge}=Math;function me(t){return{type:t}}function ve(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function we(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),o=new Array(r);for(e=0;e<i;++e)a[e]=Ae(t[e],n[e]);for(;e<r;++e)o[e]=n[e];return function(t){for(e=0;e<i;++e)o[e]=a[e](t);return o}}function xe(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function be(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Ae(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}function Me(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(a){for(e=0;e<r;++e)i[e]=t[e]*(1-a)+n[e]*a;return i}}function Ae(t,n){var e,r,i=typeof n;return null==n||"boolean"===i?jn(n):("number"===i?Kt:"string"===i?(e=Sn(n))?(n=e,Dn):Vn:n instanceof Sn?Dn:n instanceof Date?xe:(r=n,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(n)?we:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?be:Kt:Me))(t,n)}function ke(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}["w","e"].map(me),["n","s"].map(me),["n","w","e","s","nw","ne","sw","se"].map(me);const Ne=Symbol("implicit");function Se(){var t=new Map,n=[],e=[],r=Ne;function i(i){var a=i+"",o=t.get(a);if(!o){if(r!==Ne)return r;t.set(a,o=n.push(i))}return e[(o-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=new Map;for(const r of e){const e=r+"";t.has(e)||t.set(e,n.push(r))}return i},i.range=function(t){return arguments.length?(e=Array.from(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Se(n,e).unknown(r)},ke.apply(i,arguments),i}function Ee(){var t,n,e=Se().unknown(void 0),r=e.domain,i=e.range,a=0,o=1,u=!1,s=0,l=0,c=.5;function h(){var e=r().length,h=o<a,f=h?o:a,p=h?a:o;t=(p-f)/Math.max(1,e-s+2*l),u&&(t=Math.floor(t)),f+=(p-f-t*(e-s))*c,n=t*(1-s),u&&(f=Math.round(f),n=Math.round(n));var d=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),a=new Array(i);++r<i;)a[r]=t+r*e;return a}(e).map((function(n){return f+t*n}));return i(h?d.reverse():d)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),h()):r()},e.range=function(t){return arguments.length?([a,o]=t,a=+a,o=+o,h()):[a,o]},e.rangeRound=function(t){return[a,o]=t,a=+a,o=+o,u=!0,h()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,h()):u},e.padding=function(t){return arguments.length?(s=Math.min(1,l=+t),h()):s},e.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),h()):s},e.paddingOuter=function(t){return arguments.length?(l=+t,h()):l},e.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),h()):c},e.copy=function(){return Ee(r(),[a,o]).round(u).paddingInner(s).paddingOuter(l).align(c)},ke.apply(h(),arguments)}function $e(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function Pe(t){let n=t,e=t;function r(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const a=r+i>>>1;e(t[a],n)<0?r=a+1:i=a}return r}return 1===t.length&&(n=(n,e)=>t(n)-e,e=function(t){return(n,e)=>$e(t(n),e)}(t)),{left:r,center:function(t,e,i,a){null==i&&(i=0),null==a&&(a=t.length);const o=r(t,e,i,a-1);return o>i&&n(t[o-1],e)>-n(t[o],e)?o-1:o},right:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const a=r+i>>>1;e(t[a],n)>0?i=a:r=a+1}return r}}}const Te=Pe($e),Re=Te.right,ze=(Te.left,Pe((function(t){return null===t?NaN:+t})).center,Re);function Ce(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}function Ie(t){return+t}var Xe=[0,1];function qe(t){return t}function Le(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function Oe(t,n,e){var r=t[0],i=t[1],a=n[0],o=n[1];return i<r?(r=Le(i,r),a=e(o,a)):(r=Le(r,i),a=e(a,o)),function(t){return a(r(t))}}function je(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),a=new Array(r),o=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++o<r;)i[o]=Le(t[o],t[o+1]),a[o]=e(n[o],n[o+1]);return function(n){var e=ze(t,n,1,r)-1;return a[e](i[e](n))}}function Ye(){var t,n,e,r,i,a,o=Xe,u=Xe,s=Ae,l=qe;function c(){var t,n,e,s=Math.min(o.length,u.length);return l!==qe&&(t=o[0],n=o[s-1],t>n&&(e=t,t=n,n=e),l=function(e){return Math.max(t,Math.min(n,e))}),r=s>2?je:Oe,i=a=null,h}function h(n){return null==n||isNaN(n=+n)?e:(i||(i=r(o.map(t),u,s)))(t(l(n)))}return h.invert=function(e){return l(n((a||(a=r(u,o.map(t),Kt)))(e)))},h.domain=function(t){return arguments.length?(o=Array.from(t,Ie),c()):o.slice()},h.range=function(t){return arguments.length?(u=Array.from(t),c()):u.slice()},h.rangeRound=function(t){return u=Array.from(t),s=Ce,c()},h.clamp=function(t){return arguments.length?(l=!!t||qe,c()):l!==qe},h.interpolate=function(t){return arguments.length?(s=t,c()):s},h.unknown=function(t){return arguments.length?(e=t,h):e},function(e,r){return t=e,n=r,c()}}var De=Math.sqrt(50),Be=Math.sqrt(10),Fe=Math.sqrt(2);function He(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=De?10:a>=Be?5:a>=Fe?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=De?10:a>=Be?5:a>=Fe?2:1)}var Ve,Ue=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Ge(t){if(!(n=Ue.exec(t)))throw new Error("invalid format: "+t);var n;return new Ze({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function Ze(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Je(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function Ke(t){return(t=Je(Math.abs(t)))?t[1]:NaN}function Qe(t,n){var e=Je(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}Ge.prototype=Ze.prototype,Ze.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const We={"%":(t,n)=>(100*t).toFixed(n),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,n)=>t.toExponential(n),f:(t,n)=>t.toFixed(n),g:(t,n)=>t.toPrecision(n),o:t=>Math.round(t).toString(8),p:(t,n)=>Qe(100*t,n),r:Qe,s:function(t,n){var e=Je(t,n);if(!e)return t+"";var r=e[0],i=e[1],a=i-(Ve=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return a===o?r:a>o?r+new Array(a-o+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+Je(t,Math.max(0,n+a-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function tr(t){return t}var nr,er,rr,ir=Array.prototype.map,ar=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function or(t){var n=t.domain;return t.ticks=function(t){var e=n();return function(t,n,e){var r,i,a,o,u=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(o=He(t,n,e))||!isFinite(o))return[];if(o>0){let e=Math.round(t/o),r=Math.round(n/o);for(e*o<t&&++e,r*o>n&&--r,a=new Array(i=r-e+1);++u<i;)a[u]=(e+u)*o}else{o=-o;let e=Math.round(t*o),r=Math.round(n*o);for(e/o<t&&++e,r/o>n&&--r,a=new Array(i=r-e+1);++u<i;)a[u]=(e+u)/o}return r&&a.reverse(),a}(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return function(t,n,e,r){var i,a=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=De?i*=10:a>=Be?i*=5:a>=Fe&&(i*=2),n<t?-i:i}(t,n,e);switch((r=Ge(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ke(n)/3)))-Ke(Math.abs(t)))}(a,o))||(r.precision=i),rr(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Ke(n)-Ke(t))+1}(a,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Ke(Math.abs(t)))}(a))||(r.precision=i-2*("%"===r.type))}return er(r)}(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i,a=n(),o=0,u=a.length-1,s=a[o],l=a[u],c=10;for(l<s&&(i=s,s=l,l=i,i=o,o=u,u=i);c-- >0;){if((i=He(s,l,e))===r)return a[o]=s,a[u]=l,n(a);if(i>0)s=Math.floor(s/i)*i,l=Math.ceil(l/i)*i;else{if(!(i<0))break;s=Math.ceil(s*i)/i,l=Math.floor(l*i)/i}r=i}return t},t}function ur(t){return Math.sign(t)*t*t}function sr(){var t,n=Ye()(qe,qe),e=[0,1],r=!1;function i(e){var i=function(t){return Math.sign(t)*Math.sqrt(Math.abs(t))}(n(e));return isNaN(i)?t:r?Math.round(i):i}return i.invert=function(t){return n.invert(ur(t))},i.domain=function(t){return arguments.length?(n.domain(t),i):n.domain()},i.range=function(t){return arguments.length?(n.range((e=Array.from(t,Ie)).map(ur)),i):e.slice()},i.rangeRound=function(t){return i.range(t).round(!0)},i.round=function(t){return arguments.length?(r=!!t,i):r},i.clamp=function(t){return arguments.length?(n.clamp(t),i):n.clamp()},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return sr(n.domain(),e).round(r).clamp(n.clamp()).unknown(t)},ke.apply(i,arguments),or(i)}function lr(t){return"string"==typeof t?new ct([[document.querySelector(t)]],[document.documentElement]):new ct([[t]],lt)}nr=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?tr:(n=ir.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,a=[],o=0,u=n[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),a.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=n[o=(o+1)%n.length];return a.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",a=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?tr:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(ir.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var n=(t=Ge(t)).fill,e=t.align,h=t.sign,f=t.symbol,p=t.zero,d=t.width,_=t.comma,y=t.precision,g=t.trim,m=t.type;"n"===m?(_=!0,m="g"):We[m]||(void 0===y&&(y=12),g=!0,m="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var v="$"===f?i:"#"===f&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===f?a:/[%p]/.test(m)?s:"",x=We[m],b=/[defgprs%]/.test(m);function M(t){var i,a,s,f=v,M=w;if("c"===m)M=x(t)+M,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),y),g&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),A&&0==+t&&"+"!==h&&(A=!1),f=(A?"("===h?h:l:"-"===h||"("===h?"":h)+f,M=("s"===m?ar[8+Ve/3]:"")+M+(A&&"("===h?")":""),b)for(i=-1,a=t.length;++i<a;)if(48>(s=t.charCodeAt(i))||s>57){M=(46===s?o+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}_&&!p&&(t=r(t,1/0));var k=f.length+t.length+M.length,N=k<d?new Array(d-k+1).join(n):"";switch(_&&p&&(t=r(N+t,N.length?d-M.length:1/0),N=""),e){case"<":t=f+t+M+N;break;case"=":t=f+N+t+M;break;case"^":t=N.slice(0,k=N.length>>1)+f+t+M+N.slice(k);break;default:t=N+f+t+M}return u(t)}return y=void 0===y?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),M.toString=function(){return t+""},M}return{format:h,formatPrefix:function(t,n){var e=h(((t=Ge(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Ke(n)/3))),i=Math.pow(10,-r),a=ar[8+r/3];return function(t){return e(i*t)+a}}}}({thousands:",",grouping:[3],currency:["$",""]}),er=nr.format,rr=nr.formatPrefix;const cr=Math.PI,hr=2*cr,fr=1e-6,pr=hr-fr;function dr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function _r(){return new dr}dr.prototype=_r.prototype={constructor:dr,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,a){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var a=this._x1,o=this._y1,u=e-t,s=r-n,l=a-t,c=o-n,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>fr)if(Math.abs(c*u-s*l)>fr&&i){var f=e-a,p=r-o,d=u*u+s*s,_=f*f+p*p,y=Math.sqrt(d),g=Math.sqrt(h),m=i*Math.tan((cr-Math.acos((d+h-_)/(2*y*g)))/2),v=m/g,w=m/y;Math.abs(v-1)>fr&&(this._+="L"+(t+v*l)+","+(n+v*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*p)+","+(this._x1=t+w*u)+","+(this._y1=n+w*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n)},arc:function(t,n,e,r,i,a){t=+t,n=+n,a=!!a;var o=(e=+e)*Math.cos(r),u=e*Math.sin(r),s=t+o,l=n+u,c=1^a,h=a?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+l:(Math.abs(this._x1-s)>fr||Math.abs(this._y1-l)>fr)&&(this._+="L"+s+","+l),e&&(h<0&&(h=h%hr+hr),h>pr?this._+="A"+e+","+e+",0,1,"+c+","+(t-o)+","+(n-u)+"A"+e+","+e+",0,1,"+c+","+(this._x1=s)+","+(this._y1=l):h>fr&&(this._+="A"+e+","+e+",0,"+ +(h>=cr)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};const yr=_r;function gr(t){return function(){return t}}var mr=Math.abs,vr=Math.atan2,wr=Math.cos,xr=Math.max,br=Math.min,Mr=Math.sin,Ar=Math.sqrt,kr=1e-12,Nr=Math.PI,Sr=Nr/2,Er=2*Nr;function $r(t){return t>=1?Sr:t<=-1?-Sr:Math.asin(t)}function Pr(t){return t.innerRadius}function Tr(t){return t.outerRadius}function Rr(t){return t.startAngle}function zr(t){return t.endAngle}function Cr(t){return t&&t.padAngle}function Ir(t,n,e,r,i,a,o){var u=t-e,s=n-r,l=(o?a:-a)/Ar(u*u+s*s),c=l*s,h=-l*u,f=t+c,p=n+h,d=e+c,_=r+h,y=(f+d)/2,g=(p+_)/2,m=d-f,v=_-p,w=m*m+v*v,x=i-a,b=f*_-d*p,M=(v<0?-1:1)*Ar(xr(0,x*x*w-b*b)),A=(b*v-m*M)/w,k=(-b*m-v*M)/w,N=(b*v+m*M)/w,S=(-b*m+v*M)/w,E=A-y,$=k-g,P=N-y,T=S-g;return E*E+$*$>P*P+T*T&&(A=N,k=S),{cx:A,cy:k,x01:-c,y01:-h,x11:A*(i/x-1),y11:k*(i/x-1)}}function Xr(){var t=Pr,n=Tr,e=gr(0),r=null,i=Rr,a=zr,o=Cr,u=null;function s(){var s,l,c,h=+t.apply(this,arguments),f=+n.apply(this,arguments),p=i.apply(this,arguments)-Sr,d=a.apply(this,arguments)-Sr,_=mr(d-p),y=d>p;if(u||(u=s=yr()),f<h&&(l=f,f=h,h=l),f>kr)if(_>Er-kr)u.moveTo(f*wr(p),f*Mr(p)),u.arc(0,0,f,p,d,!y),h>kr&&(u.moveTo(h*wr(d),h*Mr(d)),u.arc(0,0,h,d,p,y));else{var g,m,v=p,w=d,x=p,b=d,M=_,A=_,k=o.apply(this,arguments)/2,N=k>kr&&(r?+r.apply(this,arguments):Ar(h*h+f*f)),S=br(mr(f-h)/2,+e.apply(this,arguments)),E=S,$=S;if(N>kr){var P=$r(N/h*Mr(k)),T=$r(N/f*Mr(k));(M-=2*P)>kr?(x+=P*=y?1:-1,b-=P):(M=0,x=b=(p+d)/2),(A-=2*T)>kr?(v+=T*=y?1:-1,w-=T):(A=0,v=w=(p+d)/2)}var R=f*wr(v),z=f*Mr(v),C=h*wr(b),I=h*Mr(b);if(S>kr){var X,q=f*wr(w),L=f*Mr(w),O=h*wr(x),j=h*Mr(x);if(_<Nr&&(X=function(t,n,e,r,i,a,o,u){var s=e-t,l=r-n,c=o-i,h=u-a,f=h*s-c*l;if(!(f*f<kr))return[t+(f=(c*(n-a)-h*(t-i))/f)*s,n+f*l]}(R,z,O,j,q,L,C,I))){var Y=R-X[0],D=z-X[1],B=q-X[0],F=L-X[1],H=1/Mr(((c=(Y*B+D*F)/(Ar(Y*Y+D*D)*Ar(B*B+F*F)))>1?0:c<-1?Nr:Math.acos(c))/2),V=Ar(X[0]*X[0]+X[1]*X[1]);E=br(S,(h-V)/(H-1)),$=br(S,(f-V)/(H+1))}}A>kr?$>kr?(g=Ir(O,j,R,z,f,$,y),m=Ir(q,L,C,I,f,$,y),u.moveTo(g.cx+g.x01,g.cy+g.y01),$<S?u.arc(g.cx,g.cy,$,vr(g.y01,g.x01),vr(m.y01,m.x01),!y):(u.arc(g.cx,g.cy,$,vr(g.y01,g.x01),vr(g.y11,g.x11),!y),u.arc(0,0,f,vr(g.cy+g.y11,g.cx+g.x11),vr(m.cy+m.y11,m.cx+m.x11),!y),u.arc(m.cx,m.cy,$,vr(m.y11,m.x11),vr(m.y01,m.x01),!y))):(u.moveTo(R,z),u.arc(0,0,f,v,w,!y)):u.moveTo(R,z),h>kr&&M>kr?E>kr?(g=Ir(C,I,q,L,h,-E,y),m=Ir(R,z,O,j,h,-E,y),u.lineTo(g.cx+g.x01,g.cy+g.y01),E<S?u.arc(g.cx,g.cy,E,vr(g.y01,g.x01),vr(m.y01,m.x01),!y):(u.arc(g.cx,g.cy,E,vr(g.y01,g.x01),vr(g.y11,g.x11),!y),u.arc(0,0,h,vr(g.cy+g.y11,g.cx+g.x11),vr(m.cy+m.y11,m.cx+m.x11),y),u.arc(m.cx,m.cy,E,vr(m.y11,m.x11),vr(m.y01,m.x01),!y))):u.arc(0,0,h,b,x,y):u.lineTo(C,I)}else u.moveTo(0,0);if(u.closePath(),s)return u=null,s+""||null}return s.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +a.apply(this,arguments))/2-Nr/2;return[wr(r)*e,Mr(r)*e]},s.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:gr(+n),s):t},s.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:gr(+t),s):n},s.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:gr(+t),s):e},s.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:gr(+t),s):r},s.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:gr(+t),s):i},s.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:gr(+t),s):a},s.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:gr(+t),s):o},s.context=function(t){return arguments.length?(u=null==t?null:t,s):u},s}function qr(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function Lr(t){return t}function Or(){var t=Lr,n=qr,e=null,r=gr(0),i=gr(Er),a=gr(0);function o(o){var u,s,l,c,h,f,p=(f=o,o="object"==typeof f&&"length"in f?f:Array.from(f)).length,d=0,_=new Array(p),y=new Array(p),g=+r.apply(this,arguments),m=Math.min(Er,Math.max(-Er,i.apply(this,arguments)-g)),v=Math.min(Math.abs(m)/p,a.apply(this,arguments)),w=v*(m<0?-1:1);for(u=0;u<p;++u)(h=y[_[u]=u]=+t(o[u],u,o))>0&&(d+=h);for(null!=n?_.sort((function(t,e){return n(y[t],y[e])})):null!=e&&_.sort((function(t,n){return e(o[t],o[n])})),u=0,l=d?(m-p*w)/d:0;u<p;++u,g=c)s=_[u],c=g+((h=y[s])>0?h*l:0)+w,y[s]={data:o[s],index:u,value:h,startAngle:g,endAngle:c,padAngle:v};return y}return o.value=function(n){return arguments.length?(t="function"==typeof n?n:gr(+n),o):t},o.sortValues=function(t){return arguments.length?(n=t,e=null,o):n},o.sort=function(t){return arguments.length?(e=t,n=null,o):e},o.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:gr(+t),o):r},o.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:gr(+t),o):i},o.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:gr(+t),o):a},o}function jr(t,n,e){this.k=t,this.x=n,this.y=e}Array.prototype.slice,jr.prototype={constructor:jr,scale:function(t){return 1===t?this:new jr(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new jr(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new jr(1,0,0),jr.prototype;const Yr="data/data.json",Dr=720,Br=720,Fr=Math.min(Dr,Br)/2,Hr=lr("#chart-area").append("svg").attr("width",720).attr("height",720).append("g").attr("transform","translate(360, 360)"),Vr=lr("#chart-area").append("div").attr("class","tooltip").style("opacity",0).style("background-color","white").style("border","solid").style("border-width","2px").style("border-radius","5px").style("padding","5px").style("width","300px").style("position","absolute");let Ur,Gr,Zr,Jr,Kr,Qr,Wr,ti,ni,ei=(t,n)=>{Vr.transition().duration(300).style("display",null).style("opacity",.9).style("font","12px sans-serif"),lr(t.currentTarget).style("stroke-width","3px")},ri=(t,n)=>{Vr.transition().duration(100).style("display","none"),lr(t.currentTarget).style("stroke-width","1px")};class ii{constructor({_perspective:t,_data_raw:n,_boundary_fill:e,_font_fill:r,_font_size:i,_font_family:a,_letter_spacing:o}){this.perspective=t,this.data_raw=n,this.boundary_fill=e,this.font_fill=r,this.font_size=i,this.font_family=a,this.letter_spacing=o,this.init_vis()}init_vis(){const t=this;var n;t.tooltip_offset_event_pageX=0,t.tooltip_translateX=-50,t.tooltip_offset_event_pageY=-385,"inside"==t.perspective?(t.data=t.data_raw[0],t.text=t.data.name,t.description=t.data.description,t.inner_radius=182,t.outer_radius=202):"middle"==t.perspective?(t.data=t.data_raw[1],t.text=t.data.name,t.description=t.data.description,t.inner_radius=202,t.outer_radius=258):"outside"==t.perspective&&(t.data=t.data_raw[2],t.text=t.data.name,t.description=t.data.description,t.inner_radius=258,t.outer_radius=278),t.mousemove=function(n,e){Vr.style("left","50%").style("transform",`translateX(${t.tooltip_translateX}%)`).style("top",n.pageY+t.tooltip_offset_event_pageY+"px").html(`${t.description}`)},t.middle_radius=(t.inner_radius+t.outer_radius)/2,t.startAngle=90*Math.PI/180,t.endAngle=90*Math.PI/180+2*Math.PI,t.text=t.text.trim().toLowerCase(),t.text_for_id=t.text.replace(/\s+/g,""),t.arc_shape=Xr().innerRadius(t.inner_radius).outerRadius(t.outer_radius).startAngle(t.startAngle).endAngle(t.endAngle),t.arc_text=Xr().innerRadius(t.middle_radius).outerRadius(t.middle_radius).startAngle(t.startAngle).endAngle(t.endAngle),t.g=Hr.append("g").attr("class",`boundary_${t.perspective}`),t.g.append("defs").append("path").attr("id",`arc_boundary_${t.text_for_id}_text`).attr("d",(n=t.arc_text(1)).replace(/(M.*A.*)(A.*Z)/,(function(t,e){return e||n}))),t.g.append("path").attr("id",`arc_boundary_${t.text_for_id}_shape`).attr("d",t.arc_shape(1)).attr("fill",t.boundary_fill).style("stroke","yellow").style("stroke-width","1px").on("mouseover",ei).on("mousemove",t.mousemove).on("mouseleave",ri),t.g.append("clipPath").attr("id",`arc_boundary_${t.text_for_id}_text_clip`).append("use").attr("xlink:href",`#arc_boundary_${t.text_for_id}_shape`),t.g.append("text").attr("dy",4).attr("clip-path",`url(#arc_boundary_${t.text_for_id}_text_clip)`).append("textPath").attr("xlink:href",`#arc_boundary_${t.text_for_id}_text`).attr("startOffset","50%").style("text-anchor","middle").style("fill",t.font_fill).style("font-size",`${t.font_size}px`).style("font-family",t.font_family).style("letter-spacing",`${t.letter_spacing}px`).text(t.text)}}class ai{constructor({_perspective:t,_data_raw:n,_data_inside_array:e}){this.perspective=t,this.data_raw=n,this.data_inside_array=e,this.init_vis()}init_vis(){const t=this;t.tooltip_offset_event_pageX=0,t.tooltip_translateX=-50,t.tooltip_offset_event_pageY=-385,"inside"==t.perspective?(t.radius_inner=180,t.radius_outer=0,t.radius_gradient=t.radius_inner,t.color_bar_0="#FAA0A0",t.color_bar_100="white",t.offset_0=80,t.color_stroke="#FA8072",t.domain_y_min=5,t.domain_y_max=100):"outside"==t.perspective&&(t.radius_inner=280,t.radius_outer=Fr,t.radius_gradient=t.radius_outer,t.color_bar_0="white",t.color_bar_100="#FAA0A0",t.offset_0=70,t.color_stroke="#FA8072",t.domain_y_min=.25,t.domain_y_max=4),t.x_scale=Ee().range([0,2*Math.PI]).align(0),t.y_scale=sr().range([t.radius_inner,t.radius_outer]).domain([0,t.domain_y_max]),t.arc=Xr().innerRadius(t.radius_inner).padRadius(t.radius_inner),t.pie=Or().padAngle(.01).sort(null),t.g=Hr.append("g").attr("class",`bar_${t.perspective}`),t.defs=t.g.append("svg:defs"),t.radial_gradient=t.defs.append("radialGradient").attr("gradientUnits","userSpaceOnUse").attr("cx","50%").attr("cy","50%").attr("r",t.radius_gradient).attr("gradientTransform","translate(-360, -360)").attr("id",`bar_${t.perspective}_id`),t.radial_gradient.append("stop").attr("offset",`${t.offset_0}%`).style("stop-color",t.color_bar_0),t.radial_gradient.append("stop").attr("offset","100%").style("stop-color",t.color_bar_100),t.wrangle_data()}wrangle_data(){const t=this;t.selected_option=$("#country-dropdown").val(),t.selected_option_text=$("#country-dropdown option:selected").text(),t.country_id_index=t.data_inside_array.indexOf(t.selected_option),"inside"==t.perspective?(t.data=t.data_raw[0].data[t.country_id_index].metric,t.mousemove=function(n,e){Vr.style("left","50%").style("transform",`translateX(${t.tooltip_translateX}%)`).style("top",n.pageY+t.tooltip_offset_event_pageY+"px").html(`\n                        <strong>${e.data.metric_category} - ${e.data.metric_name}</strong>\n                        <br><i><sub>${t.selected_option_text}</sub></i>\n\n                        <br><br>${e.data.metric_description}\n                        <br><br>Dépassement par rapport au plancher: <b>${oi(e.data.metric_value_display)}%</b>\n                        <br><br>Plancher social : ${oi(e.data.metric_value_ideal)}\n                        <br><br><u>Source</u>\n                        <br>Valeur actuelle: ${oi(e.data.metric_value_current)}\n                        <br>Année: ${e.data.metric_year}\n                        <br>Source: ${e.data.metric_source}\n                        \n                    `)}):"outside"==t.perspective&&(t.data=t.data_raw[2].data[t.country_id_index].metric,t.mousemove=function(n,e){Vr.style("left","50%").style("transform",`translateX(${t.tooltip_translateX}%)`).style("top",n.pageY+t.tooltip_offset_event_pageY+"px").html(`\n                        <strong>${e.data.metric_name}</strong>\n                        <br><i><sub>${t.selected_option_text}</sub></i>\n\n                        <br><br>${e.data.metric_description}\n                        <br><br>Valeur actuelle:<b> ${oi(e.data.metric_value_current)}%</b>\n                        \n                        <br><br><u>Source</u>\n            \n                        <br>Year: ${e.data.metric_year}\n                        <br>Credit: ${e.data.metric_source}\n                        \n                    `)}),t.x_scale.domain(t.data.map((t=>t.metric_name))),t.update_vis()}update_vis(){const t=this;t.transition_duration=ce().duration(1e3),t.bar=t.g.selectAll(`path.bar_${t.perspective}_path`).data(t.pie(t.data)),t.bar.enter().append("path").attr("class",`bar_${t.perspective}_path`).attr("d",t.arc.startAngle((n=>t.x_scale(n.data.metric_name))).endAngle((n=>t.x_scale(n.data.metric_name)+t.x_scale.bandwidth())).outerRadius((function(n){let e=n.data.metric_value_display;return n.data.metric_value_display>t.domain_y_max?e=t.domain_y_max:null===n.data.metric_value_display?e=0:n.data.metric_value_display<=t.domain_y_min&&(e=t.domain_y_min),t.y_scale(e)}))).style("fill",`url(#bar_${t.perspective}_id)`).style("stroke",t.color_stroke).style("stroke-width","1px").on("mouseover",ei).on("mousemove",t.mousemove).on("mouseleave",ri),t.bar.exit().transition(t.transition_duration).attrTween("d",t.arc_tween).remove(),t.bar.transition(t.transition_duration).attrTween("d",t.arc_tween),t.arc_tween=n=>{const e=Ae(this._current,n);return this._current=e(1),n=>t.arc(e(n))}}}function oi(t){let n;return n=null!==t?t.toFixed(2):t,n}class ui{constructor({_data_raw:t,_font_fill:n,_font_size:e,_font_family:r,_letter_spacing:i}){this.data_raw=t,this.font_fill=n,this.font_size=e,this.font_family=r,this.letter_spacing=i,this.init_vis()}init_vis(){const t=this;t.padding=20,t.arc=Xr().innerRadius(180-t.padding).outerRadius(180),t.pie=Or().startAngle(0).endAngle(2*Math.PI).value((function(t){return 3})).padAngle(.01).sort(null),t.g=Hr.append("g").attr("class","label_inside"),t.wrangle_data()}wrangle_data(){const t=this;t.data=t.data_raw[0].data[0].metric,t.update_vis()}update_vis(){const t=this;t.g.selectAll(".arc_inside").data(t.pie(t.data)).enter(),t.pie(t.data).forEach((function(n,e){[t.x,t.y]=t.arc.centroid(n);let r=n.data.metric_name.trim().toLowerCase(),i=n.endAngle,a=i<=Math.PI?180*(n.startAngle/2+n.endAngle/2)/Math.PI:180*(n.startAngle/2+n.endAngle/2+Math.PI)/Math.PI,o=i<=Math.PI?"end":"start",u="translate("+[t.x,t.y]+") rotate(-90) rotate("+a+")";t.g.append("text").attr("text-anchor",o).attr("transform",u).style("z-index","1").style("font-size",`${t.font_size}px`).style("font-family",t.font_family).style("fill",t.font_fill).style("letter-spacing",`${t.letter_spacing}px`).text(r)}))}}class si{constructor({_data_raw:t,_font_fill:n,_font_size:e,_font_family:r,_letter_spacing:i}){this.data_raw=t,this.font_fill=n,this.font_size=e,this.font_family=r,this.letter_spacing=i,this.init_vis()}init_vis(){const t=this;t.arc=Xr().innerRadius(182).outerRadius(278),t.pie=Or().startAngle(0).endAngle(2*Math.PI).value((function(t){return 3})).padAngle(.01).sort(null),t.g=Hr.append("g").attr("class","label_outside"),t.wrangle_data()}wrangle_data(){const t=this;t.data=t.data_raw[2].data[0].metric,t.update_vis()}update_vis(){const t=this;t.reviseArc=function(n,e){t.firstArcSection=/(^.+?)L/,t.thisSection=lr(this).attr("d"),t.newArc=t.firstArcSection.exec(t.thisSection)[1],t.newArc=t.newArc.replace(/,/g," "),n.endAngle>.75*Math.PI&&n.endAngle<1.5*Math.PI&&(t.locStart=/M(.*?)A/,t.locMiddle=/A(.*?)0 0 1/,t.locEnd=/0 0 1 (.*?)$/,t.newStart=t.locEnd.exec(t.newArc)[1],t.newEnd=t.locStart.exec(t.newArc)[1],t.middleSec=t.locMiddle.exec(t.newArc)[1],t.newArc="M"+t.newStart+"A"+t.middleSec+"0 0 0 "+t.newEnd),t.g.append("path").attr("class","hiddenDonutArcs").attr("id","donutArc"+e).attr("d",t.newArc).style("fill","none")},t.g.selectAll(".donutArcSlices").data(t.pie(t.data)).enter().append("path").attr("class","donutArcSlices").attr("d",t.arc).attr("fill","none").each(t.reviseArc),t.g.selectAll(".donutText").data(t.pie(t.data)).enter().append("text").attr("class","donutText").style("fill","black").attr("dy",(function(t,n){return t.endAngle>.75*Math.PI&&t.endAngle<1.5*Math.PI?25:-18})).append("textPath").attr("startOffset","50%").style("z-index","1").style("text-anchor","middle").attr("xlink:href",(function(t,n){return"#donutArc"+n})).style("font-size",`${t.font_size}px`).style("font-family",t.font_family).style("fill",t.font_fill).style("letter-spacing",`${t.letter_spacing}px`).text((function(t){return t.data.metric_name.toLowerCase()}))}}var li;!function(t,n){let e=document.getElementById("country-dropdown"),r=document.createElement("option");r.text="Choisissez votre année",r.disabled=!0,e.add(r);const i=new XMLHttpRequest;i.open("GET",n,!0),i.onload=function(){if(200===i.status){const t=JSON.parse(i.responseText)[0].data;let n;for(let r=0;r<t.length;r++){let i=t[r].country_name,a=t[r].country_id;n=document.createElement("option"),n.text=i,n.value=a,"ALB"==a&&(n.selected=!0),e.add(n)}}},i.onerror=function(){console.error("An error occurred fetching the JSON from "+n)},i.send()}(0,Yr),(li=Yr,fetch(li,void 0).then(ve)).then((t=>{Ur=t,Gr=Ur[0].data.map((t=>t.country_id)),Zr=new ai({_perspective:"inside",_data_raw:Ur,_data_inside_array:Gr}),Jr=new ai({_perspective:"outside",_data_raw:Ur,_data_inside_array:Gr}),Kr=new ui({_data_raw:Ur,_font_fill:"#008080",_font_size:13,_font_family:"Gill Sans",_letter_spacing:0}),Qr=new si({_data_raw:Ur,_font_fill:"#008080",_font_size:15,_font_family:"Optima",_letter_spacing:0}),Wr=new ii({_perspective:"inside",_data_raw:Ur,_boundary_fill:"#017241",_font_fill:"white",_font_size:12,_font_family:"Lucida Console",_letter_spacing:1}),ti=new ii({_perspective:"middle",_data_raw:Ur,_boundary_fill:"#6FB646",_font_fill:"white",_font_size:25,_font_family:"Bradley Hand",_letter_spacing:4}),ni=new ii({_perspective:"outside",_data_raw:Ur,_boundary_fill:"#017241",_font_fill:"white",_font_size:12,_font_family:"Lucida Console",_letter_spacing:1})})),$("#country-dropdown").on("change",(function(){Zr.wrangle_data(),Jr.wrangle_data()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RVhmLEdBQW9CRCxHQUFTLEdBQVMsS0FBRXBzQixLQUFLaUYsR0FBV0EsRUFBRXN1QixhQUUxRGpILEdBQXNCLElBQUkyQyxHQUFZLENBQ3BDOUIsYUFBYyxTQUNkQyxVQUFXaEIsR0FDWDhDLG1CQUFvQjdDLEtBR3RCRSxHQUF1QixJQUFJMEMsR0FBWSxDQUNyQzlCLGFBQWMsVUFDZEMsVUFBV2hCLEdBQ1g4QyxtQkFBb0I3QyxLQUd0QkcsR0FBZSxJQUFJZ0YsR0FBWSxDQUM3QnBFLFVBQVdoQixHQUNYa0IsV0FBWSxVQUNaQyxXQUFZLEdBQ1pDLGFBQWMsWUFDZEMsZ0JBQWlCLElBR25CaEIsR0FBZ0IsSUFBSXFGLEdBQWEsQ0FDL0IxRSxVQUFXaEIsR0FDWGtCLFdBQVksVUFDWkMsV0FBWSxHQUNaQyxhQUFjLFNBQ2RDLGdCQUFpQixJQUluQmYsR0FBa0IsSUFBSVEsR0FBUyxDQUM3QkMsYUFBYyxTQUNkQyxVQUFXaEIsR0FDWGlCLGVBQWdCLFVBQ2hCQyxXQUFZLFFBQ1pDLFdBQVksR0FDWkMsYUFBYyxpQkFDZEMsZ0JBQWlCLElBR25CZCxHQUFrQixJQUFJTyxHQUFTLENBQzdCQyxhQUFjLFNBQ2RDLFVBQVdoQixHQUNYaUIsZUFBZ0IsVUFDaEJDLFdBQVksUUFDWkMsV0FBWSxHQUNaQyxhQUFjLGVBQ2RDLGdCQUFpQixJQUduQmIsR0FBbUIsSUFBSU0sR0FBUyxDQUM5QkMsYUFBYyxVQUNkQyxVQUFXaEIsR0FDWGlCLGVBQWdCLFVBQ2hCQyxXQUFZLFFBQ1pDLFdBQVksR0FDWkMsYUFBYyxpQkFDZEMsZ0JBQWlCLEdBQ2pCLElBS0p5QyxFQUFFLHFCQUFxQjN6QixHQUFHLFVBQzFCLFdBRUUrdkIsR0FBb0IwRCxlQUNwQnpELEdBQXFCeUQsY0FFdkIsRyIsInNvdXJjZXMiOlsid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yQWxsLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RDaGlsZC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zcGFyc2UuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zb3J0LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZS5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRvci5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbnNlcnQuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmVtb3ZlLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Nsb25lLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29uLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Rpc3BhdGNoLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZmlsdGVyLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9qb2luLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29yZGVyLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZS5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zaXplLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VhY2guanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVvdXQuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vcGFyc2UuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2NvbG9yLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yZ2IuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbnRlcnBvbGF0ZS5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyVHdlZW4uanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kZWxheS5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0aW9uLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL29uLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0VHdlZW4uanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZVZhcnlpbmcuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lbmQuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvY3ViaWMuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvaW50ZXJydXB0LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9icnVzaC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvanNvbi5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2RhdGUuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9pbml0LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9vcmRpbmFsLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9iYW5kLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9yYW5nZS5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JvdW5kLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnRpbnVvdXMuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZXhwb25lbnQuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xpbmVhci5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblByZWZpeC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblJvdW5kLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3JhZGlhbC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdEdyb3VwLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0TnVtZXJhbHMuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRUcmltLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXBhdGgvc3JjL3BhdGguanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9tYXRoLmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmMuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2Rlc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9waWUuanMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2FycmF5LmpzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL3NyYy9jb25maWcudHMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9zcmMvbWFpbi50cyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL3NyYy9jdXN0b21fYm91bmRhcnkudHMiLCJ3ZWJwYWNrOi8vZG91Z2hudXRfY2hhcnQvLi9zcmMvY3VzdG9tX2NpcmN1bGFyX2Jhci50cyIsIndlYnBhY2s6Ly9kb3VnaG51dF9jaGFydC8uL3NyYy9jdXN0b21fbGFiZWxfaW5zaWRlLnRzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vc3JjL2N1c3RvbV9sYWJlbF9vdXRzaWRlLnRzIiwid2VicGFjazovL2RvdWdobnV0X2NoYXJ0Ly4vc3JjL2N1c3RvbV9kcm9wZG93bi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBub25lKCkge31cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBub25lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJiBcImxlbmd0aFwiIGluIHhcbiAgICA/IHggLy8gQXJyYXksIFR5cGVkQXJyYXksIE5vZGVMaXN0LCBhcnJheS1saWtlXG4gICAgOiBBcnJheS5mcm9tKHgpOyAvLyBNYXAsIFNldCwgaXRlcmFibGUsIHN0cmluZywgb3IgYW55dGhpbmcgZWxzZVxufVxuIiwiZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hpbGRNYXRjaGVyKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59XG5cbiIsImltcG9ydCB7Y2hpbGRNYXRjaGVyfSBmcm9tIFwiLi4vbWF0Y2hlci5qc1wiO1xuXG52YXIgZmluZCA9IEFycmF5LnByb3RvdHlwZS5maW5kO1xuXG5mdW5jdGlvbiBjaGlsZEZpbmQobWF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmaW5kLmNhbGwodGhpcy5jaGlsZHJlbiwgbWF0Y2gpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjaGlsZEZpcnN0KCkge1xuICByZXR1cm4gdGhpcy5maXJzdEVsZW1lbnRDaGlsZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KG1hdGNoID09IG51bGwgPyBjaGlsZEZpcnN0XG4gICAgICA6IGNoaWxkRmluZCh0eXBlb2YgbWF0Y2ggPT09IFwiZnVuY3Rpb25cIiA/IG1hdGNoIDogY2hpbGRNYXRjaGVyKG1hdGNoKSkpO1xufVxuIiwiaW1wb3J0IHtjaGlsZE1hdGNoZXJ9IGZyb20gXCIuLi9tYXRjaGVyLmpzXCI7XG5cbnZhciBmaWx0ZXIgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyO1xuXG5mdW5jdGlvbiBjaGlsZHJlbigpIHtcbiAgcmV0dXJuIHRoaXMuY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuRmlsdGVyKG1hdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwodGhpcy5jaGlsZHJlbiwgbWF0Y2gpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3RBbGwobWF0Y2ggPT0gbnVsbCA/IGNoaWxkcmVuXG4gICAgICA6IGNoaWxkcmVuRmlsdGVyKHR5cGVvZiBtYXRjaCA9PT0gXCJmdW5jdGlvblwiID8gbWF0Y2ggOiBjaGlsZE1hdGNoZXIobWF0Y2gpKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih1cGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlLmpzXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgdGhpcy5uYW1lc3BhY2VVUkkgPSBwYXJlbnQubmFtZXNwYWNlVVJJO1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9fZGF0YV9fID0gZGF0dW07XG59XG5cbkVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBFbnRlck5vZGUsXG4gIGFwcGVuZENoaWxkOiBmdW5jdGlvbihjaGlsZCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgdGhpcy5fbmV4dCk7IH0sXG4gIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9LFxuICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOyB9XG59O1xuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXIuanNcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi4vYXJyYXkuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSBuZXcgTWFwLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSArIFwiXCI7XG4gICAgICBpZiAobm9kZUJ5S2V5VmFsdWUuaGFzKGtleVZhbHVlKSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlLnNldChrZXlWYWx1ZSwgbm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSkgKyBcIlwiO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlKSkge1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgbm9kZUJ5S2V5VmFsdWUuZGVsZXRlKGtleVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGFueSByZW1haW5pbmcgbm9kZXMgdGhhdCB3ZXJlIG5vdCBib3VuZCB0byBkYXRhIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWVzW2ldKSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkYXR1bShub2RlKSB7XG4gIHJldHVybiBub2RlLl9fZGF0YV9fO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIEFycmF5LmZyb20odGhpcywgZGF0dW0pO1xuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IGFycmF5KHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSksXG4gICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZW50ZXJHcm91cCA9IGVudGVyW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICB1cGRhdGVHcm91cCA9IHVwZGF0ZVtqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgZXhpdEdyb3VwID0gZXhpdFtqXSA9IG5ldyBBcnJheShncm91cExlbmd0aCk7XG5cbiAgICBiaW5kKHBhcmVudCwgZ3JvdXAsIGVudGVyR3JvdXAsIHVwZGF0ZUdyb3VwLCBleGl0R3JvdXAsIGRhdGEsIGtleSk7XG5cbiAgICAvLyBOb3cgY29ubmVjdCB0aGUgZW50ZXIgbm9kZXMgdG8gdGhlaXIgZm9sbG93aW5nIHVwZGF0ZSBub2RlLCBzdWNoIHRoYXRcbiAgICAvLyBhcHBlbmRDaGlsZCBjYW4gaW5zZXJ0IHRoZSBtYXRlcmlhbGl6ZWQgZW50ZXIgbm9kZSBiZWZvcmUgdGhpcyBub2RlLFxuICAgIC8vIHJhdGhlciB0aGFuIGF0IHRoZSBlbmQgb2YgdGhlIHBhcmVudCBub2RlLlxuICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAwLCBwcmV2aW91cywgbmV4dDsgaTAgPCBkYXRhTGVuZ3RoOyArK2kwKSB7XG4gICAgICBpZiAocHJldmlvdXMgPSBlbnRlckdyb3VwW2kwXSkge1xuICAgICAgICBpZiAoaTAgPj0gaTEpIGkxID0gaTAgKyAxO1xuICAgICAgICB3aGlsZSAoIShuZXh0ID0gdXBkYXRlR3JvdXBbaTFdKSAmJiArK2kxIDwgZGF0YUxlbmd0aCk7XG4gICAgICAgIHByZXZpb3VzLl9uZXh0ID0gbmV4dCB8fCBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSA9IG5ldyBTZWxlY3Rpb24odXBkYXRlLCBwYXJlbnRzKTtcbiAgdXBkYXRlLl9lbnRlciA9IGVudGVyO1xuICB1cGRhdGUuX2V4aXQgPSBleGl0O1xuICByZXR1cm4gdXBkYXRlO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKCFjb21wYXJlKSBjb21wYXJlID0gYXNjZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGNvbXBhcmVOb2RlKGEsIGIpIHtcbiAgICByZXR1cm4gYSAmJiBiID8gY29tcGFyZShhLl9fZGF0YV9fLCBiLl9fZGF0YV9fKSA6ICFhIC0gIWI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzb3J0Z3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzb3J0Z3JvdXAgPSBzb3J0Z3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzb3J0Z3JvdXBbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3J0Z3JvdXAuc29ydChjb21wYXJlTm9kZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzb3J0Z3JvdXBzLCB0aGlzLl9wYXJlbnRzKS5vcmRlcigpO1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuLi9uYW1lc3BhY2UuanNcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpXG4gICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbilcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKSkoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIHJldHVybiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgLy8gbm9kZSBpcyBhIE5vZGVcbiAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICAgIHx8IG5vZGUuZGVmYXVsdFZpZXc7IC8vIG5vZGUgaXMgYSBEb2N1bWVudFxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3cuanNcIjtcblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2LCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICA/IHN0eWxlUmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvblxuICAgICAgICAgICAgOiBzdHlsZUNvbnN0YW50KShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpXG4gICAgICA6IHN0eWxlVmFsdWUodGhpcy5ub2RlKCksIG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVWYWx1ZShub2RlLCBuYW1lKSB7XG4gIHJldHVybiBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSlcbiAgICAgIHx8IGRlZmF1bHRWaWV3KG5vZGUpLmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBwcm9wZXJ0eVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpW25hbWVdO1xufVxuIiwiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xufVxuIiwiZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh0bWxGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG59XG4iLCJmdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmFpc2UpO1xufVxuIiwiZnVuY3Rpb24gbG93ZXIoKSB7XG4gIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4vbmFtZXNwYWNlLmpzXCI7XG5pbXBvcnQge3hodG1sfSBmcm9tIFwiLi9uYW1lc3BhY2VzLmpzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgcmV0dXJuIHVyaSA9PT0geGh0bWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0geGh0bWxcbiAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3JGaXhlZChmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiAoZnVsbG5hbWUubG9jYWxcbiAgICAgID8gY3JlYXRvckZpeGVkXG4gICAgICA6IGNyZWF0b3JJbmhlcml0KShmdWxsbmFtZSk7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvci5qc1wiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3Rvci5qc1wiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZShmYWxzZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKHRydWUpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwiZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQsIHRoaXMuX19kYXRhX18pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblJlbW92ZSh0eXBlbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgIGlmICghb24pIHJldHVybjtcbiAgICBmb3IgKHZhciBqID0gMCwgaSA9IC0xLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5vcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb24sIG8sIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKHZhbHVlKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5vcHRpb25zKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLm9wdGlvbnMgPSBvcHRpb25zKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgb3B0aW9uczogb3B0aW9uc307XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgb3B0aW9ucykpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdENoaWxkIGZyb20gXCIuL3NlbGVjdENoaWxkLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdENoaWxkcmVuIGZyb20gXCIuL3NlbGVjdENoaWxkcmVuLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9qb2luIGZyb20gXCIuL2pvaW4uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlcy5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHkuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWwuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2UuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW0uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb24uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2guanNcIjtcbmltcG9ydCBzZWxlY3Rpb25faXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3IuanNcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0aW9uKCkge1xuICByZXR1cm4gdGhpcztcbn1cblxuU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZWxlY3Rpb24sXG4gIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICBzZWxlY3RDaGlsZDogc2VsZWN0aW9uX3NlbGVjdENoaWxkLFxuICBzZWxlY3RDaGlsZHJlbjogc2VsZWN0aW9uX3NlbGVjdENoaWxkcmVuLFxuICBmaWx0ZXI6IHNlbGVjdGlvbl9maWx0ZXIsXG4gIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxuICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICBleGl0OiBzZWxlY3Rpb25fZXhpdCxcbiAgam9pbjogc2VsZWN0aW9uX2pvaW4sXG4gIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogc2VsZWN0aW9uX3NlbGVjdGlvbixcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaCxcbiAgW1N5bWJvbC5pdGVyYXRvcl06IHNlbGVjdGlvbl9pdGVyYXRvclxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgYXJyYXkgZnJvbSBcIi4uL2FycmF5LmpzXCI7XG5pbXBvcnQgc2VsZWN0b3JBbGwgZnJvbSBcIi4uL3NlbGVjdG9yQWxsLmpzXCI7XG5cbmZ1bmN0aW9uIGFycmF5QWxsKHNlbGVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdyb3VwID0gc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGdyb3VwID09IG51bGwgPyBbXSA6IGFycmF5KGdyb3VwKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ID09PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IGFycmF5QWxsKHNlbGVjdCk7XG4gIGVsc2Ugc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlLmpzXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9uZW50ZXIsIG9udXBkYXRlLCBvbmV4aXQpIHtcbiAgdmFyIGVudGVyID0gdGhpcy5lbnRlcigpLCB1cGRhdGUgPSB0aGlzLCBleGl0ID0gdGhpcy5leGl0KCk7XG4gIGVudGVyID0gdHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIiA/IG9uZW50ZXIoZW50ZXIpIDogZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgaWYgKG9udXBkYXRlICE9IG51bGwpIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG4gIGlmICghKHNlbGVjdGlvbiBpbnN0YW5jZW9mIFNlbGVjdGlvbikpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgbWVyZ2VcIik7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuZXh0KSBeIDQpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20odGhpcyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBsZXQgc2l6ZSA9IDA7XG4gIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzKSArK3NpemU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiooKSB7XG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB5aWVsZCBub2RlO1xuICAgIH1cbiAgfVxufVxuIiwidmFyIG5vb3AgPSB7dmFsdWU6ICgpID0+IHt9fTtcblxuZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IHt9LCB0OyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCEodCA9IGFyZ3VtZW50c1tpXSArIFwiXCIpIHx8ICh0IGluIF8pIHx8IC9bXFxzLl0vLnRlc3QodCkpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGVsYXBzZWQgPT4ge1xuICAgIHQuc3RvcCgpO1xuICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXIsIHRpbWVvdXR9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJjYW5jZWxcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG5leHBvcnQgdmFyIENSRUFURUQgPSAwO1xuZXhwb3J0IHZhciBTQ0hFRFVMRUQgPSAxO1xuZXhwb3J0IHZhciBTVEFSVElORyA9IDI7XG5leHBvcnQgdmFyIFNUQVJURUQgPSAzO1xuZXhwb3J0IHZhciBSVU5OSU5HID0gNDtcbmV4cG9ydCB2YXIgRU5ESU5HID0gNTtcbmV4cG9ydCB2YXIgRU5ERUQgPSA2O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlcykgbm9kZS5fX3RyYW5zaXRpb24gPSB7fTtcbiAgZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XG4gIGNyZWF0ZShub2RlLCBpZCwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgb246IGVtcHR5T24sXG4gICAgdHdlZW46IGVtcHR5VHdlZW4sXG4gICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgZGVsYXk6IHRpbWluZy5kZWxheSxcbiAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxuICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgIHRpbWVyOiBudWxsLFxuICAgIHN0YXRlOiBDUkVBVEVEXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzY2hlZHVsZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBTVEFSVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBydW5uaW5nXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRyYW5zaXRpb24gbm90IGZvdW5kXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShub2RlLCBpZCwgc2VsZikge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICB0d2VlbjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzZWxmIHRpbWVyIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgY3JlYXRlZC5cbiAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICBzZWxmLnRpbWVyID0gdGltZXIoc2NoZWR1bGUsIDAsIHNlbGYudGltZSk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgIHNlbGYuc3RhdGUgPSBTQ0hFRFVMRUQ7XG4gICAgc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdCBTQ0hFRFVMRUQsIHRoZW4gd2UgcHJldmlvdXNseSBlcnJvcmVkIG9uIHN0YXJ0LlxuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBvID0gc2NoZWR1bGVzW2ldO1xuICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgLy8gV2hpbGUgdGhpcyBlbGVtZW50IGFscmVhZHkgaGFzIGEgc3RhcnRpbmcgdHJhbnNpdGlvbiBkdXJpbmcgdGhpcyBmcmFtZSxcbiAgICAgIC8vIGRlZmVyIHN0YXJ0aW5nIGFuIGludGVycnVwdGluZyB0cmFuc2l0aW9uIHVudGlsIHRoYXQgdHJhbnNpdGlvbiBoYXMgYVxuICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSByZXR1cm4gdGltZW91dChzdGFydCk7XG5cbiAgICAgIC8vIEludGVycnVwdCB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGlmIGFueS5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLlxuICAgICAgZWxzZSBpZiAoK2kgPCBpZCkge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgZDMvZDMjMTU3Ni5cbiAgICAvLyBOb3RlIHRoZSB0cmFuc2l0aW9uIG1heSBiZSBjYW5jZWxlZCBhZnRlciBzdGFydCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB0aWNrIVxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB0d2VlbltpXS5jYWxsKG5vZGUsIHQpO1xuICAgIH1cblxuICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgPT09IEVORElORykge1xuICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgIHNlbGYudGltZXIuc3RvcCgpO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgIGZvciAodmFyIGkgaW4gc2NoZWR1bGVzKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKiAoMSAtIHQpICsgYiAqIHQ7XG4gIH07XG59XG4iLCJ2YXIgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhciBzY2FsZVgsIHNjYWxlWSwgc2tld1g7XG4gIGlmIChzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYikpIGEgLz0gc2NhbGVYLCBiIC89IHNjYWxlWDtcbiAgaWYgKHNrZXdYID0gYSAqIGMgKyBiICogZCkgYyAtPSBhICogc2tld1gsIGQgLT0gYiAqIHNrZXdYO1xuICBpZiAoc2NhbGVZID0gTWF0aC5zcXJ0KGMgKiBjICsgZCAqIGQpKSBjIC89IHNjYWxlWSwgZCAvPSBzY2FsZVksIHNrZXdYIC89IHNjYWxlWTtcbiAgaWYgKGEgKiBkIDwgYiAqIGMpIGEgPSAtYSwgYiA9IC1iLCBza2V3WCA9IC1za2V3WCwgc2NhbGVYID0gLXNjYWxlWDtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2xhdGVYOiBlLFxuICAgIHRyYW5zbGF0ZVk6IGYsXG4gICAgcm90YXRlOiBNYXRoLmF0YW4yKGIsIGEpICogZGVncmVlcyxcbiAgICBza2V3WDogTWF0aC5hdGFuKHNrZXdYKSAqIGRlZ3JlZXMsXG4gICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgc2NhbGVZOiBzY2FsZVlcbiAgfTtcbn1cbiIsImltcG9ydCBkZWNvbXBvc2UsIHtpZGVudGl0eX0gZnJvbSBcIi4vZGVjb21wb3NlLmpzXCI7XG5cbnZhciBzdmdOb2RlO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGNvbnN0IG0gPSBuZXcgKHR5cGVvZiBET01NYXRyaXggPT09IFwiZnVuY3Rpb25cIiA/IERPTU1hdHJpeCA6IFdlYktpdENTU01hdHJpeCkodmFsdWUgKyBcIlwiKTtcbiAgcmV0dXJuIG0uaXNJZGVudGl0eSA/IGlkZW50aXR5IDogZGVjb21wb3NlKG0uYSwgbS5iLCBtLmMsIG0uZCwgbS5lLCBtLmYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlci5qc1wiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlLmpzXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiB0d2VlblJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgbmFtZSArPSBcIlwiO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciB0d2VlbiA9IGdldCh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCk7XG4gICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBnZXQobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yKCkge31cblxuZXhwb3J0IHZhciBkYXJrZXIgPSAwLjc7XG5leHBvcnQgdmFyIGJyaWdodGVyID0gMSAvIGRhcmtlcjtcblxudmFyIHJlSSA9IFwiXFxcXHMqKFsrLV0/XFxcXGQrKVxcXFxzKlwiLFxuICAgIHJlTiA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pXFxcXHMqXCIsXG4gICAgcmVQID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPyklXFxcXHMqXCIsXG4gICAgcmVIZXggPSAvXiMoWzAtOWEtZl17Myw4fSkkLyxcbiAgICByZVJnYkludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVJLCByZUksIHJlSV0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYlBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZUksIHJlSSwgcmVJLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbGFcXFxcKFwiICsgW3JlTiwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKTtcblxudmFyIG5hbWVkID0ge1xuICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICBhcXVhOiAweDAwZmZmZixcbiAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gIGF6dXJlOiAweGYwZmZmZixcbiAgYmVpZ2U6IDB4ZjVmNWRjLFxuICBiaXNxdWU6IDB4ZmZlNGM0LFxuICBibGFjazogMHgwMDAwMDAsXG4gIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcbiAgYmx1ZTogMHgwMDAwZmYsXG4gIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICBicm93bjogMHhhNTJhMmEsXG4gIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxuICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICBjb3JhbDogMHhmZjdmNTAsXG4gIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcbiAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICBjcmltc29uOiAweGRjMTQzYyxcbiAgY3lhbjogMHgwMGZmZmYsXG4gIGRhcmtibHVlOiAweDAwMDA4YixcbiAgZGFya2N5YW46IDB4MDA4YjhiLFxuICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcbiAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICBkYXJrZ3JleTogMHhhOWE5YTksXG4gIGRhcmtraGFraTogMHhiZGI3NmIsXG4gIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxuICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gIGRhcmtyZWQ6IDB4OGIwMDAwLFxuICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXG4gIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXG4gIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICBkZWVwcGluazogMHhmZjE0OTMsXG4gIGRlZXBza3libHVlOiAweDAwYmZmZixcbiAgZGltZ3JheTogMHg2OTY5NjksXG4gIGRpbWdyZXk6IDB4Njk2OTY5LFxuICBkb2RnZXJibHVlOiAweDFlOTBmZixcbiAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXG4gIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcbiAgZ29sZDogMHhmZmQ3MDAsXG4gIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gIGdyYXk6IDB4ODA4MDgwLFxuICBncmVlbjogMHgwMDgwMDAsXG4gIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgZ3JleTogMHg4MDgwODAsXG4gIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgaG90cGluazogMHhmZjY5YjQsXG4gIGluZGlhbnJlZDogMHhjZDVjNWMsXG4gIGluZGlnbzogMHg0YjAwODIsXG4gIGl2b3J5OiAweGZmZmZmMCxcbiAga2hha2k6IDB4ZjBlNjhjLFxuICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICBsYXduZ3JlZW46IDB4N2NmYzAwLFxuICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICBsaWdodGNvcmFsOiAweGYwODA4MCxcbiAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxuICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgbGlnaHRwaW5rOiAweGZmYjZjMSxcbiAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcbiAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICBsaW1lOiAweDAwZmYwMCxcbiAgbGltZWdyZWVuOiAweDMyY2QzMixcbiAgbGluZW46IDB4ZmFmMGU2LFxuICBtYWdlbnRhOiAweGZmMDBmZixcbiAgbWFyb29uOiAweDgwMDAwMCxcbiAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxuICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcbiAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgbWlzdHlyb3NlOiAweGZmZTRlMSxcbiAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gIG5hdnk6IDB4MDAwMDgwLFxuICBvbGRsYWNlOiAweGZkZjVlNixcbiAgb2xpdmU6IDB4ODA4MDAwLFxuICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxuICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICBvcmNoaWQ6IDB4ZGE3MGQ2LFxuICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXG4gIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgcGVhY2hwdWZmOiAweGZmZGFiOSxcbiAgcGVydTogMHhjZDg1M2YsXG4gIHBpbms6IDB4ZmZjMGNiLFxuICBwbHVtOiAweGRkYTBkZCxcbiAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gIHB1cnBsZTogMHg4MDAwODAsXG4gIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxuICByZWQ6IDB4ZmYwMDAwLFxuICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICByb3lhbGJsdWU6IDB4NDE2OWUxLFxuICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gIHNhbG1vbjogMHhmYTgwNzIsXG4gIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxuICBzZWFncmVlbjogMHgyZThiNTcsXG4gIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgc2llbm5hOiAweGEwNTIyZCxcbiAgc2lsdmVyOiAweGMwYzBjMCxcbiAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gIHNsYXRlYmx1ZTogMHg2YTVhY2QsXG4gIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gIHNub3c6IDB4ZmZmYWZhLFxuICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gIHRhbjogMHhkMmI0OGMsXG4gIHRlYWw6IDB4MDA4MDgwLFxuICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgdG9tYXRvOiAweGZmNjM0NyxcbiAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgdmlvbGV0OiAweGVlODJlZSxcbiAgd2hlYXQ6IDB4ZjVkZWIzLFxuICB3aGl0ZTogMHhmZmZmZmYsXG4gIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICB5ZWxsb3c6IDB4ZmZmZjAwLFxuICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbn07XG5cbmRlZmluZShDb2xvciwgY29sb3IsIHtcbiAgY29weTogZnVuY3Rpb24oY2hhbm5lbHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgdGhpcy5jb25zdHJ1Y3RvciwgdGhpcywgY2hhbm5lbHMpO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgfSxcbiAgaGV4OiBjb2xvcl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogY29sb3JfZm9ybWF0SGV4LFxuICBmb3JtYXRIc2w6IGNvbG9yX2Zvcm1hdEhzbCxcbiAgZm9ybWF0UmdiOiBjb2xvcl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiBjb2xvcl9mb3JtYXRSZ2Jcbn0pO1xuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdEhleCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIc2woKSB7XG4gIHJldHVybiBoc2xDb252ZXJ0KHRoaXMpLmZvcm1hdEhzbCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRSZ2IoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdFJnYigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgdmFyIG0sIGw7XG4gIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChtID0gcmVIZXguZXhlYyhmb3JtYXQpKSA/IChsID0gbVsxXS5sZW5ndGgsIG0gPSBwYXJzZUludChtWzFdLCAxNiksIGwgPT09IDYgPyByZ2JuKG0pIC8vICNmZjAwMDBcbiAgICAgIDogbCA9PT0gMyA/IG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkgLy8gI2YwMFxuICAgICAgOiBsID09PSA4ID8gcmdiYShtID4+IDI0ICYgMHhmZiwgbSA+PiAxNiAmIDB4ZmYsIG0gPj4gOCAmIDB4ZmYsIChtICYgMHhmZikgLyAweGZmKSAvLyAjZmYwMDAwMDBcbiAgICAgIDogbCA9PT0gNCA/IHJnYmEoKG0gPj4gMTIgJiAweGYpIHwgKG0gPj4gOCAmIDB4ZjApLCAobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSkgLyAweGZmKSAvLyAjZjAwMFxuICAgICAgOiBudWxsKSAvLyBpbnZhbGlkIGhleFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoLTAuNSA8PSB0aGlzLnIgJiYgdGhpcy5yIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuZyAmJiB0aGlzLmcgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5iICYmIHRoaXMuYiA8IDI1NS41KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBoZXg6IHJnYl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogcmdiX2Zvcm1hdEhleCxcbiAgZm9ybWF0UmdiOiByZ2JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogcmdiX2Zvcm1hdFJnYlxufSkpO1xuXG5mdW5jdGlvbiByZ2JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gXCIjXCIgKyBoZXgodGhpcy5yKSArIGhleCh0aGlzLmcpICsgaGV4KHRoaXMuYik7XG59XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRSZ2IoKSB7XG4gIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIilcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMucikgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSlcbiAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG59XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGZvcm1hdEhzbDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgcmV0dXJuIChhID09PSAxID8gXCJoc2woXCIgOiBcImhzbGEoXCIpXG4gICAgICAgICsgKHRoaXMuaCB8fCAwKSArIFwiLCBcIlxuICAgICAgICArICh0aGlzLnMgfHwgMCkgKiAxMDAgKyBcIiUsIFwiXG4gICAgICAgICsgKHRoaXMubCB8fCAwKSAqIDEwMCArIFwiJVwiXG4gICAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG4gIH1cbn0pKTtcblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGJhc2lzKHQxLCB2MCwgdjEsIHYyLCB2Mykge1xuICB2YXIgdDIgPSB0MSAqIHQxLCB0MyA9IHQyICogdDE7XG4gIHJldHVybiAoKDEgLSAzICogdDEgKyAzICogdDIgLSB0MykgKiB2MFxuICAgICAgKyAoNCAtIDYgKiB0MiArIDMgKiB0MykgKiB2MVxuICAgICAgKyAoMSArIDMgKiB0MSArIDMgKiB0MiAtIDMgKiB0MykgKiB2MlxuICAgICAgKyB0MyAqIHYzKSAvIDY7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGggLSAxO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdCA8PSAwID8gKHQgPSAwKSA6IHQgPj0gMSA/ICh0ID0gMSwgbiAtIDEpIDogTWF0aC5mbG9vcih0ICogbiksXG4gICAgICAgIHYxID0gdmFsdWVzW2ldLFxuICAgICAgICB2MiA9IHZhbHVlc1tpICsgMV0sXG4gICAgICAgIHYwID0gaSA+IDAgPyB2YWx1ZXNbaSAtIDFdIDogMiAqIHYxIC0gdjIsXG4gICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHggPT4gKCkgPT4geDtcbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWQuanNcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJpbXBvcnQge2Jhc2lzfSBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcigoKHQgJT0gMSkgPCAwID8gKyt0IDogdCkgKiBuKSxcbiAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICB2MiA9IHZhbHVlc1soaSArIDEpICUgbl0sXG4gICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG52YXIgcmVBID0gL1stK10/KD86XFxkK1xcLj9cXGQqfFxcLj9cXGQrKSg/OltlRV1bLStdP1xcZCspPy9nLFxuICAgIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG5mdW5jdGlvbiB6ZXJvKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoYikge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogbnVtYmVyKGFtLCBibSl9KTtcbiAgICB9XG4gICAgYmkgPSByZUIubGFzdEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gIH1cblxuICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cbiAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICA/IG9uZShxWzBdLngpXG4gICAgICA6IHplcm8oYikpXG4gICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJnYiwgaW50ZXJwb2xhdGVTdHJpbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBjO1xuICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gaW50ZXJwb2xhdGVOdW1iZXJcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtU3ZnIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGUuanNcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCwgdmFsdWUxID0gdmFsdWUodGhpcyksIHN0cmluZzE7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKGZ1bGxuYW1lLCBpLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlKG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBpLmNhbGwodGhpcywgdCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpLmNhbGwodGhpcywgdCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW5OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2VlbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZShuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGtleSA9IFwiYXR0ci5cIiArIG5hbWU7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIChmdWxsbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkZWxheUZ1bmN0aW9uXG4gICAgICAgICAgOiBkZWxheUNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kZWxheTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGR1cmF0aW9uRnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgOiBkdXJhdGlvbkNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbnZhciBTZWxlY3Rpb24gPSBzZWxlY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtzdHlsZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGUuanNcIjtcblxuZnVuY3Rpb24gc3R5bGVOdWxsKG5hbWUsIGludGVycG9sYXRlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgc3RyaW5nMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHN0cmluZzEwID0gc3RyaW5nMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyksXG4gICAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgc3RyaW5nMSA9IHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZU1heWJlUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciBvbjAsIG9uMSwgbGlzdGVuZXIwLCBrZXkgPSBcInN0eWxlLlwiICsgbmFtZSwgZXZlbnQgPSBcImVuZC5cIiArIGtleSwgcmVtb3ZlO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgb24gPSBzY2hlZHVsZS5vbixcbiAgICAgICAgbGlzdGVuZXIgPSBzY2hlZHVsZS52YWx1ZVtrZXldID09IG51bGwgPyByZW1vdmUgfHwgKHJlbW92ZSA9IHN0eWxlUmVtb3ZlKG5hbWUpKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAob24gIT09IG9uMCB8fCBsaXN0ZW5lcjAgIT09IGxpc3RlbmVyKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKGV2ZW50LCBsaXN0ZW5lcjAgPSBsaXN0ZW5lcik7XG5cbiAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBpID0gKG5hbWUgKz0gXCJcIikgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlTnVsbChuYW1lLCBpKSlcbiAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIHN0eWxlUmVtb3ZlKG5hbWUpKVxuICAgIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUZ1bmN0aW9uKG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlKSkpXG4gICAgICAuZWFjaChzdHlsZU1heWJlUmVtb3ZlKHRoaXMuX2lkLCBuYW1lKSlcbiAgICA6IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlQ29uc3RhbnQobmFtZSwgaSwgdmFsdWUpLCBwcmlvcml0eSlcbiAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIG51bGwpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHIgZnJvbSBcIi4vYXR0ci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0clR3ZWVuIGZyb20gXCIuL2F0dHJUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZGVsYXkgZnJvbSBcIi4vZGVsYXkuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2R1cmF0aW9uIGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlIGZyb20gXCIuL2Vhc2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2VWYXJ5aW5nIGZyb20gXCIuL2Vhc2VWYXJ5aW5nLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fb24gZnJvbSBcIi4vb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmUuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3QuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGwuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdGlvbiBmcm9tIFwiLi9zZWxlY3Rpb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZVR3ZWVuIGZyb20gXCIuL3N0eWxlVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHQgZnJvbSBcIi4vdGV4dC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dFR3ZWVuIGZyb20gXCIuL3RleHRUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90d2VlbiBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZW5kIGZyb20gXCIuL2VuZC5qc1wiO1xuXG52YXIgaWQgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gVHJhbnNpdGlvbihncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG4gIHRoaXMuX25hbWUgPSBuYW1lO1xuICB0aGlzLl9pZCA9IGlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHNlbGVjdGlvbigpLnRyYW5zaXRpb24obmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdJZCgpIHtcbiAgcmV0dXJuICsraWQ7XG59XG5cbnZhciBzZWxlY3Rpb25fcHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZTtcblxuVHJhbnNpdGlvbi5wcm90b3R5cGUgPSB0cmFuc2l0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zaXRpb24sXG4gIHNlbGVjdDogdHJhbnNpdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogdHJhbnNpdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogdHJhbnNpdGlvbl9maWx0ZXIsXG4gIG1lcmdlOiB0cmFuc2l0aW9uX21lcmdlLFxuICBzZWxlY3Rpb246IHRyYW5zaXRpb25fc2VsZWN0aW9uLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uX3RyYW5zaXRpb24sXG4gIGNhbGw6IHNlbGVjdGlvbl9wcm90b3R5cGUuY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX3Byb3RvdHlwZS5lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX3Byb3RvdHlwZS5lYWNoLFxuICBvbjogdHJhbnNpdGlvbl9vbixcbiAgYXR0cjogdHJhbnNpdGlvbl9hdHRyLFxuICBhdHRyVHdlZW46IHRyYW5zaXRpb25fYXR0clR3ZWVuLFxuICBzdHlsZTogdHJhbnNpdGlvbl9zdHlsZSxcbiAgc3R5bGVUd2VlbjogdHJhbnNpdGlvbl9zdHlsZVR3ZWVuLFxuICB0ZXh0OiB0cmFuc2l0aW9uX3RleHQsXG4gIHRleHRUd2VlbjogdHJhbnNpdGlvbl90ZXh0VHdlZW4sXG4gIHJlbW92ZTogdHJhbnNpdGlvbl9yZW1vdmUsXG4gIHR3ZWVuOiB0cmFuc2l0aW9uX3R3ZWVuLFxuICBkZWxheTogdHJhbnNpdGlvbl9kZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25fZHVyYXRpb24sXG4gIGVhc2U6IHRyYW5zaXRpb25fZWFzZSxcbiAgZWFzZVZhcnlpbmc6IHRyYW5zaXRpb25fZWFzZVZhcnlpbmcsXG4gIGVuZDogdHJhbnNpdGlvbl9lbmQsXG4gIFtTeW1ib2wuaXRlcmF0b3JdOiBzZWxlY3Rpb25fcHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl1cbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkuY2FsbCh0aGlzLCB0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24odHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xufVxuIiwiaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGVhc2VWYXJ5aW5nKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0eXBlb2YgdiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gICAgc2V0KHRoaXMsIGlkKS5lYXNlID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLmVhY2goZWFzZVZhcnlpbmcodGhpcy5faWQsIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBvbjAsIG9uMSwgdGhhdCA9IHRoaXMsIGlkID0gdGhhdC5faWQsIHNpemUgPSB0aGF0LnNpemUoKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBjYW5jZWwgPSB7dmFsdWU6IHJlamVjdH0sXG4gICAgICAgIGVuZCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7IGlmICgtLXNpemUgPT09IDApIHJlc29sdmUoKTsgfX07XG5cbiAgICB0aGF0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkge1xuICAgICAgICBvbjEgPSAob24wID0gb24pLmNvcHkoKTtcbiAgICAgICAgb24xLl8uY2FuY2VsLnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uaW50ZXJydXB0LnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uZW5kLnB1c2goZW5kKTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUub24gPSBvbjE7XG4gICAgfSk7XG5cbiAgICAvLyBUaGUgc2VsZWN0aW9uIHdhcyBlbXB0eSwgcmVzb2x2ZSBlbmQgaW1tZWRpYXRlbHlcbiAgICBpZiAoc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB0cmFuc2l0aW9uICR7aWR9IG5vdCBmb3VuZGApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7U1RBUlRJTkcsIEVORElORywgRU5ERUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGVtcHR5ID0gdHJ1ZSxcbiAgICAgIGk7XG5cbiAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuXG4gIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORyAmJiBzY2hlZHVsZS5zdGF0ZSA8IEVORElORztcbiAgICBzY2hlZHVsZS5zdGF0ZSA9IEVOREVEO1xuICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICBzY2hlZHVsZS5vbi5jYWxsKGFjdGl2ZSA/IFwiaW50ZXJydXB0XCIgOiBcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzY2hlZHVsZS5pbmRleCwgc2NoZWR1bGUuZ3JvdXApO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gIH1cblxuICBpZiAoZW1wdHkpIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGV9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtwb2ludGVyLCBzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgQnJ1c2hFdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbnZhciBNT0RFX0RSQUcgPSB7bmFtZTogXCJkcmFnXCJ9LFxuICAgIE1PREVfU1BBQ0UgPSB7bmFtZTogXCJzcGFjZVwifSxcbiAgICBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifSxcbiAgICBNT0RFX0NFTlRFUiA9IHtuYW1lOiBcImNlbnRlclwifTtcblxuY29uc3Qge2FicywgbWF4LCBtaW59ID0gTWF0aDtcblxuZnVuY3Rpb24gbnVtYmVyMShlKSB7XG4gIHJldHVybiBbK2VbMF0sICtlWzFdXTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyMihlKSB7XG4gIHJldHVybiBbbnVtYmVyMShlWzBdKSwgbnVtYmVyMShlWzFdKV07XG59XG5cbnZhciBYID0ge1xuICBuYW1lOiBcInhcIixcbiAgaGFuZGxlczogW1wid1wiLCBcImVcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCA9PSBudWxsID8gbnVsbCA6IFtbK3hbMF0sIGVbMF1bMV1dLCBbK3hbMV0sIGVbMV1bMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzBdLCB4eVsxXVswXV07IH1cbn07XG5cbnZhciBZID0ge1xuICBuYW1lOiBcInlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcInNcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeSwgZSkgeyByZXR1cm4geSA9PSBudWxsID8gbnVsbCA6IFtbZVswXVswXSwgK3lbMF1dLCBbZVsxXVswXSwgK3lbMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07IH1cbn07XG5cbnZhciBYWSA9IHtcbiAgbmFtZTogXCJ4eVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwid1wiLCBcImVcIiwgXCJzXCIsIFwibndcIiwgXCJuZVwiLCBcInN3XCIsIFwic2VcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ID09IG51bGwgPyBudWxsIDogbnVtYmVyMih4eSk7IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9XG59O1xuXG52YXIgY3Vyc29ycyA9IHtcbiAgb3ZlcmxheTogXCJjcm9zc2hhaXJcIixcbiAgc2VsZWN0aW9uOiBcIm1vdmVcIixcbiAgbjogXCJucy1yZXNpemVcIixcbiAgZTogXCJldy1yZXNpemVcIixcbiAgczogXCJucy1yZXNpemVcIixcbiAgdzogXCJldy1yZXNpemVcIixcbiAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgbmU6IFwibmVzdy1yZXNpemVcIixcbiAgc2U6IFwibndzZS1yZXNpemVcIixcbiAgc3c6IFwibmVzdy1yZXNpemVcIlxufTtcblxudmFyIGZsaXBYID0ge1xuICBlOiBcIndcIixcbiAgdzogXCJlXCIsXG4gIG53OiBcIm5lXCIsXG4gIG5lOiBcIm53XCIsXG4gIHNlOiBcInN3XCIsXG4gIHN3OiBcInNlXCJcbn07XG5cbnZhciBmbGlwWSA9IHtcbiAgbjogXCJzXCIsXG4gIHM6IFwiblwiLFxuICBudzogXCJzd1wiLFxuICBuZTogXCJzZVwiLFxuICBzZTogXCJuZVwiLFxuICBzdzogXCJud1wiXG59O1xuXG52YXIgc2lnbnNYID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogbnVsbCxcbiAgZTogKzEsXG4gIHM6IG51bGwsXG4gIHc6IC0xLFxuICBudzogLTEsXG4gIG5lOiArMSxcbiAgc2U6ICsxLFxuICBzdzogLTFcbn07XG5cbnZhciBzaWduc1kgPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiAtMSxcbiAgZTogbnVsbCxcbiAgczogKzEsXG4gIHc6IG51bGwsXG4gIG53OiAtMSxcbiAgbmU6IC0xLFxuICBzZTogKzEsXG4gIHN3OiArMVxufTtcblxuZnVuY3Rpb24gdHlwZSh0KSB7XG4gIHJldHVybiB7dHlwZTogdH07XG59XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcihldmVudCkge1xuICByZXR1cm4gIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgdmFyIHN2ZyA9IHRoaXMub3duZXJTVkdFbGVtZW50IHx8IHRoaXM7XG4gIGlmIChzdmcuaGFzQXR0cmlidXRlKFwidmlld0JveFwiKSkge1xuICAgIHN2ZyA9IHN2Zy52aWV3Qm94LmJhc2VWYWw7XG4gICAgcmV0dXJuIFtbc3ZnLngsIHN2Zy55XSwgW3N2Zy54ICsgc3ZnLndpZHRoLCBzdmcueSArIHN2Zy5oZWlnaHRdXTtcbiAgfVxuICByZXR1cm4gW1swLCAwXSwgW3N2Zy53aWR0aC5iYXNlVmFsLnZhbHVlLCBzdmcuaGVpZ2h0LmJhc2VWYWwudmFsdWVdXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyB8fCAoXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzKTtcbn1cblxuLy8gTGlrZSBkMy5sb2NhbCwgYnV0IHdpdGggdGhlIG5hbWUg4oCcX19icnVzaOKAnSByYXRoZXIgdGhhbiBhdXRvLWdlbmVyYXRlZC5cbmZ1bmN0aW9uIGxvY2FsKG5vZGUpIHtcbiAgd2hpbGUgKCFub2RlLl9fYnJ1c2gpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gIHJldHVybiBub2RlLl9fYnJ1c2g7XG59XG5cbmZ1bmN0aW9uIGVtcHR5KGV4dGVudCkge1xuICByZXR1cm4gZXh0ZW50WzBdWzBdID09PSBleHRlbnRbMV1bMF1cbiAgICAgIHx8IGV4dGVudFswXVsxXSA9PT0gZXh0ZW50WzFdWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hTZWxlY3Rpb24obm9kZSkge1xuICB2YXIgc3RhdGUgPSBub2RlLl9fYnJ1c2g7XG4gIHJldHVybiBzdGF0ZSA/IHN0YXRlLmRpbS5vdXRwdXQoc3RhdGUuc2VsZWN0aW9uKSA6IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFgoKSB7XG4gIHJldHVybiBicnVzaChYKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWSgpIHtcbiAgcmV0dXJuIGJydXNoKFkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGJydXNoKFhZKTtcbn1cblxuZnVuY3Rpb24gYnJ1c2goZGltKSB7XG4gIHZhciBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBrZXlzID0gdHJ1ZSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJicnVzaFwiLCBcImVuZFwiKSxcbiAgICAgIGhhbmRsZVNpemUgPSA2LFxuICAgICAgdG91Y2hlbmRpbmc7XG5cbiAgZnVuY3Rpb24gYnJ1c2goZ3JvdXApIHtcbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fYnJ1c2hcIiwgaW5pdGlhbGl6ZSlcbiAgICAgIC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJvdmVybGF5XCIpXSk7XG5cbiAgICBvdmVybGF5LmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwib3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSlcbiAgICAgIC5tZXJnZShvdmVybGF5KVxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZXh0ZW50ID0gbG9jYWwodGhpcykuZXh0ZW50O1xuICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZXh0ZW50WzBdWzFdKVxuICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdKTtcbiAgICAgICAgfSk7XG5cbiAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAuZGF0YShbdHlwZShcInNlbGVjdGlvblwiKV0pXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzZWxlY3Rpb25cIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiM3NzdcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC4zKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZcIilcbiAgICAgICAgLmF0dHIoXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJjcmlzcEVkZ2VzXCIpO1xuXG4gICAgdmFyIGhhbmRsZSA9IGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgIC5kYXRhKGRpbS5oYW5kbGVzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGU7IH0pO1xuXG4gICAgaGFuZGxlLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgIGhhbmRsZS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcImhhbmRsZSBoYW5kbGUtLVwiICsgZC50eXBlOyB9KVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjdXJzb3JzW2QudHlwZV07IH0pO1xuXG4gICAgZ3JvdXBcbiAgICAgICAgLmVhY2gocmVkcmF3KVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmJydXNoXCIsIHN0YXJ0ZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC5icnVzaFwiLCBzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuYnJ1c2ggdG91Y2hjYW5jZWwuYnJ1c2hcIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgYnJ1c2gubW92ZSA9IGZ1bmN0aW9uKGdyb3VwLCBzZWxlY3Rpb24pIHtcbiAgICBpZiAoZ3JvdXAudHdlZW4pIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwic3RhcnQuYnJ1c2hcIiwgZnVuY3Rpb24oZXZlbnQpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCkuc3RhcnQoZXZlbnQpOyB9KVxuICAgICAgICAgIC5vbihcImludGVycnVwdC5icnVzaCBlbmQuYnJ1c2hcIiwgZnVuY3Rpb24oZXZlbnQpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZChldmVudCk7IH0pXG4gICAgICAgICAgLnR3ZWVuKFwiYnJ1c2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24wID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKHNlbGVjdGlvbjAsIHNlbGVjdGlvbjEpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB0d2Vlbih0KSB7XG4gICAgICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHQgPT09IDEgJiYgc2VsZWN0aW9uMSA9PT0gbnVsbCA/IG51bGwgOiBpKHQpO1xuICAgICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uMCAhPT0gbnVsbCAmJiBzZWxlY3Rpb24xICE9PSBudWxsID8gdHdlZW4gOiB0d2VlbigxKTtcbiAgICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uLmFwcGx5KHRoYXQsIGFyZ3MpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3MpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICAgICAgICAgIGludGVycnVwdCh0aGF0KTtcbiAgICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjEgPT09IG51bGwgPyBudWxsIDogc2VsZWN0aW9uMTtcbiAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgZW1pdC5zdGFydCgpLmJydXNoKCkuZW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGJydXNoLmNsZWFyID0gZnVuY3Rpb24oZ3JvdXApIHtcbiAgICBicnVzaC5tb3ZlKGdyb3VwLCBudWxsKTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWRyYXcoKSB7XG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoaXMpLFxuICAgICAgICBzZWxlY3Rpb24gPSBsb2NhbCh0aGlzKS5zZWxlY3Rpb247XG5cbiAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIHNlbGVjdGlvblswXVsxXSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0pO1xuXG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbZC50eXBlLmxlbmd0aCAtIDFdID09PSBcImVcIiA/IHNlbGVjdGlvblsxXVswXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzBdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVswXSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVsxXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcIm5cIiB8fCBkLnR5cGUgPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcImVcIiB8fCBkLnR5cGUgPT09IFwid1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvbiwuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIilcbiAgICAgICAgICAuYXR0cihcInhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdHRlcih0aGF0LCBhcmdzLCBjbGVhbikge1xuICAgIHZhciBlbWl0ID0gdGhhdC5fX2JydXNoLmVtaXR0ZXI7XG4gICAgcmV0dXJuIGVtaXQgJiYgKCFjbGVhbiB8fCAhZW1pdC5jbGVhbikgPyBlbWl0IDogbmV3IEVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pO1xuICB9XG5cbiAgZnVuY3Rpb24gRW1pdHRlcih0aGF0LCBhcmdzLCBjbGVhbikge1xuICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLnN0YXRlID0gdGhhdC5fX2JydXNoO1xuICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICB0aGlzLmNsZWFuID0gY2xlYW47XG4gIH1cblxuICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBiZWZvcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbihldmVudCwgbW9kZSkge1xuICAgICAgaWYgKHRoaXMuc3RhcnRpbmcpIHRoaXMuc3RhcnRpbmcgPSBmYWxzZSwgdGhpcy5lbWl0KFwic3RhcnRcIiwgZXZlbnQsIG1vZGUpO1xuICAgICAgZWxzZSB0aGlzLmVtaXQoXCJicnVzaFwiLCBldmVudCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGJydXNoOiBmdW5jdGlvbihldmVudCwgbW9kZSkge1xuICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIiwgZXZlbnQsIG1vZGUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKGV2ZW50LCBtb2RlKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkgZGVsZXRlIHRoaXMuc3RhdGUuZW1pdHRlciwgdGhpcy5lbWl0KFwiZW5kXCIsIGV2ZW50LCBtb2RlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSwgZXZlbnQsIG1vZGUpIHtcbiAgICAgIHZhciBkID0gc2VsZWN0KHRoaXMudGhhdCkuZGF0dW0oKTtcbiAgICAgIGxpc3RlbmVycy5jYWxsKFxuICAgICAgICB0eXBlLFxuICAgICAgICB0aGlzLnRoYXQsXG4gICAgICAgIG5ldyBCcnVzaEV2ZW50KHR5cGUsIHtcbiAgICAgICAgICBzb3VyY2VFdmVudDogZXZlbnQsXG4gICAgICAgICAgdGFyZ2V0OiBicnVzaCxcbiAgICAgICAgICBzZWxlY3Rpb246IGRpbS5vdXRwdXQodGhpcy5zdGF0ZS5zZWxlY3Rpb24pLFxuICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgZGlzcGF0Y2g6IGxpc3RlbmVyc1xuICAgICAgICB9KSxcbiAgICAgICAgZFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc3RhcnRlZChldmVudCkge1xuICAgIGlmICh0b3VjaGVuZGluZyAmJiAhZXZlbnQudG91Y2hlcykgcmV0dXJuO1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcblxuICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgdHlwZSA9IGV2ZW50LnRhcmdldC5fX2RhdGFfXy50eXBlLFxuICAgICAgICBtb2RlID0gKGtleXMgJiYgZXZlbnQubWV0YUtleSA/IHR5cGUgPSBcIm92ZXJsYXlcIiA6IHR5cGUpID09PSBcInNlbGVjdGlvblwiID8gTU9ERV9EUkFHIDogKGtleXMgJiYgZXZlbnQuYWx0S2V5ID8gTU9ERV9DRU5URVIgOiBNT0RFX0hBTkRMRSksXG4gICAgICAgIHNpZ25YID0gZGltID09PSBZID8gbnVsbCA6IHNpZ25zWFt0eXBlXSxcbiAgICAgICAgc2lnblkgPSBkaW0gPT09IFggPyBudWxsIDogc2lnbnNZW3R5cGVdLFxuICAgICAgICBzdGF0ZSA9IGxvY2FsKHRoYXQpLFxuICAgICAgICBleHRlbnQgPSBzdGF0ZS5leHRlbnQsXG4gICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgVyA9IGV4dGVudFswXVswXSwgdzAsIHcxLFxuICAgICAgICBOID0gZXh0ZW50WzBdWzFdLCBuMCwgbjEsXG4gICAgICAgIEUgPSBleHRlbnRbMV1bMF0sIGUwLCBlMSxcbiAgICAgICAgUyA9IGV4dGVudFsxXVsxXSwgczAsIHMxLFxuICAgICAgICBkeCA9IDAsXG4gICAgICAgIGR5ID0gMCxcbiAgICAgICAgbW92aW5nLFxuICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZICYmIGtleXMgJiYgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgIGxvY2tYLFxuICAgICAgICBsb2NrWSxcbiAgICAgICAgcG9pbnRzID0gQXJyYXkuZnJvbShldmVudC50b3VjaGVzIHx8IFtldmVudF0sIHQgPT4ge1xuICAgICAgICAgIGNvbnN0IGkgPSB0LmlkZW50aWZpZXI7XG4gICAgICAgICAgdCA9IHBvaW50ZXIodCwgdGhhdCk7XG4gICAgICAgICAgdC5wb2ludDAgPSB0LnNsaWNlKCk7XG4gICAgICAgICAgdC5pZGVudGlmaWVyID0gaTtcbiAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgfSk7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgIGlmIChzZWxlY3Rpb24pIG1vdmluZyA9IHRydWU7XG4gICAgICBjb25zdCBwdHMgPSBbcG9pbnRzWzBdLCBwb2ludHNbMV0gfHwgcG9pbnRzWzBdXTtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtbXG4gICAgICAgICAgdzAgPSBkaW0gPT09IFkgPyBXIDogbWluKHB0c1swXVswXSwgcHRzWzFdWzBdKSxcbiAgICAgICAgICBuMCA9IGRpbSA9PT0gWCA/IE4gOiBtaW4ocHRzWzBdWzFdLCBwdHNbMV1bMV0pXG4gICAgICAgIF0sIFtcbiAgICAgICAgICBlMCA9IGRpbSA9PT0gWSA/IEUgOiBtYXgocHRzWzBdWzBdLCBwdHNbMV1bMF0pLFxuICAgICAgICAgIHMwID0gZGltID09PSBYID8gUyA6IG1heChwdHNbMF1bMV0sIHB0c1sxXVsxXSlcbiAgICAgICAgXV07XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCA+IDEpIG1vdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdzAgPSBzZWxlY3Rpb25bMF1bMF07XG4gICAgICBuMCA9IHNlbGVjdGlvblswXVsxXTtcbiAgICAgIGUwID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgczAgPSBzZWxlY3Rpb25bMV1bMV07XG4gICAgfVxuXG4gICAgdzEgPSB3MDtcbiAgICBuMSA9IG4wO1xuICAgIGUxID0gZTA7XG4gICAgczEgPSBzMDtcblxuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGF0KVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKTtcblxuICAgIHZhciBvdmVybGF5ID0gZ3JvdXAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG5cbiAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgdmFyIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cywgdHJ1ZSkuYmVmb3Jlc3RhcnQoKTtcblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICBlbWl0Lm1vdmVkID0gbW92ZWQ7XG4gICAgICBlbWl0LmVuZGVkID0gZW5kZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV2ZW50LnZpZXcpXG4gICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNldXAuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuICAgICAgaWYgKGtleXMpIHZpZXdcbiAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJrZXl1cC5icnVzaFwiLCBrZXl1cHBlZCwgdHJ1ZSlcblxuICAgICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgfVxuXG4gICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgZW1pdC5zdGFydChldmVudCwgbW9kZS5uYW1lKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVkKGV2ZW50KSB7XG4gICAgICBmb3IgKGNvbnN0IHAgb2YgZXZlbnQuY2hhbmdlZFRvdWNoZXMgfHwgW2V2ZW50XSkge1xuICAgICAgICBmb3IgKGNvbnN0IGQgb2YgcG9pbnRzKVxuICAgICAgICAgIGlmIChkLmlkZW50aWZpZXIgPT09IHAuaWRlbnRpZmllcikgZC5jdXIgPSBwb2ludGVyKHAsIHRoYXQpO1xuICAgICAgfVxuICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kgJiYgcG9pbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1swXTtcbiAgICAgICAgaWYgKGFicyhwb2ludC5jdXJbMF0gLSBwb2ludFswXSkgPiBhYnMocG9pbnQuY3VyWzFdIC0gcG9pbnRbMV0pKVxuICAgICAgICAgIGxvY2tZID0gdHJ1ZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGxvY2tYID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgcG9pbnQgb2YgcG9pbnRzKVxuICAgICAgICBpZiAocG9pbnQuY3VyKSBwb2ludFswXSA9IHBvaW50LmN1clswXSwgcG9pbnRbMV0gPSBwb2ludC5jdXJbMV07XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudChldmVudCk7XG4gICAgICBtb3ZlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlKGV2ZW50KSB7XG4gICAgICBjb25zdCBwb2ludCA9IHBvaW50c1swXSwgcG9pbnQwID0gcG9pbnQucG9pbnQwO1xuICAgICAgdmFyIHQ7XG5cbiAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICBjYXNlIE1PREVfRFJBRzoge1xuICAgICAgICAgIGlmIChzaWduWCkgZHggPSBtYXgoVyAtIHcwLCBtaW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gbWF4KE4gLSBuMCwgbWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0hBTkRMRToge1xuICAgICAgICAgIGlmIChwb2ludHNbMV0pIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgdzEgPSBtYXgoVywgbWluKEUsIHBvaW50c1swXVswXSkpLCBlMSA9IG1heChXLCBtaW4oRSwgcG9pbnRzWzFdWzBdKSksIHNpZ25YID0gMTtcbiAgICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBtYXgoTiwgbWluKFMsIHBvaW50c1swXVsxXSkpLCBzMSA9IG1heChOLCBtaW4oUywgcG9pbnRzWzFdWzFdKSksIHNpZ25ZID0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZHggPSBtYXgoVyAtIHcwLCBtaW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgICBlbHNlIGlmIChzaWduWCA+IDApIGR4ID0gbWF4KFcgLSBlMCwgbWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBtYXgoTiAtIG4wLCBtaW4oUyAtIG4wLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczA7XG4gICAgICAgICAgICBlbHNlIGlmIChzaWduWSA+IDApIGR5ID0gbWF4KE4gLSBzMCwgbWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IG1heChXLCBtaW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gbWF4KFcsIG1pbihFLCBlMCArIGR4ICogc2lnblgpKTtcbiAgICAgICAgICBpZiAoc2lnblkpIG4xID0gbWF4KE4sIG1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBtYXgoTiwgbWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcbiAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5icnVzaChldmVudCwgbW9kZS5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRlZChldmVudCkge1xuICAgICAgbm9wcm9wYWdhdGlvbihldmVudCk7XG4gICAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ0VuYWJsZShldmVudC52aWV3LCBtb3ZpbmcpO1xuICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGdyb3VwLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcbiAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUgKG9uIHN0YXJ0KSFcbiAgICAgIGlmIChlbXB0eShzZWxlY3Rpb24pKSBzdGF0ZS5zZWxlY3Rpb24gPSBudWxsLCByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgIGVtaXQuZW5kKGV2ZW50LCBtb2RlLm5hbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleWRvd25lZChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFKSB7XG4gICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFOyB0YWtlcyBwcmlvcml0eSBvdmVyIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSB8fCBtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMSAtIGR4OyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzEgLSBkeDtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczEgLSBkeTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xIC0gZHk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9TUEFDRTtcbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbik7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleXVwcGVkKGV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIGlmIChzaGlmdGluZykge1xuICAgICAgICAgICAgbG9ja1ggPSBsb2NrWSA9IHNoaWZ0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0VcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9TUEFDRSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmFsdEtleSkge1xuICAgICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoZXZlbnQpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykubW92ZWQoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZChldmVudCkge1xuICAgIGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmRlZChldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX19icnVzaCB8fCB7c2VsZWN0aW9uOiBudWxsfTtcbiAgICBzdGF0ZS5leHRlbnQgPSBudW1iZXIyKGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBzdGF0ZS5kaW0gPSBkaW07XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQobnVtYmVyMihfKSksIGJydXNoKSA6IGV4dGVudDtcbiAgfTtcblxuICBicnVzaC5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBicnVzaCkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgYnJ1c2gudG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYnJ1c2gpIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIGJydXNoLmhhbmRsZVNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaGFuZGxlU2l6ZSA9ICtfLCBicnVzaCkgOiBoYW5kbGVTaXplO1xuICB9O1xuXG4gIGJydXNoLmtleU1vZGlmaWVycyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrZXlzID0gISFfLCBicnVzaCkgOiBrZXlzO1xuICB9O1xuXG4gIGJydXNoLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGJydXNoIDogdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIGJydXNoO1xufVxuIiwiZnVuY3Rpb24gcmVzcG9uc2VKc29uKHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDQgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSAyMDUpIHJldHVybjtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlSnNvbik7XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWUuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIChpc051bWJlckFycmF5KGIpID8gbnVtYmVyQXJyYXkgOiBnZW5lcmljQXJyYXkpKGEsIGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJpY0FycmF5KGEsIGIpIHtcbiAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgeCA9IG5ldyBBcnJheShuYSksXG4gICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSB2YWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGQuc2V0VGltZShhICogKDEgLSB0KSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICBpZiAoIWIpIGIgPSBbXTtcbiAgdmFyIG4gPSBhID8gTWF0aC5taW4oYi5sZW5ndGgsIGEubGVuZ3RoKSA6IDAsXG4gICAgICBjID0gYi5zbGljZSgpLFxuICAgICAgaTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjW2ldID0gYVtpXSAqICgxIC0gdCkgKyBiW2ldICogdDtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyQXJyYXkoeCkge1xuICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KHgpICYmICEoeCBpbnN0YW5jZW9mIERhdGFWaWV3KTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHJnYiBmcm9tIFwiLi9yZ2IuanNcIjtcbmltcG9ydCB7Z2VuZXJpY0FycmF5fSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGRhdGUgZnJvbSBcIi4vZGF0ZS5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcbmltcG9ydCBvYmplY3QgZnJvbSBcIi4vb2JqZWN0LmpzXCI7XG5pbXBvcnQgc3RyaW5nIGZyb20gXCIuL3N0cmluZy5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgbnVtYmVyQXJyYXksIHtpc051bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB0ID0gdHlwZW9mIGIsIGM7XG4gIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudChiKVxuICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IG51bWJlclxuICAgICAgOiB0ID09PSBcInN0cmluZ1wiID8gKChjID0gY29sb3IoYikpID8gKGIgPSBjLCByZ2IpIDogc3RyaW5nKVxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyByZ2JcbiAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXG4gICAgICA6IGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gZ2VuZXJpY0FycmF5XG4gICAgICA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0XG4gICAgICA6IG51bWJlcikoYSwgYik7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlKGRvbWFpbiwgcmFuZ2UpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMucmFuZ2UoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5yYW5nZShyYW5nZSkuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEludGVycG9sYXRvcihkb21haW4sIGludGVycG9sYXRvcikge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMToge1xuICAgICAgaWYgKHR5cGVvZiBkb21haW4gPT09IFwiZnVuY3Rpb25cIikgdGhpcy5pbnRlcnBvbGF0b3IoZG9tYWluKTtcbiAgICAgIGVsc2UgdGhpcy5yYW5nZShkb21haW4pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHRoaXMuZG9tYWluKGRvbWFpbik7XG4gICAgICBpZiAodHlwZW9mIGludGVycG9sYXRvciA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLmludGVycG9sYXRvcihpbnRlcnBvbGF0b3IpO1xuICAgICAgZWxzZSB0aGlzLnJhbmdlKGludGVycG9sYXRvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuXG5leHBvcnQgY29uc3QgaW1wbGljaXQgPSBTeW1ib2woXCJpbXBsaWNpdFwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkaW5hbCgpIHtcbiAgdmFyIGluZGV4ID0gbmV3IE1hcCgpLFxuICAgICAgZG9tYWluID0gW10sXG4gICAgICByYW5nZSA9IFtdLFxuICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKGQpIHtcbiAgICB2YXIga2V5ID0gZCArIFwiXCIsIGkgPSBpbmRleC5nZXQoa2V5KTtcbiAgICBpZiAoIWkpIHtcbiAgICAgIGlmICh1bmtub3duICE9PSBpbXBsaWNpdCkgcmV0dXJuIHVua25vd247XG4gICAgICBpbmRleC5zZXQoa2V5LCBpID0gZG9tYWluLnB1c2goZCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VbKGkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW10sIGluZGV4ID0gbmV3IE1hcCgpO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgXykge1xuICAgICAgY29uc3Qga2V5ID0gdmFsdWUgKyBcIlwiO1xuICAgICAgaWYgKGluZGV4LmhhcyhrZXkpKSBjb250aW51ZTtcbiAgICAgIGluZGV4LnNldChrZXksIGRvbWFpbi5wdXNoKHZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IEFycmF5LmZyb20oXyksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9yZGluYWwoZG9tYWluLCByYW5nZSkudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIiwiaW1wb3J0IHtyYW5nZSBhcyBzZXF1ZW5jZX0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IG9yZGluYWwgZnJvbSBcIi4vb3JkaW5hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiYW5kKCkge1xuICB2YXIgc2NhbGUgPSBvcmRpbmFsKCkudW5rbm93bih1bmRlZmluZWQpLFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgb3JkaW5hbFJhbmdlID0gc2NhbGUucmFuZ2UsXG4gICAgICByMCA9IDAsXG4gICAgICByMSA9IDEsXG4gICAgICBzdGVwLFxuICAgICAgYmFuZHdpZHRoLFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IDAsXG4gICAgICBwYWRkaW5nT3V0ZXIgPSAwLFxuICAgICAgYWxpZ24gPSAwLjU7XG5cbiAgZGVsZXRlIHNjYWxlLnVua25vd247XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgbiA9IGRvbWFpbigpLmxlbmd0aCxcbiAgICAgICAgcmV2ZXJzZSA9IHIxIDwgcjAsXG4gICAgICAgIHN0YXJ0ID0gcmV2ZXJzZSA/IHIxIDogcjAsXG4gICAgICAgIHN0b3AgPSByZXZlcnNlID8gcjAgOiByMTtcbiAgICBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgxLCBuIC0gcGFkZGluZ0lubmVyICsgcGFkZGluZ091dGVyICogMik7XG4gICAgaWYgKHJvdW5kKSBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICBzdGFydCArPSAoc3RvcCAtIHN0YXJ0IC0gc3RlcCAqIChuIC0gcGFkZGluZ0lubmVyKSkgKiBhbGlnbjtcbiAgICBiYW5kd2lkdGggPSBzdGVwICogKDEgLSBwYWRkaW5nSW5uZXIpO1xuICAgIGlmIChyb3VuZCkgc3RhcnQgPSBNYXRoLnJvdW5kKHN0YXJ0KSwgYmFuZHdpZHRoID0gTWF0aC5yb3VuZChiYW5kd2lkdGgpO1xuICAgIHZhciB2YWx1ZXMgPSBzZXF1ZW5jZShuKS5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gc3RhcnQgKyBzdGVwICogaTsgfSk7XG4gICAgcmV0dXJuIG9yZGluYWxSYW5nZShyZXZlcnNlID8gdmFsdWVzLnJldmVyc2UoKSA6IHZhbHVlcyk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoW3IwLCByMV0gPSBfLCByMCA9ICtyMCwgcjEgPSArcjEsIHJlc2NhbGUoKSkgOiBbcjAsIHIxXTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBbcjAsIHIxXSA9IF8sIHIwID0gK3IwLCByMSA9ICtyMSwgcm91bmQgPSB0cnVlLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuYmFuZHdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmR3aWR0aDtcbiAgfTtcblxuICBzY2FsZS5zdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHN0ZXA7XG4gIH07XG5cbiAgc2NhbGUucm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHJlc2NhbGUoKSkgOiByb3VuZDtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWluKDEsIHBhZGRpbmdPdXRlciA9ICtfKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5taW4oMSwgXyksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdPdXRlciA9ICtfLCByZXNjYWxlKCkpIDogcGFkZGluZ091dGVyO1xuICB9O1xuXG4gIHNjYWxlLmFsaWduID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFsaWduID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogYWxpZ247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kKGRvbWFpbigpLCBbcjAsIHIxXSlcbiAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAucGFkZGluZ0lubmVyKHBhZGRpbmdJbm5lcilcbiAgICAgICAgLnBhZGRpbmdPdXRlcihwYWRkaW5nT3V0ZXIpXG4gICAgICAgIC5hbGlnbihhbGlnbik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShyZXNjYWxlKCksIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHBvaW50aXNoKHNjYWxlKSB7XG4gIHZhciBjb3B5ID0gc2NhbGUuY29weTtcblxuICBzY2FsZS5wYWRkaW5nID0gc2NhbGUucGFkZGluZ091dGVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ0lubmVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ091dGVyO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcG9pbnRpc2goY29weSgpKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludCgpIHtcbiAgcmV0dXJuIHBvaW50aXNoKGJhbmQuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYWRkaW5nSW5uZXIoMSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgc3RhcnQgPSArc3RhcnQsIHN0b3AgPSArc3RvcCwgc3RlcCA9IChuID0gYXJndW1lbnRzLmxlbmd0aCkgPCAyID8gKHN0b3AgPSBzdGFydCwgc3RhcnQgPSAwLCAxKSA6IG4gPCAzID8gMSA6ICtzdGVwO1xuXG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCkpIHwgMCxcbiAgICAgIHJhbmdlID0gbmV3IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgcmFuZ2VbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihmKSB7XG4gIGxldCBkZWx0YSA9IGY7XG4gIGxldCBjb21wYXJlID0gZjtcblxuICBpZiAoZi5sZW5ndGggPT09IDEpIHtcbiAgICBkZWx0YSA9IChkLCB4KSA9PiBmKGQpIC0geDtcbiAgICBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihmKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlZnQoYSwgeCwgbG8sIGhpKSB7XG4gICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgY29uc3QgbWlkID0gKGxvICsgaGkpID4+PiAxO1xuICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtcbiAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgfVxuICAgIHJldHVybiBsbztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJpZ2h0KGEsIHgsIGxvLCBoaSkge1xuICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgIGNvbnN0IG1pZCA9IChsbyArIGhpKSA+Pj4gMTtcbiAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgIGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gbG87XG4gIH1cblxuICBmdW5jdGlvbiBjZW50ZXIoYSwgeCwgbG8sIGhpKSB7XG4gICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICBjb25zdCBpID0gbGVmdChhLCB4LCBsbywgaGkgLSAxKTtcbiAgICByZXR1cm4gaSA+IGxvICYmIGRlbHRhKGFbaSAtIDFdLCB4KSA+IC1kZWx0YShhW2ldLCB4KSA/IGkgLSAxIDogaTtcbiAgfVxuXG4gIHJldHVybiB7bGVmdCwgY2VudGVyLCByaWdodH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gKGQsIHgpID0+IGFzY2VuZGluZyhmKGQpLCB4KTtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nLmpzXCI7XG5pbXBvcnQgYmlzZWN0b3IgZnJvbSBcIi4vYmlzZWN0b3IuanNcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbmNvbnN0IGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG5leHBvcnQgY29uc3QgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG5leHBvcnQgY29uc3QgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuZXhwb3J0IGNvbnN0IGJpc2VjdENlbnRlciA9IGJpc2VjdG9yKG51bWJlcikuY2VudGVyO1xuZXhwb3J0IGRlZmF1bHQgYmlzZWN0UmlnaHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiogbnVtYmVycyh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgaWYgKHZhbHVlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgKHZhbHVlID0gK3ZhbHVlKSA+PSB2YWx1ZSkge1xuICAgICAgICB5aWVsZCB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhICogKDEgLSB0KSArIGIgKiB0KTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG51bWJlcih4KSB7XG4gIHJldHVybiAreDtcbn1cbiIsImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGUgYXMgaW50ZXJwb2xhdGVWYWx1ZSwgaW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUm91bmR9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhLCBiKSB7XG4gIHJldHVybiAoYiAtPSAoYSA9ICthKSlcbiAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgIDogY29uc3RhbnQoaXNOYU4oYikgPyBOYU4gOiAwLjUpO1xufVxuXG5mdW5jdGlvbiBjbGFtcGVyKGEsIGIpIHtcbiAgdmFyIHQ7XG4gIGlmIChhID4gYikgdCA9IGEsIGEgPSBiLCBiID0gdDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubWF4KGEsIE1hdGgubWluKGIsIHgpKTsgfTtcbn1cblxuLy8gbm9ybWFsaXplKGEsIGIpKHgpIHRha2VzIGEgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyIHQgaW4gWzAsMV0uXG4vLyBpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJhbmdlIHZhbHVlIHggaW4gW2EsYl0uXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgZDAgPSBkb21haW5bMF0sIGQxID0gZG9tYWluWzFdLCByMCA9IHJhbmdlWzBdLCByMSA9IHJhbmdlWzFdO1xuICBpZiAoZDEgPCBkMCkgZDAgPSBub3JtYWxpemUoZDEsIGQwKSwgcjAgPSBpbnRlcnBvbGF0ZShyMSwgcjApO1xuICBlbHNlIGQwID0gbm9ybWFsaXplKGQwLCBkMSksIHIwID0gaW50ZXJwb2xhdGUocjAsIHIxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHIwKGQwKHgpKTsgfTtcbn1cblxuZnVuY3Rpb24gcG9seW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkoaiksXG4gICAgICBpID0gLTE7XG5cbiAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gIGlmIChkb21haW5bal0gPCBkb21haW5bMF0pIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgZFtpXSA9IG5vcm1hbGl6ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xuICAgIHJbaV0gPSBpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGkgPSBiaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKVxuICAgICAgLnVua25vd24oc291cmNlLnVua25vd24oKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1lcigpIHtcbiAgdmFyIGRvbWFpbiA9IHVuaXQsXG4gICAgICByYW5nZSA9IHVuaXQsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlVmFsdWUsXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICB1bnRyYW5zZm9ybSxcbiAgICAgIHVua25vd24sXG4gICAgICBjbGFtcCA9IGlkZW50aXR5LFxuICAgICAgcGllY2V3aXNlLFxuICAgICAgb3V0cHV0LFxuICAgICAgaW5wdXQ7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgbiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCk7XG4gICAgaWYgKGNsYW1wICE9PSBpZGVudGl0eSkgY2xhbXAgPSBjbGFtcGVyKGRvbWFpblswXSwgZG9tYWluW24gLSAxXSk7XG4gICAgcGllY2V3aXNlID0gbiA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4geCA9PSBudWxsIHx8IGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgcmFuZ2UsIGludGVycG9sYXRlKSkpKHRyYW5zZm9ybShjbGFtcCh4KSkpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBjbGFtcCh1bnRyYW5zZm9ybSgoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4ubWFwKHRyYW5zZm9ybSksIGludGVycG9sYXRlTnVtYmVyKSkpKHkpKSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IEFycmF5LmZyb20oXywgbnVtYmVyKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBBcnJheS5mcm9tKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9IF8gPyB0cnVlIDogaWRlbnRpdHksIHJlc2NhbGUoKSkgOiBjbGFtcCAhPT0gaWRlbnRpdHk7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCwgdSkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHVudHJhbnNmb3JtID0gdTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250aW51b3VzKCkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoKShpZGVudGl0eSwgaWRlbnRpdHkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29uc3RhbnRzKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwidmFyIGUxMCA9IE1hdGguc3FydCg1MCksXG4gICAgZTUgPSBNYXRoLnNxcnQoMTApLFxuICAgIGUyID0gTWF0aC5zcXJ0KDIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHJldmVyc2UsXG4gICAgICBpID0gLTEsXG4gICAgICBuLFxuICAgICAgdGlja3MsXG4gICAgICBzdGVwO1xuXG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBpZiAoc3RhcnQgPT09IHN0b3AgJiYgY291bnQgPiAwKSByZXR1cm4gW3N0YXJ0XTtcbiAgaWYgKHJldmVyc2UgPSBzdG9wIDwgc3RhcnQpIG4gPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gbjtcbiAgaWYgKChzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICBpZiAoc3RlcCA+IDApIHtcbiAgICBsZXQgcjAgPSBNYXRoLnJvdW5kKHN0YXJ0IC8gc3RlcCksIHIxID0gTWF0aC5yb3VuZChzdG9wIC8gc3RlcCk7XG4gICAgaWYgKHIwICogc3RlcCA8IHN0YXJ0KSArK3IwO1xuICAgIGlmIChyMSAqIHN0ZXAgPiBzdG9wKSAtLXIxO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSByMSAtIHIwICsgMSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHIwICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0ZXAgPSAtc3RlcDtcbiAgICBsZXQgcjAgPSBNYXRoLnJvdW5kKHN0YXJ0ICogc3RlcCksIHIxID0gTWF0aC5yb3VuZChzdG9wICogc3RlcCk7XG4gICAgaWYgKHIwIC8gc3RlcCA8IHN0YXJ0KSArK3IwO1xuICAgIGlmIChyMSAvIHN0ZXAgPiBzdG9wKSAtLXIxO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSByMSAtIHIwICsgMSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHIwICsgaSkgLyBzdGVwO1xuICB9XG5cbiAgaWYgKHJldmVyc2UpIHRpY2tzLnJldmVyc2UoKTtcblxuICByZXR1cm4gdGlja3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcDAgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcbiAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgaWYgKGVycm9yID49IGUxMCkgc3RlcDEgKj0gMTA7XG4gIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgcmV0dXJuIHN0b3AgPCBzdGFydCA/IC1zdGVwMSA6IHN0ZXAxO1xufVxuIiwiLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLSggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcih7XG4gICAgZmlsbDogbWF0Y2hbMV0sXG4gICAgYWxpZ246IG1hdGNoWzJdLFxuICAgIHNpZ246IG1hdGNoWzNdLFxuICAgIHN5bWJvbDogbWF0Y2hbNF0sXG4gICAgemVybzogbWF0Y2hbNV0sXG4gICAgd2lkdGg6IG1hdGNoWzZdLFxuICAgIGNvbW1hOiBtYXRjaFs3XSxcbiAgICBwcmVjaXNpb246IG1hdGNoWzhdICYmIG1hdGNoWzhdLnNsaWNlKDEpLFxuICAgIHRyaW06IG1hdGNoWzldLFxuICAgIHR5cGU6IG1hdGNoWzEwXVxuICB9KTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZXhwb3J0IGZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgdGhpcy5maWxsID0gc3BlY2lmaWVyLmZpbGwgPT09IHVuZGVmaW5lZCA/IFwiIFwiIDogc3BlY2lmaWVyLmZpbGwgKyBcIlwiO1xuICB0aGlzLmFsaWduID0gc3BlY2lmaWVyLmFsaWduID09PSB1bmRlZmluZWQgPyBcIj5cIiA6IHNwZWNpZmllci5hbGlnbiArIFwiXCI7XG4gIHRoaXMuc2lnbiA9IHNwZWNpZmllci5zaWduID09PSB1bmRlZmluZWQgPyBcIi1cIiA6IHNwZWNpZmllci5zaWduICsgXCJcIjtcbiAgdGhpcy5zeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnN5bWJvbCArIFwiXCI7XG4gIHRoaXMuemVybyA9ICEhc3BlY2lmaWVyLnplcm87XG4gIHRoaXMud2lkdGggPSBzcGVjaWZpZXIud2lkdGggPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIud2lkdGg7XG4gIHRoaXMuY29tbWEgPSAhIXNwZWNpZmllci5jb21tYTtcbiAgdGhpcy5wcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLnByZWNpc2lvbjtcbiAgdGhpcy50cmltID0gISFzcGVjaWZpZXIudHJpbTtcbiAgdGhpcy50eXBlID0gc3BlY2lmaWVyLnR5cGUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIudHlwZSArIFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gTWF0aC5hYnMoeCA9IE1hdGgucm91bmQoeCkpID49IDFlMjFcbiAgICAgID8geC50b0xvY2FsZVN0cmluZyhcImVuXCIpLnJlcGxhY2UoLywvZywgXCJcIilcbiAgICAgIDogeC50b1N0cmluZygxMCk7XG59XG5cbi8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbi8vIHNpZ25pZmljYW50IGRpZ2l0cyBwLCB3aGVyZSB4IGlzIHBvc2l0aXZlIGFuZCBwIGlzIGluIFsxLCAyMV0gb3IgdW5kZWZpbmVkLlxuLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWxQYXJ0cygxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsUGFydHMoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpXG4gICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5pbXBvcnQgZm9ybWF0UHJlZml4QXV0byBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgZm9ybWF0Um91bmRlZCBmcm9tIFwiLi9mb3JtYXRSb3VuZGVkLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCIlXCI6ICh4LCBwKSA9PiAoeCAqIDEwMCkudG9GaXhlZChwKSxcbiAgXCJiXCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpLFxuICBcImNcIjogKHgpID0+IHggKyBcIlwiLFxuICBcImRcIjogZm9ybWF0RGVjaW1hbCxcbiAgXCJlXCI6ICh4LCBwKSA9PiB4LnRvRXhwb25lbnRpYWwocCksXG4gIFwiZlwiOiAoeCwgcCkgPT4geC50b0ZpeGVkKHApLFxuICBcImdcIjogKHgsIHApID0+IHgudG9QcmVjaXNpb24ocCksXG4gIFwib1wiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZyg4KSxcbiAgXCJwXCI6ICh4LCBwKSA9PiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApLFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSxcbiAgXCJ4XCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcbmltcG9ydCBmb3JtYXRHcm91cCBmcm9tIFwiLi9mb3JtYXRHcm91cC5qc1wiO1xuaW1wb3J0IGZvcm1hdE51bWVyYWxzIGZyb20gXCIuL2Zvcm1hdE51bWVyYWxzLmpzXCI7XG5pbXBvcnQgZm9ybWF0U3BlY2lmaWVyIGZyb20gXCIuL2Zvcm1hdFNwZWNpZmllci5qc1wiO1xuaW1wb3J0IGZvcm1hdFRyaW0gZnJvbSBcIi4vZm9ybWF0VHJpbS5qc1wiO1xuaW1wb3J0IGZvcm1hdFR5cGVzIGZyb20gXCIuL2Zvcm1hdFR5cGVzLmpzXCI7XG5pbXBvcnQge3ByZWZpeEV4cG9uZW50fSBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcblxudmFyIG1hcCA9IEFycmF5LnByb3RvdHlwZS5tYXAsXG4gICAgcHJlZml4ZXMgPSBbXCJ5XCIsXCJ6XCIsXCJhXCIsXCJmXCIsXCJwXCIsXCJuXCIsXCLCtVwiLFwibVwiLFwiXCIsXCJrXCIsXCJNXCIsXCJHXCIsXCJUXCIsXCJQXCIsXCJFXCIsXCJaXCIsXCJZXCJdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nID09PSB1bmRlZmluZWQgfHwgbG9jYWxlLnRob3VzYW5kcyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXRHcm91cChtYXAuY2FsbChsb2NhbGUuZ3JvdXBpbmcsIE51bWJlciksIGxvY2FsZS50aG91c2FuZHMgKyBcIlwiKSxcbiAgICAgIGN1cnJlbmN5UHJlZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzBdICsgXCJcIixcbiAgICAgIGN1cnJlbmN5U3VmZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzFdICsgXCJcIixcbiAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCA9PT0gdW5kZWZpbmVkID8gXCIuXCIgOiBsb2NhbGUuZGVjaW1hbCArIFwiXCIsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXROdW1lcmFscyhtYXAuY2FsbChsb2NhbGUubnVtZXJhbHMsIFN0cmluZykpLFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50ID09PSB1bmRlZmluZWQgPyBcIiVcIiA6IGxvY2FsZS5wZXJjZW50ICsgXCJcIixcbiAgICAgIG1pbnVzID0gbG9jYWxlLm1pbnVzID09PSB1bmRlZmluZWQgPyBcIuKIklwiIDogbG9jYWxlLm1pbnVzICsgXCJcIixcbiAgICAgIG5hbiA9IGxvY2FsZS5uYW4gPT09IHVuZGVmaW5lZCA/IFwiTmFOXCIgOiBsb2NhbGUubmFuICsgXCJcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lQcmVmaXggOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVN1ZmZpeCA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIERldGVybWluZSB0aGUgc2lnbi4gLTAgaXMgbm90IGxlc3MgdGhhbiAwLCBidXQgMSAvIC0wIGlzIVxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMCB8fCAxIC8gdmFsdWUgPCAwO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFsdWUgPSBpc05hTih2YWx1ZSkgPyBuYW4gOiBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gYWZ0ZXIgZm9ybWF0dGluZywgYW5kIG5vIGV4cGxpY2l0IHBvc2l0aXZlIHNpZ24gaXMgcmVxdWVzdGVkLCBoaWRlIHRoZSBzaWduLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDAgJiYgc2lnbiAhPT0gXCIrXCIpIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBtaW51cykgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZS5qc1wiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciBmb3JtYXQ7XG5leHBvcnQgdmFyIGZvcm1hdFByZWZpeDtcblxuZGVmYXVsdExvY2FsZSh7XG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCB7dGlja3MsIHRpY2tJbmNyZW1lbnR9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5fSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICB2YXIgaTAgPSAwO1xuICAgIHZhciBpMSA9IGQubGVuZ3RoIC0gMTtcbiAgICB2YXIgc3RhcnQgPSBkW2kwXTtcbiAgICB2YXIgc3RvcCA9IGRbaTFdO1xuICAgIHZhciBwcmVzdGVwO1xuICAgIHZhciBzdGVwO1xuICAgIHZhciBtYXhJdGVyID0gMTA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG4gICAgXG4gICAgd2hpbGUgKG1heEl0ZXItLSA+IDApIHtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgICBpZiAoc3RlcCA9PT0gcHJlc3RlcCkge1xuICAgICAgICBkW2kwXSA9IHN0YXJ0XG4gICAgICAgIGRbaTFdID0gc3RvcFxuICAgICAgICByZXR1cm4gZG9tYWluKGQpO1xuICAgICAgfSBlbHNlIGlmIChzdGVwID4gMCkge1xuICAgICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHByZXN0ZXAgPSBzdGVwO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cygpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aWNrRm9ybWF0KHN0YXJ0LCBzdG9wLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQgY29udGludW91cyBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhci5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxuZnVuY3Rpb24gc3F1YXJlKHgpIHtcbiAgcmV0dXJuIE1hdGguc2lnbih4KSAqIHggKiB4O1xufVxuXG5mdW5jdGlvbiB1bnNxdWFyZSh4KSB7XG4gIHJldHVybiBNYXRoLnNpZ24oeCkgKiBNYXRoLnNxcnQoTWF0aC5hYnMoeCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYWRpYWwoKSB7XG4gIHZhciBzcXVhcmVkID0gY29udGludW91cygpLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICByb3VuZCA9IGZhbHNlLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgdmFyIHkgPSB1bnNxdWFyZShzcXVhcmVkKHgpKTtcbiAgICByZXR1cm4gaXNOYU4oeSkgPyB1bmtub3duIDogcm91bmQgPyBNYXRoLnJvdW5kKHkpIDogeTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gc3F1YXJlZC5pbnZlcnQoc3F1YXJlKHkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3F1YXJlZC5kb21haW4oXyksIHNjYWxlKSA6IHNxdWFyZWQuZG9tYWluKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3F1YXJlZC5yYW5nZSgocmFuZ2UgPSBBcnJheS5mcm9tKF8sIG51bWJlcikpLm1hcChzcXVhcmUpKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBzY2FsZS5yYW5nZShfKS5yb3VuZCh0cnVlKTtcbiAgfTtcblxuICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEhXywgc2NhbGUpIDogcm91bmQ7XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3F1YXJlZC5jbGFtcChfKSwgc2NhbGUpIDogc3F1YXJlZC5jbGFtcCgpO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiByYWRpYWwoc3F1YXJlZC5kb21haW4oKSwgcmFuZ2UpXG4gICAgICAgIC5yb3VuZChyb3VuZClcbiAgICAgICAgLmNsYW1wKHNxdWFyZWQuY2xhbXAoKSlcbiAgICAgICAgLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZ3JvdXBpbmcsIHRob3VzYW5kcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIHdpZHRoKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHQgPSBbXSxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgbGVuZ3RoID0gMDtcblxuICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcbiAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4odGhvdXNhbmRzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG51bWVyYWxzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bMC05XS9nLCBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gbnVtZXJhbHNbK2ldO1xuICAgIH0pO1xuICB9O1xufVxuIiwiLy8gVHJpbXMgaW5zaWduaWZpY2FudCB6ZXJvcywgZS5nLiwgcmVwbGFjZXMgMS4yMDAwayB3aXRoIDEuMmsuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzKSB7XG4gIG91dDogZm9yICh2YXIgbiA9IHMubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHNbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogaWYgKCErc1tpXSkgYnJlYWsgb3V0OyBpZiAoaTAgPiAwKSBpMCA9IDA7IGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTAgPiAwID8gcy5zbGljZSgwLCBpMCkgKyBzLnNsaWNlKGkxICsgMSkgOiBzO1xufVxuIiwiY29uc3QgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBlcHNpbG9uID0gMWUtNixcbiAgICB0YXVFcHNpbG9uID0gdGF1IC0gZXBzaWxvbjtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpO1xuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3IsIGNjdyA9ICEhY2N3O1xuICAgIHZhciBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSArIHRhdTtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSkpICsgXCIsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSkpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKSk7XG4gICAgfVxuICB9LFxuICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpICsgXCJoXCIgKyAoK3cpICsgXCJ2XCIgKyAoK2gpICsgXCJoXCIgKyAoLXcpICsgXCJaXCI7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwYXRoO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24gY29uc3RhbnQoKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgdmFyIGFicyA9IE1hdGguYWJzO1xuZXhwb3J0IHZhciBhdGFuMiA9IE1hdGguYXRhbjI7XG5leHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCB2YXIgbWluID0gTWF0aC5taW47XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG5leHBvcnQgdmFyIGVwc2lsb24gPSAxZS0xMjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHRhdSA9IDIgKiBwaTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjb3MoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkgOiBNYXRoLmFjb3MoeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIHggPj0gMSA/IGhhbGZQaSA6IHggPD0gLTEgPyAtaGFsZlBpIDogTWF0aC5hc2luKHgpO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQge2FicywgYWNvcywgYXNpbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgaGFsZlBpLCBtYXgsIG1pbiwgcGksIHNpbiwgc3FydCwgdGF1fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGFyY0lubmVyUmFkaXVzKGQpIHtcbiAgcmV0dXJuIGQuaW5uZXJSYWRpdXM7XG59XG5cbmZ1bmN0aW9uIGFyY091dGVyUmFkaXVzKGQpIHtcbiAgcmV0dXJuIGQub3V0ZXJSYWRpdXM7XG59XG5cbmZ1bmN0aW9uIGFyY1N0YXJ0QW5nbGUoZCkge1xuICByZXR1cm4gZC5zdGFydEFuZ2xlO1xufVxuXG5mdW5jdGlvbiBhcmNFbmRBbmdsZShkKSB7XG4gIHJldHVybiBkLmVuZEFuZ2xlO1xufVxuXG5mdW5jdGlvbiBhcmNQYWRBbmdsZShkKSB7XG4gIHJldHVybiBkICYmIGQucGFkQW5nbGU7IC8vIE5vdGU6IG9wdGlvbmFsIVxufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3QoeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKSB7XG4gIHZhciB4MTAgPSB4MSAtIHgwLCB5MTAgPSB5MSAtIHkwLFxuICAgICAgeDMyID0geDMgLSB4MiwgeTMyID0geTMgLSB5MixcbiAgICAgIHQgPSB5MzIgKiB4MTAgLSB4MzIgKiB5MTA7XG4gIGlmICh0ICogdCA8IGVwc2lsb24pIHJldHVybjtcbiAgdCA9ICh4MzIgKiAoeTAgLSB5MikgLSB5MzIgKiAoeDAgLSB4MikpIC8gdDtcbiAgcmV0dXJuIFt4MCArIHQgKiB4MTAsIHkwICsgdCAqIHkxMF07XG59XG5cbi8vIENvbXB1dGUgcGVycGVuZGljdWxhciBvZmZzZXQgbGluZSBvZiBsZW5ndGggcmMuXG4vLyBodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0NpcmNsZS1MaW5lSW50ZXJzZWN0aW9uLmh0bWxcbmZ1bmN0aW9uIGNvcm5lclRhbmdlbnRzKHgwLCB5MCwgeDEsIHkxLCByMSwgcmMsIGN3KSB7XG4gIHZhciB4MDEgPSB4MCAtIHgxLFxuICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgIGxvID0gKGN3ID8gcmMgOiAtcmMpIC8gc3FydCh4MDEgKiB4MDEgKyB5MDEgKiB5MDEpLFxuICAgICAgb3ggPSBsbyAqIHkwMSxcbiAgICAgIG95ID0gLWxvICogeDAxLFxuICAgICAgeDExID0geDAgKyBveCxcbiAgICAgIHkxMSA9IHkwICsgb3ksXG4gICAgICB4MTAgPSB4MSArIG94LFxuICAgICAgeTEwID0geTEgKyBveSxcbiAgICAgIHgwMCA9ICh4MTEgKyB4MTApIC8gMixcbiAgICAgIHkwMCA9ICh5MTEgKyB5MTApIC8gMixcbiAgICAgIGR4ID0geDEwIC0geDExLFxuICAgICAgZHkgPSB5MTAgLSB5MTEsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgciA9IHIxIC0gcmMsXG4gICAgICBEID0geDExICogeTEwIC0geDEwICogeTExLFxuICAgICAgZCA9IChkeSA8IDAgPyAtMSA6IDEpICogc3FydChtYXgoMCwgciAqIHIgKiBkMiAtIEQgKiBEKSksXG4gICAgICBjeDAgPSAoRCAqIGR5IC0gZHggKiBkKSAvIGQyLFxuICAgICAgY3kwID0gKC1EICogZHggLSBkeSAqIGQpIC8gZDIsXG4gICAgICBjeDEgPSAoRCAqIGR5ICsgZHggKiBkKSAvIGQyLFxuICAgICAgY3kxID0gKC1EICogZHggKyBkeSAqIGQpIC8gZDIsXG4gICAgICBkeDAgPSBjeDAgLSB4MDAsXG4gICAgICBkeTAgPSBjeTAgLSB5MDAsXG4gICAgICBkeDEgPSBjeDEgLSB4MDAsXG4gICAgICBkeTEgPSBjeTEgLSB5MDA7XG5cbiAgLy8gUGljayB0aGUgY2xvc2VyIG9mIHRoZSB0d28gaW50ZXJzZWN0aW9uIHBvaW50cy5cbiAgLy8gVE9ETyBJcyB0aGVyZSBhIGZhc3RlciB3YXkgdG8gZGV0ZXJtaW5lIHdoaWNoIGludGVyc2VjdGlvbiB0byB1c2U/XG4gIGlmIChkeDAgKiBkeDAgKyBkeTAgKiBkeTAgPiBkeDEgKiBkeDEgKyBkeTEgKiBkeTEpIGN4MCA9IGN4MSwgY3kwID0gY3kxO1xuXG4gIHJldHVybiB7XG4gICAgY3g6IGN4MCxcbiAgICBjeTogY3kwLFxuICAgIHgwMTogLW94LFxuICAgIHkwMTogLW95LFxuICAgIHgxMTogY3gwICogKHIxIC8gciAtIDEpLFxuICAgIHkxMTogY3kwICogKHIxIC8gciAtIDEpXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgaW5uZXJSYWRpdXMgPSBhcmNJbm5lclJhZGl1cyxcbiAgICAgIG91dGVyUmFkaXVzID0gYXJjT3V0ZXJSYWRpdXMsXG4gICAgICBjb3JuZXJSYWRpdXMgPSBjb25zdGFudCgwKSxcbiAgICAgIHBhZFJhZGl1cyA9IG51bGwsXG4gICAgICBzdGFydEFuZ2xlID0gYXJjU3RhcnRBbmdsZSxcbiAgICAgIGVuZEFuZ2xlID0gYXJjRW5kQW5nbGUsXG4gICAgICBwYWRBbmdsZSA9IGFyY1BhZEFuZ2xlLFxuICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gYXJjKCkge1xuICAgIHZhciBidWZmZXIsXG4gICAgICAgIHIsXG4gICAgICAgIHIwID0gK2lubmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHIxID0gK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpLFxuICAgICAgICBhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmUGksXG4gICAgICAgIGRhID0gYWJzKGExIC0gYTApLFxuICAgICAgICBjdyA9IGExID4gYTA7XG5cbiAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG5cbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgb3V0ZXIgcmFkaXVzIGlzIGFsd2F5cyBsYXJnZXIgdGhhbiB0aGUgaW5uZXIgcmFkaXVzLlxuICAgIGlmIChyMSA8IHIwKSByID0gcjEsIHIxID0gcjAsIHIwID0gcjtcblxuICAgIC8vIElzIGl0IGEgcG9pbnQ/XG4gICAgaWYgKCEocjEgPiBlcHNpbG9uKSkgY29udGV4dC5tb3ZlVG8oMCwgMCk7XG5cbiAgICAvLyBPciBpcyBpdCBhIGNpcmNsZSBvciBhbm51bHVzP1xuICAgIGVsc2UgaWYgKGRhID4gdGF1IC0gZXBzaWxvbikge1xuICAgICAgY29udGV4dC5tb3ZlVG8ocjEgKiBjb3MoYTApLCByMSAqIHNpbihhMCkpO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGEwLCBhMSwgIWN3KTtcbiAgICAgIGlmIChyMCA+IGVwc2lsb24pIHtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8ocjAgKiBjb3MoYTEpLCByMCAqIHNpbihhMSkpO1xuICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEsIGEwLCBjdyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT3IgaXMgaXQgYSBjaXJjdWxhciBvciBhbm51bGFyIHNlY3Rvcj9cbiAgICBlbHNlIHtcbiAgICAgIHZhciBhMDEgPSBhMCxcbiAgICAgICAgICBhMTEgPSBhMSxcbiAgICAgICAgICBhMDAgPSBhMCxcbiAgICAgICAgICBhMTAgPSBhMSxcbiAgICAgICAgICBkYTAgPSBkYSxcbiAgICAgICAgICBkYTEgPSBkYSxcbiAgICAgICAgICBhcCA9IHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLyAyLFxuICAgICAgICAgIHJwID0gKGFwID4gZXBzaWxvbikgJiYgKHBhZFJhZGl1cyA/ICtwYWRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNxcnQocjAgKiByMCArIHIxICogcjEpKSxcbiAgICAgICAgICByYyA9IG1pbihhYnMocjEgLSByMCkgLyAyLCArY29ybmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICAgIHJjMCA9IHJjLFxuICAgICAgICAgIHJjMSA9IHJjLFxuICAgICAgICAgIHQwLFxuICAgICAgICAgIHQxO1xuXG4gICAgICAvLyBBcHBseSBwYWRkaW5nPyBOb3RlIHRoYXQgc2luY2UgcjEg4omlIHIwLCBkYTEg4omlIGRhMC5cbiAgICAgIGlmIChycCA+IGVwc2lsb24pIHtcbiAgICAgICAgdmFyIHAwID0gYXNpbihycCAvIHIwICogc2luKGFwKSksXG4gICAgICAgICAgICBwMSA9IGFzaW4ocnAgLyByMSAqIHNpbihhcCkpO1xuICAgICAgICBpZiAoKGRhMCAtPSBwMCAqIDIpID4gZXBzaWxvbikgcDAgKj0gKGN3ID8gMSA6IC0xKSwgYTAwICs9IHAwLCBhMTAgLT0gcDA7XG4gICAgICAgIGVsc2UgZGEwID0gMCwgYTAwID0gYTEwID0gKGEwICsgYTEpIC8gMjtcbiAgICAgICAgaWYgKChkYTEgLT0gcDEgKiAyKSA+IGVwc2lsb24pIHAxICo9IChjdyA/IDEgOiAtMSksIGEwMSArPSBwMSwgYTExIC09IHAxO1xuICAgICAgICBlbHNlIGRhMSA9IDAsIGEwMSA9IGExMSA9IChhMCArIGExKSAvIDI7XG4gICAgICB9XG5cbiAgICAgIHZhciB4MDEgPSByMSAqIGNvcyhhMDEpLFxuICAgICAgICAgIHkwMSA9IHIxICogc2luKGEwMSksXG4gICAgICAgICAgeDEwID0gcjAgKiBjb3MoYTEwKSxcbiAgICAgICAgICB5MTAgPSByMCAqIHNpbihhMTApO1xuXG4gICAgICAvLyBBcHBseSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBpZiAocmMgPiBlcHNpbG9uKSB7XG4gICAgICAgIHZhciB4MTEgPSByMSAqIGNvcyhhMTEpLFxuICAgICAgICAgICAgeTExID0gcjEgKiBzaW4oYTExKSxcbiAgICAgICAgICAgIHgwMCA9IHIwICogY29zKGEwMCksXG4gICAgICAgICAgICB5MDAgPSByMCAqIHNpbihhMDApLFxuICAgICAgICAgICAgb2M7XG5cbiAgICAgICAgLy8gUmVzdHJpY3QgdGhlIGNvcm5lciByYWRpdXMgYWNjb3JkaW5nIHRvIHRoZSBzZWN0b3IgYW5nbGUuXG4gICAgICAgIGlmIChkYSA8IHBpICYmIChvYyA9IGludGVyc2VjdCh4MDEsIHkwMSwgeDAwLCB5MDAsIHgxMSwgeTExLCB4MTAsIHkxMCkpKSB7XG4gICAgICAgICAgdmFyIGF4ID0geDAxIC0gb2NbMF0sXG4gICAgICAgICAgICAgIGF5ID0geTAxIC0gb2NbMV0sXG4gICAgICAgICAgICAgIGJ4ID0geDExIC0gb2NbMF0sXG4gICAgICAgICAgICAgIGJ5ID0geTExIC0gb2NbMV0sXG4gICAgICAgICAgICAgIGtjID0gMSAvIHNpbihhY29zKChheCAqIGJ4ICsgYXkgKiBieSkgLyAoc3FydChheCAqIGF4ICsgYXkgKiBheSkgKiBzcXJ0KGJ4ICogYnggKyBieSAqIGJ5KSkpIC8gMiksXG4gICAgICAgICAgICAgIGxjID0gc3FydChvY1swXSAqIG9jWzBdICsgb2NbMV0gKiBvY1sxXSk7XG4gICAgICAgICAgcmMwID0gbWluKHJjLCAocjAgLSBsYykgLyAoa2MgLSAxKSk7XG4gICAgICAgICAgcmMxID0gbWluKHJjLCAocjEgLSBsYykgLyAoa2MgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSXMgdGhlIHNlY3RvciBjb2xsYXBzZWQgdG8gYSBsaW5lP1xuICAgICAgaWYgKCEoZGExID4gZXBzaWxvbikpIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKTtcblxuICAgICAgLy8gRG9lcyB0aGUgc2VjdG9y4oCZcyBvdXRlciByaW5nIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMxID4gZXBzaWxvbikge1xuICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgwMCwgeTAwLCB4MDEsIHkwMSwgcjEsIHJjMSwgY3cpO1xuICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgxMSwgeTExLCB4MTAsIHkxMCwgcjEsIHJjMSwgY3cpO1xuXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHQwLmN4ICsgdDAueDAxLCB0MC5jeSArIHQwLnkwMSk7XG5cbiAgICAgICAgLy8gSGF2ZSB0aGUgY29ybmVycyBtZXJnZWQ/XG4gICAgICAgIGlmIChyYzEgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzEsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMSwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIGF0YW4yKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzEsIGF0YW4yKHQxLnkxMSwgdDEueDExKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9yIGlzIHRoZSBvdXRlciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICBlbHNlIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKSwgY29udGV4dC5hcmMoMCwgMCwgcjEsIGEwMSwgYTExLCAhY3cpO1xuXG4gICAgICAvLyBJcyB0aGVyZSBubyBpbm5lciByaW5nLCBhbmQgaXTigJlzIGEgY2lyY3VsYXIgc2VjdG9yP1xuICAgICAgLy8gT3IgcGVyaGFwcyBpdOKAmXMgYW4gYW5udWxhciBzZWN0b3IgY29sbGFwc2VkIGR1ZSB0byBwYWRkaW5nP1xuICAgICAgaWYgKCEocjAgPiBlcHNpbG9uKSB8fCAhKGRhMCA+IGVwc2lsb24pKSBjb250ZXh0LmxpbmVUbyh4MTAsIHkxMCk7XG5cbiAgICAgIC8vIERvZXMgdGhlIHNlY3RvcuKAmXMgaW5uZXIgcmluZyAob3IgcG9pbnQpIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMwID4gZXBzaWxvbikge1xuICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgxMCwgeTEwLCB4MTEsIHkxMSwgcjAsIC1yYzAsIGN3KTtcbiAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MDEsIHkwMSwgeDAwLCB5MDAsIHIwLCAtcmMwLCBjdyk7XG5cbiAgICAgICAgY29udGV4dC5saW5lVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAvLyBIYXZlIHRoZSBjb3JuZXJzIG1lcmdlZD9cbiAgICAgICAgaWYgKHJjMCA8IHJjKSBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQwLnkxMSwgdDAueDExKSwgIWN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgYXRhbjIodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMwLCBhdGFuMih0MS55MTEsIHQxLngxMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyB0aGUgaW5uZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgZWxzZSBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEwLCBhMDAsIGN3KTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgciA9ICgraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIsXG4gICAgICAgIGEgPSAoK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIgLSBwaSAvIDI7XG4gICAgcmV0dXJuIFtjb3MoYSkgKiByLCBzaW4oYSkgKiByXTtcbiAgfTtcblxuICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW5uZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGlubmVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5vdXRlclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvdXRlclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogb3V0ZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLmNvcm5lclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb3JuZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGNvcm5lclJhZGl1cztcbiAgfTtcblxuICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZFJhZGl1cyA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IHBhZFJhZGl1cztcbiAgfTtcblxuICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogZW5kQW5nbGU7XG4gIH07XG5cbiAgYXJjLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBwYWRBbmdsZTtcbiAgfTtcblxuICBhcmMuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgYXJjKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGFyYztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICByZXR1cm4gZDtcbn1cbiIsImltcG9ydCBhcnJheSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgZGVzY2VuZGluZyBmcm9tIFwiLi9kZXNjZW5kaW5nLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcbmltcG9ydCB7dGF1fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSBpZGVudGl0eSxcbiAgICAgIHNvcnRWYWx1ZXMgPSBkZXNjZW5kaW5nLFxuICAgICAgc29ydCA9IG51bGwsXG4gICAgICBzdGFydEFuZ2xlID0gY29uc3RhbnQoMCksXG4gICAgICBlbmRBbmdsZSA9IGNvbnN0YW50KHRhdSksXG4gICAgICBwYWRBbmdsZSA9IGNvbnN0YW50KDApO1xuXG4gIGZ1bmN0aW9uIHBpZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSAoZGF0YSA9IGFycmF5KGRhdGEpKS5sZW5ndGgsXG4gICAgICAgIGosXG4gICAgICAgIGssXG4gICAgICAgIHN1bSA9IDAsXG4gICAgICAgIGluZGV4ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBhcmNzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBhMCA9ICtzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIGRhID0gTWF0aC5taW4odGF1LCBNYXRoLm1heCgtdGF1LCBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gYTApKSxcbiAgICAgICAgYTEsXG4gICAgICAgIHAgPSBNYXRoLm1pbihNYXRoLmFicyhkYSkgLyBuLCBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSxcbiAgICAgICAgcGEgPSBwICogKGRhIDwgMCA/IC0xIDogMSksXG4gICAgICAgIHY7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHYgPSBhcmNzW2luZGV4W2ldID0gaV0gPSArdmFsdWUoZGF0YVtpXSwgaSwgZGF0YSkpID4gMCkge1xuICAgICAgICBzdW0gKz0gdjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPcHRpb25hbGx5IHNvcnQgdGhlIGFyY3MgYnkgcHJldmlvdXNseS1jb21wdXRlZCB2YWx1ZXMgb3IgYnkgZGF0YS5cbiAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIHNvcnRWYWx1ZXMoYXJjc1tpXSwgYXJjc1tqXSk7IH0pO1xuICAgIGVsc2UgaWYgKHNvcnQgIT0gbnVsbCkgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBzb3J0KGRhdGFbaV0sIGRhdGFbal0pOyB9KTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGFyY3MhIFRoZXkgYXJlIHN0b3JlZCBpbiB0aGUgb3JpZ2luYWwgZGF0YSdzIG9yZGVyLlxuICAgIGZvciAoaSA9IDAsIGsgPSBzdW0gPyAoZGEgLSBuICogcGEpIC8gc3VtIDogMDsgaSA8IG47ICsraSwgYTAgPSBhMSkge1xuICAgICAgaiA9IGluZGV4W2ldLCB2ID0gYXJjc1tqXSwgYTEgPSBhMCArICh2ID4gMCA/IHYgKiBrIDogMCkgKyBwYSwgYXJjc1tqXSA9IHtcbiAgICAgICAgZGF0YTogZGF0YVtqXSxcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHZhbHVlOiB2LFxuICAgICAgICBzdGFydEFuZ2xlOiBhMCxcbiAgICAgICAgZW5kQW5nbGU6IGExLFxuICAgICAgICBwYWRBbmdsZTogcFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJjcztcbiAgfVxuXG4gIHBpZS52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogdmFsdWU7XG4gIH07XG5cbiAgcGllLnNvcnRWYWx1ZXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydFZhbHVlcyA9IF8sIHNvcnQgPSBudWxsLCBwaWUpIDogc29ydFZhbHVlcztcbiAgfTtcblxuICBwaWUuc29ydCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0ID0gXywgc29ydFZhbHVlcyA9IG51bGwsIHBpZSkgOiBzb3J0O1xuICB9O1xuXG4gIHBpZS5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IHN0YXJ0QW5nbGU7XG4gIH07XG5cbiAgcGllLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGVuZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiBlbmRBbmdsZTtcbiAgfTtcblxuICBwaWUucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIHJldHVybiBwaWU7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJiBcImxlbmd0aFwiIGluIHhcbiAgICA/IHggLy8gQXJyYXksIFR5cGVkQXJyYXksIE5vZGVMaXN0LCBhcnJheS1saWtlXG4gICAgOiBBcnJheS5mcm9tKHgpOyAvLyBNYXAsIFNldCwgaXRlcmFibGUsIHN0cmluZywgb3IgYW55dGhpbmcgZWxzZVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIFRyYW5zZm9ybShrLCB4LCB5KSB7XG4gIHRoaXMuayA9IGs7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMueSA9IHk7XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm0sXG4gIHNjYWxlOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIGsgPT09IDEgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmsgKiBrLCB0aGlzLngsIHRoaXMueSk7XG4gIH0sXG4gIHRyYW5zbGF0ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB4ID09PSAwICYgeSA9PT0gMCA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuaywgdGhpcy54ICsgdGhpcy5rICogeCwgdGhpcy55ICsgdGhpcy5rICogeSk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBbcG9pbnRbMF0gKiB0aGlzLmsgKyB0aGlzLngsIHBvaW50WzFdICogdGhpcy5rICsgdGhpcy55XTtcbiAgfSxcbiAgYXBwbHlYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHggKiB0aGlzLmsgKyB0aGlzLng7XG4gIH0sXG4gIGFwcGx5WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5ICogdGhpcy5rICsgdGhpcy55O1xuICB9LFxuICBpbnZlcnQ6IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIFsobG9jYXRpb25bMF0gLSB0aGlzLngpIC8gdGhpcy5rLCAobG9jYXRpb25bMV0gLSB0aGlzLnkpIC8gdGhpcy5rXTtcbiAgfSxcbiAgaW52ZXJ0WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAoeCAtIHRoaXMueCkgLyB0aGlzLms7XG4gIH0sXG4gIGludmVydFk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gKHkgLSB0aGlzLnkpIC8gdGhpcy5rO1xuICB9LFxuICByZXNjYWxlWDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4LmNvcHkoKS5kb21haW4oeC5yYW5nZSgpLm1hcCh0aGlzLmludmVydFgsIHRoaXMpLm1hcCh4LmludmVydCwgeCkpO1xuICB9LFxuICByZXNjYWxlWTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5LmNvcHkoKS5kb21haW4oeS5yYW5nZSgpLm1hcCh0aGlzLmludmVydFksIHRoaXMpLm1hcCh5LmludmVydCwgeSkpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdGhpcy54ICsgXCIsXCIgKyB0aGlzLnkgKyBcIikgc2NhbGUoXCIgKyB0aGlzLmsgKyBcIilcIjtcbiAgfVxufTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IG5ldyBUcmFuc2Zvcm0oMSwgMCwgMCk7XG5cbnRyYW5zZm9ybS5wcm90b3R5cGUgPSBUcmFuc2Zvcm0ucHJvdG90eXBlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm0obm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX196b29tKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuIGlkZW50aXR5O1xuICByZXR1cm4gbm9kZS5fX3pvb207XG59XG4iLCJcbmltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuXG5cbmV4cG9ydCBjb25zdCBjb3VudHJ5X2lkX3NlbGVjdGVkOiBzdHJpbmcgPSBcIkFMQlwiO1xuZXhwb3J0IGNvbnN0IHVybDogc3RyaW5nID0gXCJkYXRhL2RhdGEuanNvblwiO1xuZXhwb3J0IGNvbnN0IHRfZHVyYXRpb246IG51bWJlciA9IDEwMDA7XG5jb25zdCB0X2R1cmF0aW9uX3Rvb2x0aXBfbW91c2VvdmVyOiBudW1iZXIgPSAzMDA7XG5jb25zdCB0X2R1cmF0aW9uX3Rvb2x0aXBfbW91c2VvdXQ6IG51bWJlciA9IDEwMDtcblxuZXhwb3J0IGNvbnN0IE1BUkdJTjoge1xuICBUT1A6IG51bWJlcjtcbiAgUklHSFQ6IG51bWJlcjtcbiAgQk9UVE9NOiBudW1iZXI7XG4gIExFRlQ6IG51bWJlcjtcbn0gPSB7VE9QOiAwLCBSSUdIVDogMCwgQk9UVE9NOiAwLCBMRUZUOiAwfTtcbmV4cG9ydCBjb25zdCBXSURUSDogbnVtYmVyID0gNzIwIC0gTUFSR0lOLkxFRlQgLSBNQVJHSU4uUklHSFQ7XG5leHBvcnQgY29uc3QgSEVJR0hUOiBudW1iZXIgPSA3MjAgLSBNQVJHSU4uVE9QIC0gTUFSR0lOLkJPVFRPTTtcbmV4cG9ydCBjb25zdCBSQURJVVNfMDI6IG51bWJlciA9IDE4MDtcbmV4cG9ydCBjb25zdCBSQURJVVNfMDM6IG51bWJlciA9IFJBRElVU18wMiArIDEwMDtcbmV4cG9ydCBjb25zdCBSQURJVVNfMDU6IG51bWJlciA9IE1hdGgubWluKFdJRFRILCBIRUlHSFQpIC8gMjsgLy8gdGhlIFJBRElVU18wNSBnb2VzIGZyb20gdGhlIG1pZGRsZSBvZiB0aGUgU1ZHIGFyZWEgdG8gdGhlIGJvcmRlclxuZXhwb3J0IGNvbnN0IFJBRElVU19HQVA6IG51bWJlciA9IDI7XG5leHBvcnQgY29uc3QgQk9VTkRBUllfR0FQOiBudW1iZXIgPSAyMDtcblxuXG5leHBvcnQgY29uc3Qgc3ZnOiBkMy5TZWxlY3Rpb248U1ZHR0VsZW1lbnQsIHVua25vd24sIEhUTUxFbGVtZW50LCBhbnk+ID0gZDMuc2VsZWN0KFwiI2NoYXJ0LWFyZWFcIilcbiAgLmFwcGVuZChcInN2Z1wiKVxuICAgIC5hdHRyKFwid2lkdGhcIiwgV0lEVEggKyBNQVJHSU4uTEVGVCArIE1BUkdJTi5SSUdIVClcbiAgICAuYXR0cihcImhlaWdodFwiLCBIRUlHSFQgKyBNQVJHSU4uVE9QICsgTUFSR0lOLkJPVFRPTSlcbiAgLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7V0lEVEggLyAyICsgTUFSR0lOLkxFRlR9LCAke0hFSUdIVCAvIDIgKyBNQVJHSU4uVE9QfSlgKVxuICAgIDtcblxuXG5cblxuZXhwb3J0IGNvbnN0IHRvb2x0aXA6IGQzLlNlbGVjdGlvbjxIVE1MRGl2RWxlbWVudCwgdW5rbm93biwgSFRNTEVsZW1lbnQsIGFueT4gPSBkMy5zZWxlY3QoXCIjY2hhcnQtYXJlYVwiKVxuICAuYXBwZW5kKFwiZGl2XCIpXG4gIC5hdHRyKFwiY2xhc3NcIiwgXCJ0b29sdGlwXCIpXG4gIC5zdHlsZShcIm9wYWNpdHlcIiwgMClcbiAgLnN0eWxlKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIndoaXRlXCIpXG4gIC5zdHlsZShcImJvcmRlclwiLCBcInNvbGlkXCIpXG4gIC5zdHlsZShcImJvcmRlci13aWR0aFwiLCBcIjJweFwiKVxuICAuc3R5bGUoXCJib3JkZXItcmFkaXVzXCIsIFwiNXB4XCIpXG4gIC5zdHlsZShcInBhZGRpbmdcIiwgXCI1cHhcIilcbiAgLnN0eWxlKFwid2lkdGhcIiwgXCIzMDBweFwiKVxuICAuc3R5bGUoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpXG4gIDtcblxuXG5leHBvcnQgbGV0IG1vdXNlb3ZlcjogKF9ldmVudDogTW91c2VFdmVudCwgX2Q6IGFueSkgPT4gdm9pZCA9IChfZXZlbnQ6IE1vdXNlRXZlbnQsIF9kOiBhbnkpID0+IHtcbiAgICB0b29sdGlwLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24odF9kdXJhdGlvbl90b29sdGlwX21vdXNlb3ZlcilcbiAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIC45KVxuICAgICAgICAuc3R5bGUoXCJmb250XCIsIFwiMTJweCBzYW5zLXNlcmlmXCIpXG4gICAgICAgIDtcbiAgICBcbiAgICBkMy5zZWxlY3QoPGFueT5fZXZlbnQuY3VycmVudFRhcmdldClcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIFwiM3B4XCIpXG4gIH07XG5cbmV4cG9ydCBsZXQgbW91c2VsZWF2ZTogKF9ldmVudDogTW91c2VFdmVudCwgX2Q6IGFueSkgPT4gdm9pZCA9IChfZXZlbnQ6IE1vdXNlRXZlbnQsIF9kOiBhbnkpID0+IHtcbiAgICB0b29sdGlwLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24odF9kdXJhdGlvbl90b29sdGlwX21vdXNlb3V0KVxuICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKVxuICAgIGQzLnNlbGVjdCg8YW55Pl9ldmVudC5jdXJyZW50VGFyZ2V0KVxuICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgXCIxcHhcIilcbn07XG5cbiIsIlxuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5cbmltcG9ydCB7IFxuICBjb3VudHJ5X2lkX3NlbGVjdGVkLFxuICB1cmxcbn0gZnJvbSBcIi4vY29uZmlnXCI7XG5cblxuaW1wb3J0IHsgQm91bmRhcnkgfSBmcm9tIFwiLi9jdXN0b21fYm91bmRhcnlcIjtcbmltcG9ydCB7IENpcmN1bGFyQmFyIH0gZnJvbSBcIi4vY3VzdG9tX2NpcmN1bGFyX2JhclwiO1xuaW1wb3J0IHsgTGFiZWxJbnNpZGUgfSBmcm9tIFwiLi9jdXN0b21fbGFiZWxfaW5zaWRlXCI7XG5pbXBvcnQgeyBMYWJlbE91dHNpZGUgfSBmcm9tIFwiLi9jdXN0b21fbGFiZWxfb3V0c2lkZVwiO1xuaW1wb3J0IHsgcG9wdWxhdGVfZHJvcGRvd24gfSBmcm9tIFwiLi9jdXN0b21fZHJvcGRvd25cIjtcblxuXG5sZXQgZGF0YV9yYXc6IGFueTtcbmxldCBkYXRhX2luc2lkZV9hcnJheTogc3RyaW5nW107XG5cblxubGV0IGNpcmN1bGFyX2Jhcl9pbnNpZGU6IGFueTtcbmxldCBjaXJjdWxhcl9iYXJfb3V0c2lkZTogYW55O1xubGV0IGxhYmVsX2luc2lkZTogYW55O1xubGV0IGxhYmVsX291dHNpZGU6IGFueTtcbmxldCBib3VuZGFyeV9pbnNpZGU6IGFueTtcbmxldCBib3VuZGFyeV9taWRkbGU6IGFueTtcbmxldCBib3VuZGFyeV9vdXRzaWRlOiBhbnk7XG5cbnBvcHVsYXRlX2Ryb3Bkb3duKGNvdW50cnlfaWRfc2VsZWN0ZWQsIHVybCk7XG5cbmQzLmpzb24odXJsKS50aGVuKF9kYXRhX3JhdyA9PiB7XG4gIFxuICBkYXRhX3JhdyA9IF9kYXRhX3JhdztcblxuICBkYXRhX2luc2lkZV9hcnJheSA9IGRhdGFfcmF3WzBdW1wiZGF0YVwiXS5tYXAoKGU6IGFueSkgPT4gZS5jb3VudHJ5X2lkKTtcblxuICBjaXJjdWxhcl9iYXJfaW5zaWRlID0gbmV3IENpcmN1bGFyQmFyKHtcbiAgICBfcGVyc3BlY3RpdmU6IFwiaW5zaWRlXCIsXG4gICAgX2RhdGFfcmF3OiBkYXRhX3JhdyxcbiAgICBfZGF0YV9pbnNpZGVfYXJyYXk6IGRhdGFfaW5zaWRlX2FycmF5XG4gICAgfSk7XG5cbiAgY2lyY3VsYXJfYmFyX291dHNpZGUgPSBuZXcgQ2lyY3VsYXJCYXIoe1xuICAgIF9wZXJzcGVjdGl2ZTogXCJvdXRzaWRlXCIsXG4gICAgX2RhdGFfcmF3OiBkYXRhX3JhdyxcbiAgICBfZGF0YV9pbnNpZGVfYXJyYXk6IGRhdGFfaW5zaWRlX2FycmF5XG4gICAgfSk7XG4gIFxuICBsYWJlbF9pbnNpZGUgPSBuZXcgTGFiZWxJbnNpZGUoe1xuICAgIF9kYXRhX3JhdzogZGF0YV9yYXcsXG4gICAgX2ZvbnRfZmlsbDogXCIjMDA4MDgwXCIsXG4gICAgX2ZvbnRfc2l6ZTogMTMsXG4gICAgX2ZvbnRfZmFtaWx5OiBcIkdpbGwgU2Fuc1wiLFxuICAgIF9sZXR0ZXJfc3BhY2luZzogMFxuICB9KTtcblxuICBsYWJlbF9vdXRzaWRlID0gbmV3IExhYmVsT3V0c2lkZSh7XG4gICAgX2RhdGFfcmF3OiBkYXRhX3JhdyxcbiAgICBfZm9udF9maWxsOiBcIiMwMDgwODBcIixcbiAgICBfZm9udF9zaXplOiAxNSxcbiAgICBfZm9udF9mYW1pbHk6IFwiT3B0aW1hXCIsXG4gICAgX2xldHRlcl9zcGFjaW5nOiAwXG4gIH0pO1xuXG4gIFxuICBib3VuZGFyeV9pbnNpZGUgPSBuZXcgQm91bmRhcnkoe1xuICAgIF9wZXJzcGVjdGl2ZTogXCJpbnNpZGVcIixcbiAgICBfZGF0YV9yYXc6IGRhdGFfcmF3LFxuICAgIF9ib3VuZGFyeV9maWxsOiBcIiMwMTcyNDFcIixcbiAgICBfZm9udF9maWxsOiBcIndoaXRlXCIsXG4gICAgX2ZvbnRfc2l6ZTogMTIsXG4gICAgX2ZvbnRfZmFtaWx5OiBcIkx1Y2lkYSBDb25zb2xlXCIsXG4gICAgX2xldHRlcl9zcGFjaW5nOiAxXG4gIH0pO1xuXG4gIGJvdW5kYXJ5X21pZGRsZSA9IG5ldyBCb3VuZGFyeSh7XG4gICAgX3BlcnNwZWN0aXZlOiBcIm1pZGRsZVwiLFxuICAgIF9kYXRhX3JhdzogZGF0YV9yYXcsXG4gICAgX2JvdW5kYXJ5X2ZpbGw6IFwiIzZGQjY0NlwiLFxuICAgIF9mb250X2ZpbGw6IFwid2hpdGVcIixcbiAgICBfZm9udF9zaXplOiAyNSxcbiAgICBfZm9udF9mYW1pbHk6IFwiQnJhZGxleSBIYW5kXCIsXG4gICAgX2xldHRlcl9zcGFjaW5nOiA0XG4gIH0pO1xuXG4gIGJvdW5kYXJ5X291dHNpZGUgPSBuZXcgQm91bmRhcnkoe1xuICAgIF9wZXJzcGVjdGl2ZTogXCJvdXRzaWRlXCIsXG4gICAgX2RhdGFfcmF3OiBkYXRhX3JhdyxcbiAgICBfYm91bmRhcnlfZmlsbDogXCIjMDE3MjQxXCIsXG4gICAgX2ZvbnRfZmlsbDogXCJ3aGl0ZVwiLFxuICAgIF9mb250X3NpemU6IDEyLFxuICAgIF9mb250X2ZhbWlseTogXCJMdWNpZGEgQ29uc29sZVwiLFxuICAgIF9sZXR0ZXJfc3BhY2luZzogMVxuICB9KTtcblxufSk7XG5cblxuJChcIiNjb3VudHJ5LWRyb3Bkb3duXCIpLm9uKFwiY2hhbmdlXCIsIHVwZGF0ZV9jaGFydCk7XG5mdW5jdGlvbiB1cGRhdGVfY2hhcnQoKSB7XG5cbiAgY2lyY3VsYXJfYmFyX2luc2lkZS53cmFuZ2xlX2RhdGEoKTtcbiAgY2lyY3VsYXJfYmFyX291dHNpZGUud3JhbmdsZV9kYXRhKCk7XG5cbn07XG5cbiIsIlxuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5cbmltcG9ydCB7IFxuICAgIEJPVU5EQVJZX0dBUCxcbiAgICBtb3VzZW92ZXIsXG4gICAgbW91c2VsZWF2ZSxcbiAgICBSQURJVVNfMDIsXG4gICAgUkFESVVTXzAzLFxuICAgIFJBRElVU19HQVAsXG4gICAgc3ZnLFxuICAgIHRvb2x0aXBcbiB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuXG4gaW50ZXJmYWNlIElCb3VuZGFyeSB7XG4gICAgX3BlcnNwZWN0aXZlOiBzdHJpbmc7XG4gICAgX2RhdGFfcmF3OiBhbnk7XG4gICAgX2JvdW5kYXJ5X2ZpbGw6IHN0cmluZztcbiAgICBfZm9udF9maWxsOiBzdHJpbmc7XG4gICAgX2ZvbnRfc2l6ZTogbnVtYmVyO1xuICAgIF9mb250X2ZhbWlseTogc3RyaW5nO1xuICAgIF9sZXR0ZXJfc3BhY2luZzogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgQm91bmRhcnkge1xuXG4gICAgcmVhZG9ubHkgcGVyc3BlY3RpdmU6IHN0cmluZztcbiAgICByZWFkb25seSBkYXRhX3JhdzogYW55O1xuICAgIHJlYWRvbmx5IGJvdW5kYXJ5X2ZpbGw6IHN0cmluZztcbiAgICByZWFkb25seSBmb250X2ZpbGw6IHN0cmluZztcbiAgICByZWFkb25seSBmb250X3NpemU6IG51bWJlcjtcbiAgICByZWFkb25seSBmb250X2ZhbWlseTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGxldHRlcl9zcGFjaW5nOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIHRvb2x0aXBfb2Zmc2V0X2V2ZW50X3BhZ2VYITogbnVtYmVyO1xuICAgIHByaXZhdGUgdG9vbHRpcF90cmFuc2xhdGVYITogbnVtYmVyO1xuICAgIHByaXZhdGUgdG9vbHRpcF9vZmZzZXRfZXZlbnRfcGFnZVkhOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIGRhdGEhOiBhbnk7XG4gICAgcHJpdmF0ZSB0ZXh0ITogc3RyaW5nO1xuICAgIHByaXZhdGUgZGVzY3JpcHRpb24hOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBpbm5lcl9yYWRpdXMhOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBvdXRlcl9yYWRpdXMhOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIG1vdXNlbW92ZSE6IChfZXZlbnQ6IE1vdXNlRXZlbnQsIGQ6IGFueSkgPT4gdm9pZDtcbiAgICBwcml2YXRlIG1pZGRsZV9yYWRpdXMhOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBzdGFydEFuZ2xlITogbnVtYmVyO1xuICAgIHByaXZhdGUgZW5kQW5nbGUhOiBudW1iZXI7XG4gICAgcHJpdmF0ZSB0ZXh0X2Zvcl9pZCE6IHN0cmluZztcbiAgICBwcml2YXRlIGFyY19zaGFwZSE6IGQzLkFyYzxhbnksIGQzLkRlZmF1bHRBcmNPYmplY3Q+O1xuICAgIHByaXZhdGUgYXJjX3RleHQhOiBkMy5BcmM8YW55LCBkMy5EZWZhdWx0QXJjT2JqZWN0PjtcblxuICAgIHByaXZhdGUgZyE6IGQzLlNlbGVjdGlvbjxTVkdHRWxlbWVudCwgdW5rbm93biwgSFRNTEVsZW1lbnQsIGFueT47XG5cbiAgICBjb25zdHJ1Y3RvciAoe1xuICAgICAgICBfcGVyc3BlY3RpdmUsXG4gICAgICAgIF9kYXRhX3JhdyxcbiAgICAgICAgX2JvdW5kYXJ5X2ZpbGwsXG4gICAgICAgIF9mb250X2ZpbGwsXG4gICAgICAgIF9mb250X3NpemUsXG4gICAgICAgIF9mb250X2ZhbWlseSxcbiAgICAgICAgX2xldHRlcl9zcGFjaW5nXG4gICAgICAgIH06IElCb3VuZGFyeSkge1xuXG4gICAgICAgICAgICB0aGlzLnBlcnNwZWN0aXZlID0gX3BlcnNwZWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5kYXRhX3JhdyA9IF9kYXRhX3JhdztcbiAgICAgICAgICAgIHRoaXMuYm91bmRhcnlfZmlsbCA9IF9ib3VuZGFyeV9maWxsO1xuICAgICAgICAgICAgdGhpcy5mb250X2ZpbGwgPSBfZm9udF9maWxsO1xuICAgICAgICAgICAgdGhpcy5mb250X3NpemUgPSBfZm9udF9zaXplO1xuICAgICAgICAgICAgdGhpcy5mb250X2ZhbWlseSA9IF9mb250X2ZhbWlseTtcbiAgICAgICAgICAgIHRoaXMubGV0dGVyX3NwYWNpbmcgPSBfbGV0dGVyX3NwYWNpbmc7XG4gICAgICAgICAgICB0aGlzLmluaXRfdmlzKCk7XG5cbiAgICAgICAgfVxuXG5cbiAgICBpbml0X3ZpcygpIHtcblxuICAgICAgICBjb25zdCB2aXMgPSB0aGlzO1xuXG4gICAgICAgIHZpcy50b29sdGlwX29mZnNldF9ldmVudF9wYWdlWCA9ICAwO1xuICAgICAgICB2aXMudG9vbHRpcF90cmFuc2xhdGVYID0gLTUwO1xuICAgICAgICB2aXMudG9vbHRpcF9vZmZzZXRfZXZlbnRfcGFnZVkgPSAtMzg1O1xuXG4gICAgICAgIGlmICh2aXMucGVyc3BlY3RpdmUgPT0gXCJpbnNpZGVcIikge1xuICAgICAgICAgICAgdmlzLmRhdGEgPSB2aXMuZGF0YV9yYXdbMF07XG4gICAgICAgICAgICB2aXMudGV4dCA9IHZpcy5kYXRhW1wibmFtZVwiXTtcbiAgICAgICAgICAgIHZpcy5kZXNjcmlwdGlvbiA9IHZpcy5kYXRhW1wiZGVzY3JpcHRpb25cIl07XG4gICAgICAgICAgICB2aXMuaW5uZXJfcmFkaXVzID0gUkFESVVTXzAyICsgUkFESVVTX0dBUDtcbiAgICAgICAgICAgIHZpcy5vdXRlcl9yYWRpdXMgPSBSQURJVVNfMDIgKyBSQURJVVNfR0FQICsgQk9VTkRBUllfR0FQO1xuICBcbiAgICAgICAgfSBlbHNlIGlmICh2aXMucGVyc3BlY3RpdmUgPT0gXCJtaWRkbGVcIikge1xuICAgICAgICAgICAgdmlzLmRhdGEgPSB2aXMuZGF0YV9yYXdbMV07XG4gICAgICAgICAgICB2aXMudGV4dCA9IHZpcy5kYXRhW1wibmFtZVwiXTtcbiAgICAgICAgICAgIHZpcy5kZXNjcmlwdGlvbiA9IHZpcy5kYXRhW1wiZGVzY3JpcHRpb25cIl07XG4gICAgICAgICAgICB2aXMuaW5uZXJfcmFkaXVzID0gUkFESVVTXzAyICsgUkFESVVTX0dBUCArIEJPVU5EQVJZX0dBUDtcbiAgICAgICAgICAgIHZpcy5vdXRlcl9yYWRpdXMgPSBSQURJVVNfMDMgLSBSQURJVVNfR0FQIC0gQk9VTkRBUllfR0FQO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodmlzLnBlcnNwZWN0aXZlID09IFwib3V0c2lkZVwiKSB7XG4gICAgICAgICAgICB2aXMuZGF0YSA9IHZpcy5kYXRhX3Jhd1syXTtcbiAgICAgICAgICAgIHZpcy50ZXh0ID0gdmlzLmRhdGFbXCJuYW1lXCJdO1xuICAgICAgICAgICAgdmlzLmRlc2NyaXB0aW9uID0gdmlzLmRhdGFbXCJkZXNjcmlwdGlvblwiXTtcbiAgICAgICAgICAgIHZpcy5pbm5lcl9yYWRpdXMgPSBSQURJVVNfMDMgLSBSQURJVVNfR0FQIC0gQk9VTkRBUllfR0FQO1xuICAgICAgICAgICAgdmlzLm91dGVyX3JhZGl1cyA9IFJBRElVU18wMyAtIFJBRElVU19HQVA7XG5cbiAgICAgICAgfTtcblxuICAgICAgICB2aXMubW91c2Vtb3ZlID0gZnVuY3Rpb24oZXZlbnQ6IE1vdXNlRXZlbnQsIF9kOiBhbnkpIHtcbiAgICAgICAgdG9vbHRpcFxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBcIjUwJVwiKVxuICAgICAgICAgICAgLnN0eWxlKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGVYKCR7dmlzLnRvb2x0aXBfdHJhbnNsYXRlWH0lKWApXG4gICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKGV2ZW50LnBhZ2VZICsgdmlzLnRvb2x0aXBfb2Zmc2V0X2V2ZW50X3BhZ2VZKSArIFwicHhcIilcbiAgICAgICAgICAgIC5odG1sKGAke3Zpcy5kZXNjcmlwdGlvbn1gKVxuICAgICAgICAgICAgO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZV9pbm5lcl9hcmMoX3BhdGg6IHN0cmluZyB8IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBfcGF0aCEucmVwbGFjZSgvKE0uKkEuKikoQS4qWikvLCBmdW5jdGlvbihfLCBtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtMSB8fCBfcGF0aDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmlzLm1pZGRsZV9yYWRpdXMgPSAodmlzLmlubmVyX3JhZGl1cyArIHZpcy5vdXRlcl9yYWRpdXMpIC8gMjtcbiAgICAgICAgdmlzLnN0YXJ0QW5nbGUgPSA5MCAqIE1hdGguUEkvMTgwO1xuICAgICAgICB2aXMuZW5kQW5nbGUgPSA5MCAqIE1hdGguUEkvMTgwICsgMiAqIE1hdGguUEk7XG4gICAgICAgIFxuICAgICAgICB2aXMudGV4dCA9IHZpcy50ZXh0LnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2aXMudGV4dF9mb3JfaWQgPSB2aXMudGV4dC5yZXBsYWNlKC9cXHMrL2csICcnKTtcblxuICAgICAgICB2aXMuYXJjX3NoYXBlID0gZDMuYXJjKClcbiAgICAgICAgICAgIC5pbm5lclJhZGl1cyh2aXMuaW5uZXJfcmFkaXVzKVxuICAgICAgICAgICAgLm91dGVyUmFkaXVzKHZpcy5vdXRlcl9yYWRpdXMpXG4gICAgICAgICAgICAuc3RhcnRBbmdsZSh2aXMuc3RhcnRBbmdsZSlcbiAgICAgICAgICAgIC5lbmRBbmdsZSh2aXMuZW5kQW5nbGUpO1xuICAgIFxuICAgICAgICB2aXMuYXJjX3RleHQgPSBkMy5hcmMoKVxuICAgICAgICAgICAgLmlubmVyUmFkaXVzKHZpcy5taWRkbGVfcmFkaXVzKVxuICAgICAgICAgICAgLm91dGVyUmFkaXVzKHZpcy5taWRkbGVfcmFkaXVzKVxuICAgICAgICAgICAgLnN0YXJ0QW5nbGUodmlzLnN0YXJ0QW5nbGUpXG4gICAgICAgICAgICAuZW5kQW5nbGUodmlzLmVuZEFuZ2xlKTtcblxuXG4gICAgICAgIHZpcy5nID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgYGJvdW5kYXJ5XyR7dmlzLnBlcnNwZWN0aXZlfWApXG4gICAgXG4gICAgXG4gICAgICAgIHZpcy5nXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGVmc1wiKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBgYXJjX2JvdW5kYXJ5XyR7dmlzLnRleHRfZm9yX2lkfV90ZXh0YClcbiAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgcmVtb3ZlX2lubmVyX2FyYyh2aXMuYXJjX3RleHQoKDxhbnk+MSkpKSlcbiAgICAgICAgICAgICAgICA7XG5cbiAgICAgICAgdmlzLmdcbiAgICAgICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIGBhcmNfYm91bmRhcnlfJHt2aXMudGV4dF9mb3JfaWR9X3NoYXBlYClcbiAgICAgICAgICAgIC5hdHRyKFwiZFwiLCB2aXMuYXJjX3NoYXBlKCg8YW55PjEpKSlcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCB2aXMuYm91bmRhcnlfZmlsbClcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcInllbGxvd1wiKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMXB4XCIpXG4gICAgXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgbW91c2VvdmVyKVxuICAgICAgICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIHZpcy5tb3VzZW1vdmUpXG4gICAgICAgICAgICAub24oXCJtb3VzZWxlYXZlXCIsIG1vdXNlbGVhdmUpXG4gICAgICAgICAgICA7XG5cbiAgICAgICAgdmlzLmdcbiAgICAgICAgICAgIC5hcHBlbmQoXCJjbGlwUGF0aFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBgYXJjX2JvdW5kYXJ5XyR7dmlzLnRleHRfZm9yX2lkfV90ZXh0X2NsaXBgKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ1c2VcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhsaW5rOmhyZWZcIiwgYCNhcmNfYm91bmRhcnlfJHt2aXMudGV4dF9mb3JfaWR9X3NoYXBlYCk7XG4gICAgICAgIFxuICAgICAgICB2aXMuZ1xuICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgNClcbiAgICAgICAgICAgIC5hdHRyKFwiY2xpcC1wYXRoXCIsIGB1cmwoI2FyY19ib3VuZGFyeV8ke3Zpcy50ZXh0X2Zvcl9pZH1fdGV4dF9jbGlwKWApXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInRleHRQYXRoXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4bGluazpocmVmXCIsIGAjYXJjX2JvdW5kYXJ5XyR7dmlzLnRleHRfZm9yX2lkfV90ZXh0YClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAuYXR0cihcInN0YXJ0T2Zmc2V0XCIsIFwiNTAlXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIHZpcy5mb250X2ZpbGwpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIGAke3Zpcy5mb250X3NpemV9cHhgKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZvbnQtZmFtaWx5XCIsIHZpcy5mb250X2ZhbWlseSlcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJsZXR0ZXItc3BhY2luZ1wiLCBgJHt2aXMubGV0dGVyX3NwYWNpbmd9cHhgKVxuICAgICAgICAgICAgICAgIC50ZXh0KHZpcy50ZXh0KVxuICAgIFxuICAgIH1cbn0iLCJcblxuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5cbmltcG9ydCB7IFxuICAgIEhFSUdIVCxcbiAgICBNQVJHSU4sXG4gICAgbW91c2VvdmVyLFxuICAgIG1vdXNlbGVhdmUsXG4gICAgUkFESVVTXzAyLFxuICAgIFJBRElVU18wMyxcbiAgICBSQURJVVNfMDUsXG4gICAgc3ZnLFxuICAgIHRvb2x0aXAsXG4gICAgdF9kdXJhdGlvbixcbiAgICBXSURUSFxuIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5cbmludGVyZmFjZSBJQ2lyY3VsYXJCYXIge1xuICAgIF9wZXJzcGVjdGl2ZTogc3RyaW5nO1xuICAgIF9kYXRhX3JhdzogYW55O1xuICAgIF9kYXRhX2luc2lkZV9hcnJheTogc3RyaW5nW107XG59XG5cbmV4cG9ydCBjbGFzcyBDaXJjdWxhckJhciB7XG5cbiAgICByZWFkb25seSBwZXJzcGVjdGl2ZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGRhdGFfcmF3OiBhbnk7XG4gICAgcmVhZG9ubHkgZGF0YV9pbnNpZGVfYXJyYXk6IHN0cmluZ1tdO1xuXG4gICAgcHJpdmF0ZSB0b29sdGlwX29mZnNldF9ldmVudF9wYWdlWCE6IG51bWJlcjtcbiAgICBwcml2YXRlIHRvb2x0aXBfdHJhbnNsYXRlWCE6IG51bWJlcjtcbiAgICBwcml2YXRlIHRvb2x0aXBfb2Zmc2V0X2V2ZW50X3BhZ2VZITogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSByYWRpdXNfaW5uZXIhOiBudW1iZXI7XG4gICAgcHJpdmF0ZSByYWRpdXNfb3V0ZXIhOiBudW1iZXI7XG4gICAgcHJpdmF0ZSByYWRpdXNfZ3JhZGllbnQhOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBjb2xvcl9iYXJfMCE6IHN0cmluZztcbiAgICBwcml2YXRlIGNvbG9yX2Jhcl8xMDAhOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBvZmZzZXRfMCE6IG51bWJlcjtcbiAgICBwcml2YXRlIGNvbG9yX3N0cm9rZSE6IHN0cmluZztcbiAgICBwcml2YXRlIGRvbWFpbl95X21pbiE6IG51bWJlcjtcbiAgICBwcml2YXRlIGRvbWFpbl95X21heCE6IG51bWJlcjtcblxuICAgIHByaXZhdGUgeF9zY2FsZSE6IGQzLlNjYWxlQmFuZDxzdHJpbmc+O1xuICAgIHByaXZhdGUgeV9zY2FsZSE6IGQzLlNjYWxlUmFkaWFsPG51bWJlciwgbnVtYmVyLCBuZXZlcj47XG4gICAgcHJpdmF0ZSBhcmMhOiBkMy5BcmM8YW55LCBkMy5EZWZhdWx0QXJjT2JqZWN0PjtcbiAgICBwcml2YXRlIHBpZSE6IGQzLlBpZTxhbnksIG51bWJlciB8IHtcbiAgICAgICAgdmFsdWVPZigpOiBudW1iZXI7XG4gICAgfT47XG4gICAgcHJpdmF0ZSBnITogZDMuU2VsZWN0aW9uPFNWR0dFbGVtZW50LCB1bmtub3duLCBIVE1MRWxlbWVudCwgYW55PjtcbiAgICBwcml2YXRlIGRlZnMhOiBkMy5TZWxlY3Rpb248U1ZHR0VsZW1lbnQsIHVua25vd24sIEhUTUxFbGVtZW50LCBhbnk+O1xuICAgIHByaXZhdGUgcmFkaWFsX2dyYWRpZW50ITogZDMuU2VsZWN0aW9uPFNWR1JhZGlhbEdyYWRpZW50RWxlbWVudCwgdW5rbm93biwgSFRNTEVsZW1lbnQsIGFueT47XG5cbiAgICBwcml2YXRlIHNlbGVjdGVkX29wdGlvbiE6IHN0cmluZyB8IG51bWJlciB8IHN0cmluZ1tdIHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgc2VsZWN0ZWRfb3B0aW9uX3RleHQhOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBjb3VudHJ5X2lkX2luZGV4ITogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSBkYXRhITogYW55O1xuICAgIHByaXZhdGUgbW91c2Vtb3ZlITogKF9ldmVudDogTW91c2VFdmVudCwgZDogYW55KSA9PiB2b2lkO1xuICAgIHByaXZhdGUgdHJhbnNpdGlvbl9kdXJhdGlvbiE6IGQzLlRyYW5zaXRpb248ZDMuQmFzZVR5cGUsIHVua25vd24sIG51bGwsIHVuZGVmaW5lZD47XG4gICAgcHJpdmF0ZSBiYXIhOiBhbnk7XG5cbiAgICBwcml2YXRlIGFyY190d2VlbiE6IChkXzogYW55KSA9PiAodF86IGFueSkgPT4gc3RyaW5nIHwgbnVsbDtcbiAgICBwcml2YXRlIF9jdXJyZW50ITogbnVtYmVyO1xuXG5cbiAgICBjb25zdHJ1Y3RvciAoe19wZXJzcGVjdGl2ZSwgX2RhdGFfcmF3LCBfZGF0YV9pbnNpZGVfYXJyYXl9OiBJQ2lyY3VsYXJCYXIpIHtcblxuICAgICAgICB0aGlzLnBlcnNwZWN0aXZlID0gX3BlcnNwZWN0aXZlO1xuICAgICAgICB0aGlzLmRhdGFfcmF3ID0gX2RhdGFfcmF3O1xuICAgICAgICB0aGlzLmRhdGFfaW5zaWRlX2FycmF5ID0gX2RhdGFfaW5zaWRlX2FycmF5O1xuICAgICAgICB0aGlzLmluaXRfdmlzKCk7XG5cbiAgICB9XG5cblxuICAgIGluaXRfdmlzKCkge1xuXG5cbiAgICAgICAgY29uc3QgdmlzID0gdGhpcztcblxuICAgICAgICB2aXMudG9vbHRpcF9vZmZzZXRfZXZlbnRfcGFnZVggPSAwO1xuICAgICAgICB2aXMudG9vbHRpcF90cmFuc2xhdGVYID0gLTUwO1xuICAgICAgICB2aXMudG9vbHRpcF9vZmZzZXRfZXZlbnRfcGFnZVkgPSAtMzg1O1xuXG4gICAgICAgIGlmICh2aXMucGVyc3BlY3RpdmUgPT0gXCJpbnNpZGVcIikge1xuXG4gICAgICAgICAgICB2aXMucmFkaXVzX2lubmVyID0gUkFESVVTXzAyO1xuICAgICAgICAgICAgdmlzLnJhZGl1c19vdXRlciA9IDA7XG4gICAgICAgICAgICB2aXMucmFkaXVzX2dyYWRpZW50ID0gdmlzLnJhZGl1c19pbm5lcjtcbiAgICAgICAgICAgIHZpcy5jb2xvcl9iYXJfMCA9IFwiI0ZBQTBBMFwiO1xuICAgICAgICAgICAgdmlzLmNvbG9yX2Jhcl8xMDAgPSBcIndoaXRlXCI7XG4gICAgICAgICAgICB2aXMub2Zmc2V0XzAgPSA4MDtcbiAgICAgICAgICAgIHZpcy5jb2xvcl9zdHJva2UgPSBcIiNGQTgwNzJcIjtcbiAgICAgICAgICAgIHZpcy5kb21haW5feV9taW4gPSA1O1xuICAgICAgICAgICAgdmlzLmRvbWFpbl95X21heCA9IDEwMDtcblxuICAgICAgICB9IGVsc2UgaWYgKHZpcy5wZXJzcGVjdGl2ZSA9PSBcIm91dHNpZGVcIikge1xuXG4gICAgICAgICAgICB2aXMucmFkaXVzX2lubmVyID0gUkFESVVTXzAzO1xuICAgICAgICAgICAgdmlzLnJhZGl1c19vdXRlciA9IFJBRElVU18wNTtcbiAgICAgICAgICAgIHZpcy5yYWRpdXNfZ3JhZGllbnQgPSB2aXMucmFkaXVzX291dGVyO1xuICAgICAgICAgICAgdmlzLmNvbG9yX2Jhcl8wID0gXCJ3aGl0ZVwiO1xuICAgICAgICAgICAgdmlzLmNvbG9yX2Jhcl8xMDAgPSBcIiNGQUEwQTBcIjtcbiAgICAgICAgICAgIHZpcy5vZmZzZXRfMCA9IDcwO1xuICAgICAgICAgICAgdmlzLmNvbG9yX3N0cm9rZSA9IFwiI0ZBODA3MlwiO1xuICAgICAgICAgICAgdmlzLmRvbWFpbl95X21pbiA9IDAuMjU7XG4gICAgICAgICAgICB2aXMuZG9tYWluX3lfbWF4ID0gNDtcblxuICAgICAgICB9XG5cbiAgXG4gICAgICAgIHZpcy54X3NjYWxlID0gZDMuc2NhbGVCYW5kKClcbiAgICAgICAgICAgIC5yYW5nZShbMCwgMiAqIE1hdGguUEldKVxuICAgICAgICAgICAgLmFsaWduKDApXG5cblxuICAgICAgICB2aXMueV9zY2FsZSA9IGQzLnNjYWxlUmFkaWFsKClcbiAgICAgICAgICAgIC5yYW5nZShbdmlzLnJhZGl1c19pbm5lciwgdmlzLnJhZGl1c19vdXRlcl0pXG4gICAgICAgICAgICAuZG9tYWluKFswLCB2aXMuZG9tYWluX3lfbWF4XSk7XG4gICAgICAgIFxuICAgICAgICB2aXMuYXJjID0gZDMuYXJjKClcbiAgICAgICAgICAgIC5pbm5lclJhZGl1cyh2aXMucmFkaXVzX2lubmVyKVxuICAgICAgICAgICAgLnBhZFJhZGl1cyh2aXMucmFkaXVzX2lubmVyKTtcblxuICAgICAgICB2aXMucGllID0gZDMucGllKClcbiAgICAgICAgICAgIC5wYWRBbmdsZSgwLjAxKVxuICAgICAgICAgICAgLnNvcnQobnVsbCk7XG5cbiAgICAgICAgdmlzLmcgPSBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBgYmFyXyR7dmlzLnBlcnNwZWN0aXZlfWApXG4gICAgICAgICAgICBcblxuICAgICAgICB2aXMuZGVmcyA9IHZpcy5nLmFwcGVuZChcInN2ZzpkZWZzXCIpXG4gICAgICAgIHZpcy5yYWRpYWxfZ3JhZGllbnQgPSB2aXMuZGVmcy5hcHBlbmQoXCJyYWRpYWxHcmFkaWVudFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJncmFkaWVudFVuaXRzXCIsIFwidXNlclNwYWNlT25Vc2VcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgJzUwJScpXG4gICAgICAgICAgICAuYXR0cihcImN5XCIsICc1MCUnKVxuICAgICAgICAgICAgLmF0dHIoXCJyXCIsIHZpcy5yYWRpdXNfZ3JhZGllbnQpXG4gICAgICAgICAgICAuYXR0cignZ3JhZGllbnRUcmFuc2Zvcm0nLCBgdHJhbnNsYXRlKC0ke1dJRFRIIC8gMn0sIC0ke0hFSUdIVCAvIDIgKyAoMyAqIE1BUkdJTi5UT1ApfSlgKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBgYmFyXyR7dmlzLnBlcnNwZWN0aXZlfV9pZGApO1xuICAgICAgICB2aXMucmFkaWFsX2dyYWRpZW50LmFwcGVuZChcInN0b3BcIikuYXR0cihcIm9mZnNldFwiLCBgJHt2aXMub2Zmc2V0XzB9JWApLnN0eWxlKFwic3RvcC1jb2xvclwiLCB2aXMuY29sb3JfYmFyXzApO1xuICAgICAgICB2aXMucmFkaWFsX2dyYWRpZW50LmFwcGVuZChcInN0b3BcIikuYXR0cihcIm9mZnNldFwiLCBcIjEwMCVcIikuc3R5bGUoXCJzdG9wLWNvbG9yXCIsIHZpcy5jb2xvcl9iYXJfMTAwKTtcblxuICAgICAgICB2aXMud3JhbmdsZV9kYXRhKCk7XG5cbiAgICB9XG5cblxuICAgIHdyYW5nbGVfZGF0YSgpIHtcbiAgICAgICAgY29uc3QgdmlzID0gdGhpcztcblxuIFxuICAgICAgICB2aXMuc2VsZWN0ZWRfb3B0aW9uID0gJChcIiNjb3VudHJ5LWRyb3Bkb3duXCIpLnZhbCgpO1xuICAgICAgICB2aXMuc2VsZWN0ZWRfb3B0aW9uX3RleHQgPSAkKFwiI2NvdW50cnktZHJvcGRvd24gb3B0aW9uOnNlbGVjdGVkXCIpLnRleHQoKTtcbiAgICAgICAgdmlzLmNvdW50cnlfaWRfaW5kZXggPSB2aXMuZGF0YV9pbnNpZGVfYXJyYXkuaW5kZXhPZig8c3RyaW5nPnZpcy5zZWxlY3RlZF9vcHRpb24pO1xuXG4gICAgICAgIGlmICh2aXMucGVyc3BlY3RpdmUgPT0gXCJpbnNpZGVcIikge1xuICAgICAgICAgICAgdmlzLmRhdGEgPSB2aXMuZGF0YV9yYXdbMF1bXCJkYXRhXCJdW3Zpcy5jb3VudHJ5X2lkX2luZGV4XVtcIm1ldHJpY1wiXTtcblxuICAgICAgICAgICAgdmlzLm1vdXNlbW92ZSA9IGZ1bmN0aW9uKF9ldmVudDogTW91c2VFdmVudCwgZDogYW55KSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcFxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIFwiNTAlXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlWCgke3Zpcy50b29sdGlwX3RyYW5zbGF0ZVh9JSlgKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgKF9ldmVudC5wYWdlWSArIHZpcy50b29sdGlwX29mZnNldF9ldmVudF9wYWdlWSkgKyBcInB4XCIpXG4gICAgICAgICAgICAgICAgICAgIC5odG1sKGBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+JHtkLmRhdGEubWV0cmljX2NhdGVnb3J5fSAtICR7ZC5kYXRhLm1ldHJpY19uYW1lfTwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyPjxpPjxzdWI+JHt2aXMuc2VsZWN0ZWRfb3B0aW9uX3RleHR9PC9zdWI+PC9pPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnI+PGJyPiR7ZC5kYXRhLm1ldHJpY19kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxicj48YnI+RMOpcGFzc2VtZW50IHBhciByYXBwb3J0IGF1IHBsYW5jaGVyOiA8Yj4ke3VzZXJfZnJpZW5kbHlfbnVtYmVyKGQuZGF0YS5tZXRyaWNfdmFsdWVfZGlzcGxheSl9JTwvYj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxicj48YnI+UGxhbmNoZXIgc29jaWFsIDogJHt1c2VyX2ZyaWVuZGx5X251bWJlcihkLmRhdGEubWV0cmljX3ZhbHVlX2lkZWFsKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxicj48YnI+PHU+U291cmNlPC91PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyPlZhbGV1ciBhY3R1ZWxsZTogJHt1c2VyX2ZyaWVuZGx5X251bWJlcihkLmRhdGEubWV0cmljX3ZhbHVlX2N1cnJlbnQpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyPkFubsOpZTogJHtkLmRhdGEubWV0cmljX3llYXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnI+U291cmNlOiAke2QuZGF0YS5tZXRyaWNfc291cmNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGApXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSBpZiAodmlzLnBlcnNwZWN0aXZlID09IFwib3V0c2lkZVwiKSB7XG4gICAgICAgICAgICB2aXMuZGF0YSA9IHZpcy5kYXRhX3Jhd1syXVtcImRhdGFcIl1bdmlzLmNvdW50cnlfaWRfaW5kZXhdW1wibWV0cmljXCJdO1xuXG4gICAgICAgICAgICB2aXMubW91c2Vtb3ZlID0gZnVuY3Rpb24oX2V2ZW50OiBNb3VzZUV2ZW50LCBkOiBhbnkpIHtcblxuICAgICAgICAgICAgICAgIHRvb2x0aXBcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBcIjUwJVwiKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZVgoJHt2aXMudG9vbHRpcF90cmFuc2xhdGVYfSUpYClcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChfZXZlbnQucGFnZVkgKyB2aXMudG9vbHRpcF9vZmZzZXRfZXZlbnRfcGFnZVkpICsgXCJweFwiKVxuICAgICAgICAgICAgICAgICAgICAuaHRtbChgXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPiR7ZC5kYXRhLm1ldHJpY19uYW1lfTwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyPjxpPjxzdWI+JHt2aXMuc2VsZWN0ZWRfb3B0aW9uX3RleHR9PC9zdWI+PC9pPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnI+PGJyPiR7ZC5kYXRhLm1ldHJpY19kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxicj48YnI+VmFsZXVyIGFjdHVlbGxlOjxiPiAke3VzZXJfZnJpZW5kbHlfbnVtYmVyKGQuZGF0YS5tZXRyaWNfdmFsdWVfY3VycmVudCl9JTwvYj5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyPjxicj48dT5Tb3VyY2U8L3U+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxicj5ZZWFyOiAke2QuZGF0YS5tZXRyaWNfeWVhcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxicj5DcmVkaXQ6ICR7ZC5kYXRhLm1ldHJpY19zb3VyY2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgYClcbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICB2aXMueF9zY2FsZVxuICAgICAgICAgICAgLmRvbWFpbih2aXMuZGF0YS5tYXAoKGQ6IGFueSkgPT4gZC5tZXRyaWNfbmFtZSkpO1xuXG4gICAgICAgIFxuICAgICAgICB2aXMudXBkYXRlX3ZpcygpO1xuICAgIH1cblxuXG4gICAgdXBkYXRlX3ZpcygpIHtcblxuICAgICAgICBjb25zdCB2aXMgPSB0aGlzO1xuICAgICAgICB2aXMudHJhbnNpdGlvbl9kdXJhdGlvbiA9IGQzLnRyYW5zaXRpb24oKS5kdXJhdGlvbih0X2R1cmF0aW9uKTtcblxuICAgICAgICB2aXMuYmFyID0gdmlzLmdcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoYHBhdGguYmFyXyR7dmlzLnBlcnNwZWN0aXZlfV9wYXRoYClcbiAgICAgICAgICAgIC5kYXRhKHZpcy5waWUodmlzLmRhdGEpKVxuXG4gICAgICAgIHZpcy5iYXJcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGBiYXJfJHt2aXMucGVyc3BlY3RpdmV9X3BhdGhgKVxuICAgICAgICAgICAgICAgIC5hdHRyKFxuICAgICAgICAgICAgICAgICAgICBcImRcIiwgdmlzLmFyY1xuICAgICAgICAgICAgICAgICAgICAuc3RhcnRBbmdsZSgoZDogYW55KSA9PiAoPG51bWJlcj52aXMueF9zY2FsZShkLmRhdGEubWV0cmljX25hbWUpKSlcbiAgICAgICAgICAgICAgICAgICAgLmVuZEFuZ2xlKChkOiBhbnkpID0+ICg8bnVtYmVyPnZpcy54X3NjYWxlKGQuZGF0YS5tZXRyaWNfbmFtZSkpICsgdmlzLnhfc2NhbGUuYmFuZHdpZHRoKCkpXG4gICAgICAgICAgICAgICAgICAgIC5vdXRlclJhZGl1cyhmdW5jdGlvbihkOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhX3kgPSBkLmRhdGEubWV0cmljX3ZhbHVlX2Rpc3BsYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5kYXRhLm1ldHJpY192YWx1ZV9kaXNwbGF5ID4gdmlzLmRvbWFpbl95X21heCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFfeSA9IHZpcy5kb21haW5feV9tYXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGQuZGF0YS5tZXRyaWNfdmFsdWVfZGlzcGxheSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFfeSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGQuZGF0YS5tZXRyaWNfdmFsdWVfZGlzcGxheSA8PSB2aXMuZG9tYWluX3lfbWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YV95ID0gdmlzLmRvbWFpbl95X21pbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2aXMueV9zY2FsZShkYXRhX3kpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGB1cmwoI2Jhcl8ke3Zpcy5wZXJzcGVjdGl2ZX1faWQpYClcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgdmlzLmNvbG9yX3N0cm9rZSlcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgXCIxcHhcIilcbiBcbiAgICAgICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgbW91c2VvdmVyKVxuICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCB2aXMubW91c2Vtb3ZlKVxuICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlbGVhdmVcIiwgbW91c2VsZWF2ZSlcbiAgICAgICAgICAgICAgICA7XG5cbiAgICAgICAgdmlzLmJhclxuICAgICAgICAgICAgLmV4aXQoKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24odmlzLnRyYW5zaXRpb25fZHVyYXRpb24pXG4gICAgICAgICAgICAuYXR0clR3ZWVuKFwiZFwiLCB2aXMuYXJjX3R3ZWVuKSBcbiAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XG5cbiAgICAgICAgdmlzLmJhclxuICAgICAgICAgICAgLnRyYW5zaXRpb24odmlzLnRyYW5zaXRpb25fZHVyYXRpb24pICAgXG4gICAgICAgICAgICAuYXR0clR3ZWVuKFwiZFwiLCB2aXMuYXJjX3R3ZWVuKSAgIFxuICAgICAgICAgICAgXG4gICAgICAgIFxuXG4gICAgICAgIHZpcy5hcmNfdHdlZW4gPSAoZF86IGFueSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaV8gPSBkMy5pbnRlcnBvbGF0ZSh0aGlzLl9jdXJyZW50LCBkXyk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50ID0gaV8oMSk7XG4gICAgICAgICAgICByZXR1cm4gKHRfOiBhbnkpID0+IHZpcy5hcmMoaV8odF8pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFxuICAgIH07XG59O1xuXG5mdW5jdGlvbiB1c2VyX2ZyaWVuZGx5X251bWJlciAoX3ZhbHVlOiBudW1iZXIpIHtcblxuICAgIGxldCB2YWx1ZSE6IHN0cmluZztcblxuICAgIGlmIChfdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgdmFsdWUgPSBfdmFsdWUudG9GaXhlZCgyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IF92YWx1ZVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbn07XG5cbiIsIlxuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5cbmltcG9ydCB7XG4gICAgUkFESVVTXzAyLFxuICAgIHN2ZyxcbiB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuXG4gaW50ZXJmYWNlIElMYWJlbEluc2lkZSB7XG4gICAgX2RhdGFfcmF3OiBhbnk7XG4gICAgX2ZvbnRfZmlsbDogc3RyaW5nO1xuICAgIF9mb250X3NpemU6IG51bWJlcjtcbiAgICBfZm9udF9mYW1pbHk6IHN0cmluZztcbiAgICBfbGV0dGVyX3NwYWNpbmc6IG51bWJlcjtcbiB9XG5cbmV4cG9ydCBjbGFzcyBMYWJlbEluc2lkZSB7XG5cbiAgICByZWFkb25seSBkYXRhX3JhdzogYW55O1xuICAgIHJlYWRvbmx5IGZvbnRfZmlsbDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGZvbnRfc2l6ZTogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGZvbnRfZmFtaWx5OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgbGV0dGVyX3NwYWNpbmc6IG51bWJlcjtcblxuICAgIHByaXZhdGUgcGFkZGluZyE6IG51bWJlcjtcblxuICAgIHByaXZhdGUgYXJjITogZDMuQXJjPGFueSwgZDMuRGVmYXVsdEFyY09iamVjdD47XG4gICAgcHJpdmF0ZSBwaWUhOiBkMy5QaWU8YW55LCBudW1iZXIgfCB7XG4gICAgICAgIHZhbHVlT2YoKTogbnVtYmVyO1xuICAgIH0+O1xuICAgIHByaXZhdGUgZyE6IGQzLlNlbGVjdGlvbjxTVkdHRWxlbWVudCwgdW5rbm93biwgSFRNTEVsZW1lbnQsIGFueT47XG4gICAgcHJpdmF0ZSBkYXRhITogYW55O1xuICAgIHByaXZhdGUgeCE6IG51bWJlcjtcbiAgICBwcml2YXRlIHkhOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvciAoe1xuICAgICAgICBfZGF0YV9yYXcsXG4gICAgICAgIF9mb250X2ZpbGwsXG4gICAgICAgIF9mb250X3NpemUsXG4gICAgICAgIF9mb250X2ZhbWlseSxcbiAgICAgICAgX2xldHRlcl9zcGFjaW5nXG4gICAgICAgIH06IElMYWJlbEluc2lkZSkge1xuXG4gICAgICAgIHRoaXMuZGF0YV9yYXcgPSBfZGF0YV9yYXc7XG4gICAgICAgIHRoaXMuZm9udF9maWxsID0gX2ZvbnRfZmlsbDtcbiAgICAgICAgdGhpcy5mb250X3NpemUgPSBfZm9udF9zaXplO1xuICAgICAgICB0aGlzLmZvbnRfZmFtaWx5ID0gX2ZvbnRfZmFtaWx5O1xuICAgICAgICB0aGlzLmxldHRlcl9zcGFjaW5nID0gX2xldHRlcl9zcGFjaW5nO1xuICAgICAgICB0aGlzLmluaXRfdmlzKCk7XG5cbiAgICB9XG5cbiAgICBpbml0X3ZpcygpIHtcblxuICAgICAgICBjb25zdCB2aXMgPSB0aGlzO1xuXG4gICAgICAgIHZpcy5wYWRkaW5nID0gMjA7XG5cbiAgICAgICAgdmlzLmFyYyA9IGQzLmFyYygpXG4gICAgICAgICAgICAuaW5uZXJSYWRpdXMoUkFESVVTXzAyIC0gdmlzLnBhZGRpbmcpXG4gICAgICAgICAgICAub3V0ZXJSYWRpdXMoUkFESVVTXzAyKTtcblxuICAgICAgICB2aXMucGllID0gZDMucGllKClcbiAgICAgICAgICAgIC5zdGFydEFuZ2xlKDApXG4gICAgICAgICAgICAuZW5kQW5nbGUoMiAqIE1hdGguUEkpXG4gICAgICAgICAgICAudmFsdWUoZnVuY3Rpb24oX2QpIHsgcmV0dXJuIDM7IH0pXG4gICAgICAgICAgICAucGFkQW5nbGUoMC4wMSlcbiAgICAgICAgICAgIC5zb3J0KG51bGwpO1xuXG4gICAgICAgIHZpcy5nID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsYWJlbF9pbnNpZGVcIilcblxuICAgICAgICB2aXMud3JhbmdsZV9kYXRhKCk7XG4gICAgfVxuXG4gICAgd3JhbmdsZV9kYXRhKCkge1xuXG4gICAgICAgIGNvbnN0IHZpcyA9IHRoaXM7XG5cbiAgICAgICAgdmlzLmRhdGEgPSB2aXMuZGF0YV9yYXdbMF1bXCJkYXRhXCJdWzBdW1wibWV0cmljXCJdO1xuXG4gICAgICAgIHZpcy51cGRhdGVfdmlzKCk7XG4gICAgfVxuXG5cbiAgICB1cGRhdGVfdmlzKCkge1xuXG4gICAgICAgIGNvbnN0IHZpcyA9IHRoaXM7XG5cbiAgICAgICAgdmlzLmdcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCIuYXJjX2luc2lkZVwiKVxuICAgICAgICAgICAgLmRhdGEodmlzLnBpZSh2aXMuZGF0YSkpXG4gICAgICAgICAgICAuZW50ZXIoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgdmlzLnBpZSh2aXMuZGF0YSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGQ6IGFueSwgX2k6IG51bWJlcikge1xuICAgICAgICAgICAgICAgIFt2aXMueCwgdmlzLnldID0gdmlzLmFyYy5jZW50cm9pZChkKTtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dCA9IGQuZGF0YS5tZXRyaWNfbmFtZS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBsZXQgZW5kX2FuZ2xlID0gZC5lbmRBbmdsZTtcbiAgICAgICAgICAgICAgICBsZXQgcm90YXRpb24gPSBlbmRfYW5nbGUgPD0gTWF0aC5QSSA/IFxuICAgICAgICAgICAgICAgICAgICAoZC5zdGFydEFuZ2xlIC8gMiArIGQuZW5kQW5nbGUgLyAyKSAqIDE4MCAvIE1hdGguUEkgOlxuICAgICAgICAgICAgICAgICAgICAoZC5zdGFydEFuZ2xlIC8gMiArIGQuZW5kQW5nbGUgLyAyICsgTWF0aC5QSSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0X2FuY2hvciA9IGVuZF9hbmdsZSA8PSBNYXRoLlBJID8gXCJlbmRcIiA6IFwic3RhcnRcIjtcbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBbdmlzLngsIHZpcy55XSArIFwiKSByb3RhdGUoLTkwKSByb3RhdGUoXCIgKyByb3RhdGlvbiArIFwiKVwiO1xuXG4gICAgICAgICAgICAgICAgdmlzLmdcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCB0ZXh0X2FuY2hvcilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ6LWluZGV4XCIsIFwiMVwiKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgYCR7dmlzLmZvbnRfc2l6ZX1weGApXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcImZvbnQtZmFtaWx5XCIsIHZpcy5mb250X2ZhbWlseSlcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCB2aXMuZm9udF9maWxsKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJsZXR0ZXItc3BhY2luZ1wiLCBgJHt2aXMubGV0dGVyX3NwYWNpbmd9cHhgKVxuICAgICAgICAgICAgICAgICAgICAudGV4dCh0ZXh0KTtcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG59IiwiXG5cbmltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuXG5pbXBvcnQge1xuICAgIFJBRElVU18wMixcbiAgICBSQURJVVNfMDMsXG4gICAgUkFESVVTX0dBUCxcbiAgICBzdmdcbiB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuXG5pbnRlcmZhY2UgSUxhYmVsT3V0c2lkZSB7XG4gICAgX2RhdGFfcmF3OiBhbnk7XG4gICAgX2ZvbnRfZmlsbDogc3RyaW5nO1xuICAgIF9mb250X3NpemU6IG51bWJlcjtcbiAgICBfZm9udF9mYW1pbHk6IHN0cmluZztcbiAgICBfbGV0dGVyX3NwYWNpbmc6IG51bWJlcjtcbiB9XG5cbmV4cG9ydCBjbGFzcyBMYWJlbE91dHNpZGUge1xuXG4gICAgcmVhZG9ubHkgZGF0YV9yYXc6IGFueTtcbiAgICByZWFkb25seSBmb250X2ZpbGw6IHN0cmluZztcbiAgICByZWFkb25seSBmb250X3NpemU6IG51bWJlcjtcbiAgICByZWFkb25seSBmb250X2ZhbWlseTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGxldHRlcl9zcGFjaW5nOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIGFyYyE6IGQzLkFyYzxhbnksIGQzLkRlZmF1bHRBcmNPYmplY3Q+O1xuICAgIHByaXZhdGUgcGllITogZDMuUGllPGFueSwgbnVtYmVyIHwge1xuICAgICAgICB2YWx1ZU9mKCk6IG51bWJlcjtcbiAgICB9PjtcbiAgICBwcml2YXRlIGRhdGEhOiBhbnk7XG4gICAgcHJpdmF0ZSBnITogZDMuU2VsZWN0aW9uPFNWR0dFbGVtZW50LCB1bmtub3duLCBIVE1MRWxlbWVudCwgYW55PjtcblxuICAgIHByaXZhdGUgcmV2aXNlQXJjITogKGQ6IGFueSwgaTogbnVtYmVyKSA9PiB2b2lkO1xuICAgIHByaXZhdGUgZmlyc3RBcmNTZWN0aW9uITogUmVnRXhwO1xuICAgIHByaXZhdGUgdGhpc1NlY3Rpb24hOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBuZXdBcmMhOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBsb2NTdGFydCE6IFJlZ0V4cDtcbiAgICBwcml2YXRlIGxvY01pZGRsZSE6IFJlZ0V4cDtcbiAgICBwcml2YXRlIGxvY0VuZCE6IFJlZ0V4cDtcbiAgICBwcml2YXRlIG5ld1N0YXJ0ITogc3RyaW5nO1xuICAgIHByaXZhdGUgbmV3RW5kITogc3RyaW5nO1xuICAgIHByaXZhdGUgbWlkZGxlU2VjITogc3RyaW5nO1xuXG5cbiAgICBjb25zdHJ1Y3RvciAoe1xuICAgICAgICBfZGF0YV9yYXcsXG4gICAgICAgIF9mb250X2ZpbGwsXG4gICAgICAgIF9mb250X3NpemUsXG4gICAgICAgIF9mb250X2ZhbWlseSxcbiAgICAgICAgX2xldHRlcl9zcGFjaW5nXG4gICAgICAgIH06IElMYWJlbE91dHNpZGUpIHtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGF0YV9yYXcgPSBfZGF0YV9yYXc7XG4gICAgICAgIHRoaXMuZm9udF9maWxsID0gX2ZvbnRfZmlsbDtcbiAgICAgICAgdGhpcy5mb250X3NpemUgPSBfZm9udF9zaXplO1xuICAgICAgICB0aGlzLmZvbnRfZmFtaWx5ID0gX2ZvbnRfZmFtaWx5O1xuICAgICAgICB0aGlzLmxldHRlcl9zcGFjaW5nID0gX2xldHRlcl9zcGFjaW5nO1xuICAgICAgICB0aGlzLmluaXRfdmlzKCk7XG5cbiAgICB9XG5cbiAgICBpbml0X3ZpcygpIHtcblxuICAgICAgICBjb25zdCB2aXMgPSB0aGlzO1xuXG4gICAgICAgIHZpcy5hcmMgPSBkMy5hcmMoKVxuICAgICAgICAgICAgLmlubmVyUmFkaXVzKFJBRElVU18wMiArIFJBRElVU19HQVApXG4gICAgICAgICAgICAub3V0ZXJSYWRpdXMoUkFESVVTXzAzIC0gUkFESVVTX0dBUCk7XG5cbiAgICAgICAgdmlzLnBpZSA9IGQzLnBpZSgpXG4gICAgICAgICAgICAuc3RhcnRBbmdsZSgwKVxuICAgICAgICAgICAgLmVuZEFuZ2xlKDIgKiBNYXRoLlBJKVxuICAgICAgICAgICAgLnZhbHVlKGZ1bmN0aW9uKF9kKSB7IHJldHVybiAzOyB9KVxuICAgICAgICAgICAgLnBhZEFuZ2xlKDAuMDEpXG4gICAgICAgICAgICAuc29ydChudWxsKTtcblxuICAgICAgICB2aXMuZyA9IHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwibGFiZWxfb3V0c2lkZVwiKVxuXG4gICAgICAgIHZpcy53cmFuZ2xlX2RhdGEoKTtcbiAgICB9XG5cblxuICAgIHdyYW5nbGVfZGF0YSgpIHtcblxuICAgICAgICBjb25zdCB2aXMgPSB0aGlzO1xuICAgICAgICB2aXMuZGF0YSA9IHZpcy5kYXRhX3Jhd1syXVtcImRhdGFcIl1bMF1bXCJtZXRyaWNcIl07XG4gICAgICAgIFxuXG4gICAgICAgIHZpcy51cGRhdGVfdmlzKCk7XG4gICAgfVxuXG5cbiAgICB1cGRhdGVfdmlzKCkge1xuXG4gICAgICAgIGNvbnN0IHZpcyA9IHRoaXM7XG5cbiAgICAgICAgdmlzLnJldmlzZUFyYyA9IGZ1bmN0aW9uKGQ6IGFueSwgaTogbnVtYmVyKSB7XG5cbiAgICAgICAgICAgIHZpcy5maXJzdEFyY1NlY3Rpb24gPSAvKF4uKz8pTC87XG4gICAgICAgICAgICB2aXMudGhpc1NlY3Rpb24gPSBkMy5zZWxlY3QoPGFueT50aGlzKS5hdHRyKFwiZFwiKTtcbiAgICAgICAgXG4gICAgICAgICAgICB2aXMubmV3QXJjID0gdmlzLmZpcnN0QXJjU2VjdGlvbi5leGVjKHZpcy50aGlzU2VjdGlvbikhWzFdO1xuICAgICAgICAgICAgdmlzLm5ld0FyYyA9IHZpcy5uZXdBcmMucmVwbGFjZSgvLC9nLCBcIiBcIik7XG5cbiAgICAgICAgICAgIGlmIChkLmVuZEFuZ2xlID4gKDAuNzUgKiBNYXRoLlBJKSAmJiBkLmVuZEFuZ2xlIDwgKDEuNSAqIE1hdGguUEkpKSB7XG5cbiAgICAgICAgICAgICAgICB2aXMubG9jU3RhcnQgPSAvTSguKj8pQS87XG4gICAgICAgICAgICAgICAgdmlzLmxvY01pZGRsZSA9IC9BKC4qPykwIDAgMS87XG4gICAgICAgICAgICAgICAgdmlzLmxvY0VuZCA9IC8wIDAgMSAoLio/KSQvO1xuXG4gICAgICAgICAgICAgICAgdmlzLm5ld1N0YXJ0ID0gdmlzLmxvY0VuZC5leGVjKHZpcy5uZXdBcmMpIVsxXTtcbiAgICAgICAgICAgICAgICB2aXMubmV3RW5kID0gdmlzLmxvY1N0YXJ0LmV4ZWModmlzLm5ld0FyYykhWzFdO1xuICAgICAgICAgICAgICAgIHZpcy5taWRkbGVTZWMgPSB2aXMubG9jTWlkZGxlLmV4ZWModmlzLm5ld0FyYykhWzFdO1xuXG4gICAgICAgICAgICAgICAgdmlzLm5ld0FyYyA9IFwiTVwiICsgdmlzLm5ld1N0YXJ0ICsgXCJBXCIgKyB2aXMubWlkZGxlU2VjICsgXCIwIDAgMCBcIiArIHZpcy5uZXdFbmQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZpcy5nLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiaGlkZGVuRG9udXRBcmNzXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBcImRvbnV0QXJjXCIgKyBpKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCB2aXMubmV3QXJjKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgdmlzLmcuc2VsZWN0QWxsKFwiLmRvbnV0QXJjU2xpY2VzXCIpXG4gICAgICAgICAgICAuZGF0YSh2aXMucGllKHZpcy5kYXRhKSlcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZG9udXRBcmNTbGljZXNcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgKDxhbnk+dmlzLmFyYykpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAgICAgICAgIC5lYWNoKHZpcy5yZXZpc2VBcmMpO1xuXG5cbiAgICAgICAgdmlzLmcuc2VsZWN0QWxsKFwiLmRvbnV0VGV4dFwiKVxuICAgICAgICAgICAgLmRhdGEodmlzLnBpZSh2aXMuZGF0YSkpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbnV0VGV4dFwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCJibGFja1wiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgZnVuY3Rpb24oZDogYW55LCBfaTogbnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmVuZEFuZ2xlID4gKDAuNzUgKiBNYXRoLlBJKSAmJiBkLmVuZEFuZ2xlIDwgKDEuNSAqIE1hdGguUEkpID8gMjUgOiAtMTg7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwidGV4dFBhdGhcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInN0YXJ0T2Zmc2V0XCIsIFwiNTAlXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiei1pbmRleFwiLCBcIjFcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieGxpbms6aHJlZlwiLCBmdW5jdGlvbihfZDogYW55LCBpOiBudW1iZXIpIHsgcmV0dXJuIFwiI2RvbnV0QXJjXCIgKyBpOyB9KVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBgJHt2aXMuZm9udF9zaXplfXB4YClcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmb250LWZhbWlseVwiLCB2aXMuZm9udF9mYW1pbHkpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCB2aXMuZm9udF9maWxsKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImxldHRlci1zcGFjaW5nXCIsIGAke3Zpcy5sZXR0ZXJfc3BhY2luZ31weGApXG4gICAgICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZDogYW55KSB7IHJldHVybiBkLmRhdGEubWV0cmljX25hbWUudG9Mb3dlckNhc2UoKTsgfSlcblxuICAgIH1cblxufSIsIlxuXG5cbmZ1bmN0aW9uIHBvcHVsYXRlX2Ryb3Bkb3duKF9jb3VudHJ5X2lkX3NlbGVjdGVkOiBzdHJpbmcsIF91cmw6IHN0cmluZykge1xuXG4gICAgbGV0IGRyb3Bkb3duOiBIVE1MU2VsZWN0RWxlbWVudCA9IDxIVE1MU2VsZWN0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvdW50cnktZHJvcGRvd25cIikhO1xuXG4gICAgbGV0IGRlZmF1bHRPcHRpb246IEhUTUxPcHRpb25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICBkZWZhdWx0T3B0aW9uLnRleHQgPSBcIkNob2lzaXNzZXogdm90cmUgYW5uw6llXCI7XG4gICAgZGVmYXVsdE9wdGlvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgZHJvcGRvd24uYWRkKGRlZmF1bHRPcHRpb24pO1xuICAgIFxuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICByZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgX3VybCwgdHJ1ZSk7XG4gICAgXG4gICAgcmVxdWVzdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KVswXVtcImRhdGFcIl07XG4gICAgICAgICAgICBsZXQgb3B0aW9uO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbGV0IGNvdW50cnlfbmFtZSA9IGRhdGFbaV0uY291bnRyeV9uYW1lO1xuICAgICAgICAgICAgICAgIGxldCBjb3VudHJ5X2lkID0gZGF0YVtpXS5jb3VudHJ5X2lkO1xuICAgICAgICAgICAgICAgIG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgICAgICAgICAgb3B0aW9uLnRleHQgPSBjb3VudHJ5X25hbWU7XG4gICAgICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0gY291bnRyeV9pZDtcbiAgICAgICAgICAgICAgICBpZiAoY291bnRyeV9pZCA9PSBfY291bnRyeV9pZF9zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGQob3B0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJlYWNoZWQgdGhlIHNlcnZlciwgYnV0IGl0IHJldHVybmVkIGFuIGVycm9yXG4gICAgICAgIH0gICBcbiAgICB9XG4gICAgXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBbiBlcnJvciBvY2N1cnJlZCBmZXRjaGluZyB0aGUgSlNPTiBmcm9tIFwiICsgX3VybCk7XG4gICAgfTtcbiAgICBcbiAgICByZXF1ZXN0LnNlbmQoKTtcblxufVxuXG5leHBvcnQgeyBwb3B1bGF0ZV9kcm9wZG93biB9OyJdLCJuYW1lcyI6WyJub25lIiwic2VsZWN0b3IiLCJ0aGlzIiwicXVlcnlTZWxlY3RvciIsIngiLCJBcnJheSIsImZyb20iLCJlbXB0eSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXRjaGVzIiwiY2hpbGRNYXRjaGVyIiwibm9kZSIsImZpbmQiLCJwcm90b3R5cGUiLCJjaGlsZEZpcnN0IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJmaWx0ZXIiLCJjaGlsZHJlbiIsInVwZGF0ZSIsImxlbmd0aCIsIkVudGVyTm9kZSIsInBhcmVudCIsImRhdHVtIiwib3duZXJEb2N1bWVudCIsIm5hbWVzcGFjZVVSSSIsIl9uZXh0IiwiX3BhcmVudCIsIl9fZGF0YV9fIiwiYmluZEluZGV4IiwiZ3JvdXAiLCJlbnRlciIsImV4aXQiLCJkYXRhIiwiaSIsImdyb3VwTGVuZ3RoIiwiZGF0YUxlbmd0aCIsImJpbmRLZXkiLCJrZXkiLCJrZXlWYWx1ZSIsIm5vZGVCeUtleVZhbHVlIiwiTWFwIiwia2V5VmFsdWVzIiwiY2FsbCIsImhhcyIsInNldCIsImdldCIsImRlbGV0ZSIsImFzY2VuZGluZyIsImEiLCJiIiwiTmFOIiwiY29uc3RydWN0b3IiLCJhcHBlbmRDaGlsZCIsImNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsInhodG1sIiwic3ZnIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsIm5hbWUiLCJwcmVmaXgiLCJpbmRleE9mIiwic2xpY2UiLCJuYW1lc3BhY2VzIiwiaGFzT3duUHJvcGVydHkiLCJzcGFjZSIsImxvY2FsIiwiYXR0clJlbW92ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImF0dHJSZW1vdmVOUyIsImZ1bGxuYW1lIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJhdHRyQ29uc3RhbnQiLCJ2YWx1ZSIsInNldEF0dHJpYnV0ZSIsImF0dHJDb25zdGFudE5TIiwic2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24iLCJ2IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJhdHRyRnVuY3Rpb25OUyIsImRlZmF1bHRWaWV3IiwiZG9jdW1lbnQiLCJzdHlsZVJlbW92ZSIsInN0eWxlIiwicmVtb3ZlUHJvcGVydHkiLCJzdHlsZUNvbnN0YW50IiwicHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZVZhbHVlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJwcm9wZXJ0eVJlbW92ZSIsInByb3BlcnR5Q29uc3RhbnQiLCJwcm9wZXJ0eUZ1bmN0aW9uIiwiY2xhc3NBcnJheSIsInN0cmluZyIsInRyaW0iLCJzcGxpdCIsImNsYXNzTGlzdCIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlZEFkZCIsIm5hbWVzIiwibGlzdCIsIm4iLCJhZGQiLCJjbGFzc2VkUmVtb3ZlIiwicmVtb3ZlIiwiY2xhc3NlZFRydWUiLCJjbGFzc2VkRmFsc2UiLCJjbGFzc2VkRnVuY3Rpb24iLCJ0ZXh0UmVtb3ZlIiwidGV4dENvbnRlbnQiLCJ0ZXh0Q29uc3RhbnQiLCJ0ZXh0RnVuY3Rpb24iLCJodG1sUmVtb3ZlIiwiaW5uZXJIVE1MIiwiaHRtbENvbnN0YW50IiwiaHRtbEZ1bmN0aW9uIiwicmFpc2UiLCJuZXh0U2libGluZyIsInBhcmVudE5vZGUiLCJsb3dlciIsInByZXZpb3VzU2libGluZyIsImZpcnN0Q2hpbGQiLCJjcmVhdG9ySW5oZXJpdCIsInVyaSIsImRvY3VtZW50RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdG9yRml4ZWQiLCJuYW1lc3BhY2UiLCJjb25zdGFudE51bGwiLCJyZW1vdmVDaGlsZCIsInNlbGVjdGlvbl9jbG9uZVNoYWxsb3ciLCJjbG9uZSIsImNsb25lTm9kZSIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJvblJlbW92ZSIsInR5cGVuYW1lIiwib24iLCJfX29uIiwibyIsImoiLCJtIiwidHlwZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lciIsIm9wdGlvbnMiLCJvbkFkZCIsImV2ZW50IiwiY29udGV4dExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInB1c2giLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiZGlzcGF0Y2hDb25zdGFudCIsImRpc3BhdGNoRnVuY3Rpb24iLCJqb2luIiwic3BsaWNlIiwiY29udGFpbnMiLCJyb290IiwiU2VsZWN0aW9uIiwiZ3JvdXBzIiwicGFyZW50cyIsIl9ncm91cHMiLCJfcGFyZW50cyIsInNlbGVjdGlvbiIsInNlbGVjdCIsInN1Ymdyb3VwcyIsInN1Ym5vZGUiLCJzdWJncm91cCIsInNlbGVjdEFsbCIsImFycmF5IiwiYXJyYXlBbGwiLCJzZWxlY3RvckFsbCIsInNlbGVjdENoaWxkIiwibWF0Y2giLCJjaGlsZEZpbmQiLCJzZWxlY3RDaGlsZHJlbiIsImNoaWxkcmVuRmlsdGVyIiwibWF0Y2hlciIsImJpbmQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJwcmV2aW91cyIsImkwIiwiaTEiLCJfZW50ZXIiLCJfZXhpdCIsIm1hcCIsInNwYXJzZSIsIm9uZW50ZXIiLCJvbnVwZGF0ZSIsIm9uZXhpdCIsImFwcGVuZCIsIm1lcmdlIiwib3JkZXIiLCJFcnJvciIsImdyb3VwczAiLCJncm91cHMxIiwibTAiLCJtMSIsIk1hdGgiLCJtaW4iLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsInNvcnQiLCJjb21wYXJlIiwiY29tcGFyZU5vZGUiLCJzb3J0Z3JvdXBzIiwic29ydGdyb3VwIiwiY2FsbGJhY2siLCJub2RlcyIsInNpemUiLCJlYWNoIiwiYXR0ciIsImdldEF0dHJpYnV0ZU5TIiwicHJvcGVydHkiLCJjbGFzc2VkIiwidGV4dCIsImh0bWwiLCJjcmVhdGUiLCJjcmVhdG9yIiwiaW5zZXJ0IiwiYmVmb3JlIiwiZGVlcCIsInQiLCJ0eXBlbmFtZXMiLCJwYXJzZVR5cGVuYW1lcyIsImRpc3BhdGNoIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJub29wIiwiXyIsInRlc3QiLCJEaXNwYXRjaCIsImMiLCJjb25jYXQiLCJ0eXBlcyIsIlQiLCJjb3B5IiwidGhhdCIsImFyZ3MiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwidGltZW91dCIsImludGVydmFsIiwicG9rZURlbGF5IiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwibm93IiwiRGF0ZSIsInNldEZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZiIsInNldFRpbWVvdXQiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwiZGVsYXkiLCJ0aW1lIiwicmVzdGFydCIsIndha2UiLCJlIiwidGltZXJGbHVzaCIsInQwIiwidDIiLCJ0MSIsIkluZmluaXR5Iiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZWxhcHNlZCIsInN0b3AiLCJUeXBlRXJyb3IiLCJlbXB0eU9uIiwiZW1wdHlUd2VlbiIsIkNSRUFURUQiLCJTVEFSVElORyIsIlNUQVJURUQiLCJSVU5OSU5HIiwiRU5ESU5HIiwiRU5ERUQiLCJpZCIsImluZGV4IiwidGltaW5nIiwic2NoZWR1bGVzIiwiX190cmFuc2l0aW9uIiwic2VsZiIsInR3ZWVuIiwic3RhcnQiLCJzdGF0ZSIsInRpY2siLCJkdXJhdGlvbiIsImVhc2UiLCJpbml0Iiwic2NoZWR1bGUiLCJzdmdOb2RlIiwiZGVncmVlcyIsIlBJIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJyb3RhdGUiLCJza2V3WCIsInNjYWxlWCIsInNjYWxlWSIsImQiLCJzcXJ0IiwiYXRhbjIiLCJhdGFuIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm0iLCJwYXJzZSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJzIiwicSIsInhhIiwieWEiLCJ4YiIsInliIiwibnVtYmVyIiwidHJhbnNsYXRlIiwic2NhbGUiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyIsIkRPTU1hdHJpeCIsIldlYktpdENTU01hdHJpeCIsImlzSWRlbnRpdHkiLCJkZWNvbXBvc2UiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyIsInRyYW5zZm9ybSIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsIm1hdHJpeCIsInR3ZWVuUmVtb3ZlIiwidHdlZW4wIiwidHdlZW4xIiwidHdlZW5GdW5jdGlvbiIsInR3ZWVuVmFsdWUiLCJ0cmFuc2l0aW9uIiwiX2lkIiwiZmFjdG9yeSIsImV4dGVuZCIsImRlZmluaXRpb24iLCJPYmplY3QiLCJDb2xvciIsImRhcmtlciIsImJyaWdodGVyIiwicmVJIiwicmVOIiwicmVQIiwicmVIZXgiLCJyZVJnYkludGVnZXIiLCJSZWdFeHAiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29sb3JfZm9ybWF0SGV4IiwicmdiIiwiZm9ybWF0SGV4IiwiY29sb3JfZm9ybWF0UmdiIiwiZm9ybWF0UmdiIiwiY29sb3IiLCJmb3JtYXQiLCJsIiwidG9Mb3dlckNhc2UiLCJleGVjIiwicGFyc2VJbnQiLCJyZ2JuIiwiUmdiIiwicmdiYSIsImhzbGEiLCJyIiwiZyIsIm9wYWNpdHkiLCJyZ2JfZm9ybWF0SGV4IiwiaGV4IiwicmdiX2Zvcm1hdFJnYiIsImlzTmFOIiwibWF4Iiwicm91bmQiLCJ0b1N0cmluZyIsImgiLCJIc2wiLCJoc2xDb252ZXJ0IiwiaHNsMnJnYiIsIm0yIiwiYmFzaXMiLCJ2MCIsInYxIiwidjIiLCJ2MyIsInQzIiwiY2hhbm5lbHMiLCJhc3NpZ24iLCJkaXNwbGF5YWJsZSIsImZvcm1hdEhzbCIsImsiLCJwb3ciLCJub2dhbW1hIiwibGluZWFyIiwicmdiR2FtbWEiLCJ5IiwiZXhwb25lbnRpYWwiLCJnYW1tYSIsImVuZCIsInJnYlNwbGluZSIsInNwbGluZSIsImNvbG9ycyIsInZhbHVlcyIsImZsb29yIiwicmVBIiwicmVCIiwic291cmNlIiwiYW0iLCJibSIsImJzIiwiYmkiLCJsYXN0SW5kZXgiLCJvbmUiLCJ6ZXJvIiwiaW50ZXJwb2xhdGUiLCJ2YWx1ZTEiLCJzdHJpbmcwMCIsImludGVycG9sYXRlMCIsInN0cmluZzEiLCJzdHJpbmcwIiwic3RyaW5nMTAiLCJhdHRyVHdlZW5OUyIsImF0dHJJbnRlcnBvbGF0ZU5TIiwiX3ZhbHVlIiwiYXR0clR3ZWVuIiwiYXR0ckludGVycG9sYXRlIiwiZGVsYXlGdW5jdGlvbiIsImRlbGF5Q29uc3RhbnQiLCJkdXJhdGlvbkZ1bmN0aW9uIiwiZHVyYXRpb25Db25zdGFudCIsIl9uYW1lIiwibmV3SWQiLCJzZWxlY3Rpb25fcHJvdG90eXBlIiwiaW5oZXJpdCIsImlkMCIsImlkMSIsIm9uMCIsIm9uMSIsInNpdCIsImV2ZXJ5Iiwib25GdW5jdGlvbiIsInN0eWxlVHdlZW4iLCJzdHlsZU51bGwiLCJsaXN0ZW5lcjAiLCJ1bmRlZmluZWQiLCJzdHlsZU1heWJlUmVtb3ZlIiwic3R5bGVJbnRlcnBvbGF0ZSIsInRleHRUd2VlbiIsInRleHRJbnRlcnBvbGF0ZSIsInJlbW92ZUZ1bmN0aW9uIiwiZWFzZUNvbnN0YW50IiwiZWFzZVZhcnlpbmciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNhbmNlbCIsImludGVycnVwdCIsImRlZmF1bHRUaW1pbmciLCJhY3RpdmUiLCJhYnMiLCJyZXNwb25zZUpzb24iLCJyZXNwb25zZSIsIm9rIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImpzb24iLCJnZW5lcmljQXJyYXkiLCJuYiIsIm5hIiwic2V0VGltZSIsImRhdGUiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIkRhdGFWaWV3IiwiaXNBcnJheSIsInZhbHVlT2YiLCJvYmplY3QiLCJkb21haW4iLCJyYW5nZSIsImltcGxpY2l0Iiwib3JkaW5hbCIsInVua25vd24iLCJiYW5kIiwic3RlcCIsImJhbmR3aWR0aCIsIm9yZGluYWxSYW5nZSIsInIwIiwicjEiLCJwYWRkaW5nSW5uZXIiLCJwYWRkaW5nT3V0ZXIiLCJhbGlnbiIsInJlc2NhbGUiLCJyZXZlcnNlIiwiY2VpbCIsInJhbmdlUm91bmQiLCJwYWRkaW5nIiwiZGVsdGEiLCJsZWZ0IiwibG8iLCJoaSIsIm1pZCIsImFzY2VuZGluZ0NvbXBhcmF0b3IiLCJjZW50ZXIiLCJyaWdodCIsImFzY2VuZGluZ0Jpc2VjdCIsImJpc2VjdG9yIiwiYmlzZWN0UmlnaHQiLCJ1bml0Iiwibm9ybWFsaXplIiwiYmltYXAiLCJkMCIsImQxIiwicG9seW1hcCIsImJpc2VjdCIsInRyYW5zZm9ybWVyIiwidW50cmFuc2Zvcm0iLCJwaWVjZXdpc2UiLCJvdXRwdXQiLCJpbnB1dCIsImNsYW1wIiwiaW52ZXJ0IiwidSIsImUxMCIsImU1IiwiZTIiLCJ0aWNrSW5jcmVtZW50IiwiY291bnQiLCJwb3dlciIsImxvZyIsIkxOMTAiLCJlcnJvciIsInByZWZpeEV4cG9uZW50IiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwic2lnbiIsInN5bWJvbCIsIndpZHRoIiwiY29tbWEiLCJwcmVjaXNpb24iLCJmb3JtYXREZWNpbWFsUGFydHMiLCJwIiwidG9FeHBvbmVudGlhbCIsImNvZWZmaWNpZW50IiwiZXhwb25lbnQiLCJ0b0ZpeGVkIiwidG9Mb2NhbGVTdHJpbmciLCJyZXBsYWNlIiwidG9QcmVjaXNpb24iLCJmb3JtYXRSb3VuZGVkIiwidG9VcHBlckNhc2UiLCJmb3JtYXRQcmVmaXgiLCJwcmVmaXhlcyIsImxpbmVhcmlzaCIsInRpY2tzIiwiaXNGaW5pdGUiLCJ0aWNrRm9ybWF0Iiwic3RlcDAiLCJzdGVwMSIsInRpY2tTdGVwIiwicHJlY2lzaW9uUHJlZml4IiwicHJlY2lzaW9uUm91bmQiLCJwcmVjaXNpb25GaXhlZCIsIm5pY2UiLCJwcmVzdGVwIiwibWF4SXRlciIsInNxdWFyZSIsInJhZGlhbCIsInNxdWFyZWQiLCJ1bnNxdWFyZSIsImxvY2FsZSIsImdyb3VwaW5nIiwidGhvdXNhbmRzIiwiTnVtYmVyIiwic3Vic3RyaW5nIiwiY3VycmVuY3lQcmVmaXgiLCJjdXJyZW5jeSIsImN1cnJlbmN5U3VmZml4IiwiZGVjaW1hbCIsIm51bWVyYWxzIiwiZm9ybWF0TnVtZXJhbHMiLCJTdHJpbmciLCJwZXJjZW50IiwibWludXMiLCJuYW4iLCJuZXdGb3JtYXQiLCJmb3JtYXRUeXBlcyIsInN1ZmZpeCIsImZvcm1hdFR5cGUiLCJtYXliZVN1ZmZpeCIsInZhbHVlUHJlZml4IiwidmFsdWVTdWZmaXgiLCJ2YWx1ZU5lZ2F0aXZlIiwib3V0IiwiZm9ybWF0VHJpbSIsImNoYXJDb2RlQXQiLCJwaSIsInRhdSIsImVwc2lsb24iLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsInBhdGgiLCJtb3ZlVG8iLCJjbG9zZVBhdGgiLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwieDEiLCJ5MSIsImJlemllckN1cnZlVG8iLCJ4MiIsInkyIiwiYXJjVG8iLCJ4MCIsInkwIiwieDIxIiwieTIxIiwieDAxIiwieTAxIiwibDAxXzIiLCJ4MjAiLCJ5MjAiLCJsMjFfMiIsImwyMF8yIiwibDIxIiwibDAxIiwiYWNvcyIsInQwMSIsInQyMSIsImFyYyIsImEwIiwiYTEiLCJjY3ciLCJkeCIsImNvcyIsImR5Iiwic2luIiwiY3ciLCJkYSIsInJlY3QiLCJ3IiwiaGFsZlBpIiwiYXNpbiIsImFyY0lubmVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJhcmNPdXRlclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiYXJjU3RhcnRBbmdsZSIsInN0YXJ0QW5nbGUiLCJhcmNFbmRBbmdsZSIsImVuZEFuZ2xlIiwiYXJjUGFkQW5nbGUiLCJwYWRBbmdsZSIsImNvcm5lclRhbmdlbnRzIiwicmMiLCJveCIsIm95IiwieDExIiwieTExIiwieDEwIiwieTEwIiwieDAwIiwieTAwIiwiZDIiLCJEIiwiY3gwIiwiY3kwIiwiY3gxIiwiY3kxIiwiZHgwIiwiZHkwIiwiZHgxIiwiZHkxIiwiY3giLCJjeSIsImNvcm5lclJhZGl1cyIsInBhZFJhZGl1cyIsImNvbnRleHQiLCJidWZmZXIiLCJhMDEiLCJhMTEiLCJhMDAiLCJhMTAiLCJkYTAiLCJkYTEiLCJhcCIsInJwIiwicmMwIiwicmMxIiwicDAiLCJwMSIsIm9jIiwieDMiLCJ5MyIsIngzMiIsInkzMiIsImludGVyc2VjdCIsImF4IiwiYXkiLCJieCIsImJ5Iiwia2MiLCJsYyIsImNlbnRyb2lkIiwic29ydFZhbHVlcyIsImRlc2NlbmRpbmciLCJwaWUiLCJzdW0iLCJhcmNzIiwicGEiLCJwb2ludCIsImFwcGx5WCIsImFwcGx5WSIsImxvY2F0aW9uIiwiaW52ZXJ0WCIsImludmVydFkiLCJyZXNjYWxlWCIsInJlc2NhbGVZIiwidXJsIiwiV0lEVEgiLCJIRUlHSFQiLCJSQURJVVNfMDUiLCJ0b29sdGlwIiwiZGF0YV9yYXciLCJkYXRhX2luc2lkZV9hcnJheSIsImNpcmN1bGFyX2Jhcl9pbnNpZGUiLCJjaXJjdWxhcl9iYXJfb3V0c2lkZSIsImxhYmVsX2luc2lkZSIsImxhYmVsX291dHNpZGUiLCJib3VuZGFyeV9pbnNpZGUiLCJib3VuZGFyeV9taWRkbGUiLCJib3VuZGFyeV9vdXRzaWRlIiwibW91c2VvdmVyIiwiX2V2ZW50IiwiX2QiLCJjdXJyZW50VGFyZ2V0IiwibW91c2VsZWF2ZSIsIkJvdW5kYXJ5IiwiX3BlcnNwZWN0aXZlIiwiX2RhdGFfcmF3IiwiX2JvdW5kYXJ5X2ZpbGwiLCJfZm9udF9maWxsIiwiX2ZvbnRfc2l6ZSIsIl9mb250X2ZhbWlseSIsIl9sZXR0ZXJfc3BhY2luZyIsInBlcnNwZWN0aXZlIiwiYm91bmRhcnlfZmlsbCIsImZvbnRfZmlsbCIsImZvbnRfc2l6ZSIsImZvbnRfZmFtaWx5IiwibGV0dGVyX3NwYWNpbmciLCJpbml0X3ZpcyIsInZpcyIsIl9wYXRoIiwidG9vbHRpcF9vZmZzZXRfZXZlbnRfcGFnZVgiLCJ0b29sdGlwX3RyYW5zbGF0ZVgiLCJ0b29sdGlwX29mZnNldF9ldmVudF9wYWdlWSIsImRlc2NyaXB0aW9uIiwiaW5uZXJfcmFkaXVzIiwiUkFESVVTXzAyIiwib3V0ZXJfcmFkaXVzIiwiUkFESVVTXzAzIiwibW91c2Vtb3ZlIiwicGFnZVkiLCJtaWRkbGVfcmFkaXVzIiwidGV4dF9mb3JfaWQiLCJhcmNfc2hhcGUiLCJhcmNfdGV4dCIsIkNpcmN1bGFyQmFyIiwiX2RhdGFfaW5zaWRlX2FycmF5IiwicmFkaXVzX2lubmVyIiwicmFkaXVzX291dGVyIiwicmFkaXVzX2dyYWRpZW50IiwiY29sb3JfYmFyXzAiLCJjb2xvcl9iYXJfMTAwIiwib2Zmc2V0XzAiLCJjb2xvcl9zdHJva2UiLCJkb21haW5feV9taW4iLCJkb21haW5feV9tYXgiLCJ4X3NjYWxlIiwieV9zY2FsZSIsImRlZnMiLCJyYWRpYWxfZ3JhZGllbnQiLCJ3cmFuZ2xlX2RhdGEiLCJzZWxlY3RlZF9vcHRpb24iLCIkIiwidmFsIiwic2VsZWN0ZWRfb3B0aW9uX3RleHQiLCJjb3VudHJ5X2lkX2luZGV4IiwibWV0cmljX2NhdGVnb3J5IiwibWV0cmljX25hbWUiLCJtZXRyaWNfZGVzY3JpcHRpb24iLCJ1c2VyX2ZyaWVuZGx5X251bWJlciIsIm1ldHJpY192YWx1ZV9kaXNwbGF5IiwibWV0cmljX3ZhbHVlX2lkZWFsIiwibWV0cmljX3ZhbHVlX2N1cnJlbnQiLCJtZXRyaWNfeWVhciIsIm1ldHJpY19zb3VyY2UiLCJ1cGRhdGVfdmlzIiwidHJhbnNpdGlvbl9kdXJhdGlvbiIsImJhciIsImRhdGFfeSIsImFyY190d2VlbiIsImRfIiwiaV8iLCJfY3VycmVudCIsInRfIiwiTGFiZWxJbnNpZGUiLCJmb3JFYWNoIiwiX2kiLCJlbmRfYW5nbGUiLCJyb3RhdGlvbiIsInRleHRfYW5jaG9yIiwiTGFiZWxPdXRzaWRlIiwicmV2aXNlQXJjIiwiZmlyc3RBcmNTZWN0aW9uIiwidGhpc1NlY3Rpb24iLCJuZXdBcmMiLCJsb2NTdGFydCIsImxvY01pZGRsZSIsImxvY0VuZCIsIm5ld1N0YXJ0IiwibmV3RW5kIiwibWlkZGxlU2VjIiwiX2NvdW50cnlfaWRfc2VsZWN0ZWQiLCJfdXJsIiwiZHJvcGRvd24iLCJnZXRFbGVtZW50QnlJZCIsImRlZmF1bHRPcHRpb24iLCJkaXNhYmxlZCIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJvbmxvYWQiLCJKU09OIiwicmVzcG9uc2VUZXh0Iiwib3B0aW9uIiwiY291bnRyeV9uYW1lIiwiY291bnRyeV9pZCIsInNlbGVjdGVkIiwib25lcnJvciIsImNvbnNvbGUiLCJzZW5kIiwicG9wdWxhdGVfZHJvcGRvd24iLCJmZXRjaCIsInRoZW4iXSwic291cmNlUm9vdCI6IiJ9